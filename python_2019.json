[{"idx": "webquery-test-1", "doc": "How to iterate over rows in a DataFrame in Pandas", "code": "DataFrame.iterrowsimport pandas as pd\n\ndf = pd.DataFrame({'c1': [10, 11, 12], 'c2': [100, 110, 120]})\ndf = df.reset_index()  # make sure indexes pair with number of rows\n\nfor index, row in df.iterrows():\n    print(row['c1'], row['c2'])\n10 100\n11 110\n12 120\n"}, {"idx": "webquery-test-2", "doc": "How do I select rows from a DataFrame based on column values?", "code": "some_valuesome_valuedf.loc[df['column_name'] == some_value]\nsome_valuessome_valuesdf.loc[df['column_name'].isin(some_values)]\n&amp;df.loc[(df['column_name'] &gt;= A) &amp; (df['column_name'] &lt;= B)]\n&amp;&amp;&amp;df['column_name'] &gt;= A &amp; df['column_name'] &lt;= B\ndf['column_name'] &gt;= (A &amp; df['column_name']) &lt;= B\nsome_valuesome_valuedf.loc[df['column_name'] != some_value]\nisinisinisindf.loc[~df['column_name'].isin(some_values)]\nimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'A': 'foo bar foo bar foo bar foo foo'.split(),\n                   'B': 'one one two three two two one three'.split(),\n                   'C': np.arange(8), 'D': np.arange(8) * 2})\nprint(df)\n#      A      B  C   D\n# 0  foo    one  0   0\n# 1  bar    one  1   2\n# 2  foo    two  2   4\n# 3  bar  three  3   6\n# 4  foo    two  4   8\n# 5  bar    two  5  10\n# 6  foo    one  6  12\n# 7  foo  three  7  14\n\nprint(df.loc[df['A'] == 'foo'])\n     A      B  C   D\n0  foo    one  0   0\n2  foo    two  2   4\n4  foo    two  4   8\n6  foo    one  6  12\n7  foo  three  7  14\nisinprint(df.loc[df['B'].isin(['one','three'])])\n     A      B  C   D\n0  foo    one  0   0\n1  bar    one  1   2\n3  bar  three  3   6\n6  foo    one  6  12\n7  foo  three  7  14\ndf.locdf = df.set_index(['B'])\nprint(df.loc['one'])\n       A  C   D\nB              \none  foo  0   0\none  bar  1   2\none  foo  6  12\ndf.index.isindf.loc[df.index.isin(['one','two'])]\n       A  C   D\nB              \none  foo  0   0\none  bar  1   2\ntwo  foo  2   4\ntwo  foo  4   8\ntwo  bar  5  10\none  foo  6  12\n"}, {"idx": "webquery-test-1", "doc": "How do I access environment variables in Python?", "code": "os.environimport os\nprint(os.environ['HOME'])\nprint(os.environ)\nKeyError# Returns `None` if key doesn't exist\nprint(os.environ.get('KEY_THAT_MIGHT_EXIST'))\n\n# Returns `default_value` if key doesn't exist\nprint(os.environ.get('KEY_THAT_MIGHT_EXIST', default_value))\n\n# Returns `default_value` if key doesn't exist\nprint(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))\n"}, {"idx": "webquery-test-2", "doc": "Static class variables and methods in Python", "code": "&gt;&gt;&gt; class MyClass:\n...     i = 3\n...\n&gt;&gt;&gt; MyClass.i\n3 \nii&gt;&gt;&gt; m = MyClass()\n&gt;&gt;&gt; m.i = 4\n&gt;&gt;&gt; MyClass.i, m.i\n&gt;&gt;&gt; (3, 4)\nclass C:\n    @staticmethod\n    def f(arg1, arg2, ...): ...\n"}, {"idx": "webquery-test-3", "doc": "How do I determine if an object has an attribute in Python?", "code": "hasattr()if hasattr(a, 'property'):\n    a.property\nhasattrhasattr"}, {"idx": "webquery-test-1", "doc": "Why is reading lines from stdin much slower in C++ than Python?", "code": "cinstd::ios_base::sync_with_stdio(false);\nFILE*FILE*FILE*int myvalue1;\ncin &gt;&gt; myvalue1;\nint myvalue2;\nscanf(\"%d\",&amp;myvalue2);\ncincinstdiostdiostdiosync_with_stdio"}, {"idx": "webquery-test-2", "doc": "How to remove an element from a list by index", "code": "del&gt;&gt;&gt; a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n&gt;&gt;&gt; del a[-1]\n&gt;&gt;&gt; a\n[0, 1, 2, 3, 4, 5, 6, 7, 8]\n&gt;&gt;&gt; del a[2:4]\n&gt;&gt;&gt; a\n[0, 1, 4, 5, 6, 7, 8, 9]\n"}, {"idx": "webquery-test-3", "doc": "Delete a column from a Pandas DataFrame", "code": "dropdf = df.drop('column_name', axis=1)\n111dfdf.drop('column_name', axis=1, inplace=True)\ndf = df.drop(df.columns[[0, 1, 3]], axis=1)  # df.columns is zero-based pd.Index\ndf.drop(['column_nameA', 'column_nameB'], axis=1, inplace=True)\ndrop()df = df.drop(columns=['column_nameA', 'column_nameB'])\n"}, {"idx": "webquery-test-4", "doc": "How do I remove a trailing newline?", "code": "rstrip()&gt;&gt;&gt; 'test string\\n'.rstrip()\n'test string'\nrstrip()rstrip()&gt;&gt;&gt; 'test string \\n \\r\\n\\n\\r \\n\\n'.rstrip()\n'test string'\n&gt;&gt;&gt; 'test string \\n \\r\\n\\n\\r \\n\\n'.rstrip('\\n')\n'test string \\n \\r\\n\\n\\r '\nrstrip()rstrip()rstrip()&gt;&gt;&gt; s = \"   \\n\\r\\n  \\n  abc   def \\n\\r\\n  \\n  \"\n&gt;&gt;&gt; s.strip()\n'abc   def'\n&gt;&gt;&gt; s.lstrip()\n'abc   def \\n\\r\\n  \\n  '\n&gt;&gt;&gt; s.rstrip()\n'   \\n\\r\\n  \\n  abc   def'\n"}, {"idx": "webquery-test-5", "doc": "Getting the class name of an instance", "code": "__name____name__&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; x = itertools.count(0)\n&gt;&gt;&gt; type(x).__name__\n'count'\nx.__class__.__name__\n"}, {"idx": "webquery-test-6", "doc": "What is the difference between venv, pyvenv, pyenv, virtualenv, virtualenvwrapper, pipenv, etc?", "code": "virtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvpyvenvpyvenvpyvenvpyvenvpyvenvpyvenvpyvenvpyvenvpyvenvpyvenv"}, {"idx": "webquery-test-7", "doc": "Installing specific package version with pip", "code": "pip install -Ivpip install -Iv-I-I-I-I-Ipip install --helppip install -I MySQL_python==1.2.2pip install -Iv MySQL_python==1.2.2pip uninstall MySQL_python\npip install -Iv http://sourceforge.net/projects/mysql-python/files/mysql-python/1.2.2/MySQL-python-1.2.2.tar.gz/download\n"}, {"idx": "webquery-test-8", "doc": "How to prettyprint a JSON file?", "code": "indent=indent=indent=&gt;&gt;&gt; import json\n&gt;&gt;&gt;\n&gt;&gt;&gt; your_json = '[\"foo\", {\"bar\": [\"baz\", null, 1.0, 2]}]'\n&gt;&gt;&gt; parsed = json.loads(your_json)\n&gt;&gt;&gt; print(json.dumps(parsed, indent=4))\n[\n    \"foo\",\n    {\n        \"bar\": [\n            \"baz\",\n            null,\n            1.0,\n            2\n        ]\n    }\n]\njson.load()with open('filename.txt', 'r') as handle:\n    parsed = json.load(handle)\n"}, {"idx": "webquery-test-9", "doc": "Replacements for switch statement in Python?", "code": "matchmatchdef f(x):\n    match x:\n        case 'a':\n            return 1\n        case 'b':\n            return 2\n        case _:\n            return 0   # 0 is the default case if x is not found\nmatchmatchdef f(x):\n    return {\n        'a': 1,\n        'b': 2,\n    }[x]\n"}, {"idx": "webquery-test-1", "doc": "Extracting extension from filename in Python", "code": "os.path.splitext&gt;&gt;&gt; import os\n&gt;&gt;&gt; filename, file_extension = os.path.splitext('/path/to/somefile.ext')\n&gt;&gt;&gt; filename\n'/path/to/somefile'\n&gt;&gt;&gt; file_extension\n'.ext'\nos.path.splitextos.path.splitextos.path.splitextos.path.splitextos.path.splitext&gt;&gt;&gt; os.path.splitext('/a/b.c/d')\n('/a/b.c/d', '')\n&gt;&gt;&gt; os.path.splitext('.bashrc')\n('.bashrc', '')\n"}, {"idx": "webquery-test-2", "doc": "What's the canonical way to check for type in Python?", "code": "isinstanceisinstanceisinstanceisinstanceif isinstance(o, str):\noooif type(o) is str:\nif issubclass(type(o), str):\noif isinstance(o, basestring):\nunicodeunicodeunicodeunicodeunicodeunicodeunicodeunicodeisinstanceisinstanceisinstanceisinstanceif isinstance(o, (str, unicode)):\n"}, {"idx": "webquery-test-3", "doc": "How do I get the row count of a Pandas DataFrame?", "code": "dflen(df.index)len(df.index)len(df.index)import numpy as np\nimport pandas as pd\nimport perfplot\n\nperfplot.save(\n    \"out.png\",\n    setup=lambda n: pd.DataFrame(np.arange(n * 3).reshape(n, 3)),\n    n_range=[2**k for k in range(25)],\n    kernels=[\n        lambda df: len(df.index),\n        lambda df: df.shape[0],\n        lambda df: df[df.columns[0]].count(),\n    ],\n    labels=[\"len(df.index)\", \"df.shape[0]\", \"df[df.columns[0]].count()\"],\n    xlabel=\"Number of rows\",\n)\n"}, {"idx": "webquery-test-4", "doc": "Selecting multiple columns in a Pandas dataframe", "code": "__getitem__df1 = df[['a', 'b']]\ndf1 = df.iloc[:, 0:2] # Remember that Python does not slice inclusive of the ending index.\n.copy()df1 = df.iloc[0, 0:2].copy() # To avoid the case where changing df1 also changes df\nilocilocilociloc{df.columns.get_loc(c): c for idx, c in enumerate(df.columns)}\niloc"}, {"idx": "webquery-test-5", "doc": "Use of *args and **kwargs", "code": "*****args&gt;&gt;&gt; def print_everything(*args):\n        for count, thing in enumerate(args):\n...         print( '{0}. {1}'.format(count, thing))\n...\n&gt;&gt;&gt; print_everything('apple', 'banana', 'cabbage')\n0. apple\n1. banana\n2. cabbage\n**kwargs&gt;&gt;&gt; def table_things(**kwargs):\n...     for name, value in kwargs.items():\n...         print( '{0} = {1}'.format(name, value))\n...\n&gt;&gt;&gt; table_things(apple = 'fruit', cabbage = 'vegetable')\ncabbage = vegetable\napple = fruit\n*args*argsdef table_things(titlestring, **kwargs)\n*args*args**&gt;&gt;&gt; def print_three_things(a, b, c):\n...     print( 'a = {0}, b = {1}, c = {2}'.format(a,b,c))\n...\n&gt;&gt;&gt; mylist = ['aardvark', 'baboon', 'cat']\n&gt;&gt;&gt; print_three_things(*mylist)\na = aardvark, b = baboon, c = cat\n*"}, {"idx": "webquery-test-6", "doc": "Use different Python version with virtualenv", "code": "--python--pythonvirtualenv --python=\"/usr/bin/python2.6\" \"/path/to/new/virtualenv/\"\n"}, {"idx": "webquery-test-7", "doc": "Why can't Python parse this JSON data?", "code": "[][][][][][][][]{\n    \"maps\": [\n        {\n            \"id\": \"blabla\",\n            \"iscategorical\": \"0\"\n        },\n        {\n            \"id\": \"blabla\",\n            \"iscategorical\": \"0\"\n        }\n    ],\n    \"masks\": {\n        \"id\": \"valore\"\n    },\n    \"om_points\": \"value\",\n    \"parameters\": {\n        \"id\": \"valore\"\n    }\n}\nimport json\nfrom pprint import pprint\n\nwith open('data.json') as f:\n    data = json.load(f)\n\npprint(data)\ndata[\"maps\"][0][\"id\"]\ndata[\"masks\"][\"id\"]\ndata[\"om_points\"]\n"}, {"idx": "webquery-test-1", "doc": "if/else in a list comprehension", "code": "[f(x) if x is not None else '' for x in xs]\n[f(x) if condition else g(x) for x in sequence]\nif[f(x) for x in sequence if condition]\nifif?:value = 123\nprint(value, 'is', 'even' if value % 2 == 0 else 'odd')\n"}, {"idx": "webquery-test-2", "doc": "How can I check for NaN values?", "code": "math.isnan&gt;&gt;&gt; import math\n&gt;&gt;&gt; x = float('nan')\n&gt;&gt;&gt; math.isnan(x)\nTrue\n"}, {"idx": "webquery-test-3", "doc": "UnicodeEncodeError: 'ascii' codec can't encode character u'\\xa0' in position 20: ordinal not in range(128)", "code": "str().encode()p.agent_info = u' '.join((agent_contact, agent_telno)).encode('utf-8').strip()\n"}, {"idx": "webquery-test-4", "doc": "Relative imports for the billionth time", "code": "python myfile.pypython myfile.py__name____main____main__moduleXmoduleXmoduleXmoduleXpackage/\n    __init__.py\n    subpackage1/\n        __init__.py\n        moduleX.py\n    moduleA.py\nmoduleXmoduleXmoduleXmoduleXmoduleXmoduleXmoduleXmoduleXmoduleXpackage/subpackage1package/subpackage1package/subpackage1package/subpackage1package/subpackage1pythonpythonfrom .. import foofrom .. import foofrom .. import foofrom .. import foofrom .. import foofrom .. import foo__main____main__moduleXmoduleX__main__moduleXmoduleXmoduleXmoduleXmoduleXmoduleXmoduleXmoduleXmoduleXmoduleXpackagepackagepackagepackagepackagepackagepackagepackagepackage"}, {"idx": "webquery-test-5", "doc": "How to change the order of DataFrame columns?", "code": "In [6]: df\nOut[6]:\n          0         1         2         3         4      mean\n0  0.445598  0.173835  0.343415  0.682252  0.582616  0.445543\n1  0.881592  0.696942  0.702232  0.696724  0.373551  0.670208\n2  0.662527  0.955193  0.131016  0.609548  0.804694  0.632596\n3  0.260919  0.783467  0.593433  0.033426  0.512019  0.436653\n4  0.131842  0.799367  0.182828  0.683330  0.019485  0.363371\n5  0.498784  0.873495  0.383811  0.699289  0.480447  0.587165\n6  0.388771  0.395757  0.745237  0.628406  0.784473  0.588529\n7  0.147986  0.459451  0.310961  0.706435  0.100914  0.345149\n8  0.394947  0.863494  0.585030  0.565944  0.356561  0.553195\n9  0.689260  0.865243  0.136481  0.386582  0.730399  0.561593\n\nIn [7]: cols = df.columns.tolist()\n\nIn [8]: cols\nOut[8]: [0L, 1L, 2L, 3L, 4L, 'mean']\ncolsIn [12]: cols = cols[-1:] + cols[:-1]\n\nIn [13]: cols\nOut[13]: ['mean', 0L, 1L, 2L, 3L, 4L]\nIn [16]: df = df[cols]  #    OR    df = df.ix[:, cols]\n\nIn [17]: df\nOut[17]:\n       mean         0         1         2         3         4\n0  0.445543  0.445598  0.173835  0.343415  0.682252  0.582616\n1  0.670208  0.881592  0.696942  0.702232  0.696724  0.373551\n2  0.632596  0.662527  0.955193  0.131016  0.609548  0.804694\n3  0.436653  0.260919  0.783467  0.593433  0.033426  0.512019\n4  0.363371  0.131842  0.799367  0.182828  0.683330  0.019485\n5  0.587165  0.498784  0.873495  0.383811  0.699289  0.480447\n6  0.588529  0.388771  0.395757  0.745237  0.628406  0.784473\n7  0.345149  0.147986  0.459451  0.310961  0.706435  0.100914\n8  0.553195  0.394947  0.863494  0.585030  0.565944  0.356561\n9  0.561593  0.689260  0.865243  0.136481  0.386582  0.730399\n"}, {"idx": "webquery-test-6", "doc": "How to put the legend outside the plot", "code": "bbox_to_anchorimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in xrange(5):\n    ax.plot(x, i * x, label='$y = %ix$' % i)\n\nax.legend()\n\nplt.show()\nbbox_to_anchorimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in xrange(5):\n    ax.plot(x, i * x, label='$y = %ix$' % i)\n\nax.legend(bbox_to_anchor=(1.1, 1.05))\n\nplt.show()\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in xrange(5):\n    line, = ax.plot(x, i * x, label='$y = %ix$'%i)\n\nax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.05),\n          ncol=3, fancybox=True, shadow=True)\nplt.show()\ntight_layout()tight_layout()import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in xrange(5):\n    ax.plot(x, i * x, label='$y = %ix$'%i)\n\n# Shrink current axis by 20%\nbox = ax.get_position()\nax.set_position([box.x0, box.y0, box.width * 0.8, box.height])\n\n# Put a legend to the right of the current axis\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n\nplt.show()\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\nax = plt.subplot(111)\n\nfor i in xrange(5):\n    line, = ax.plot(x, i * x, label='$y = %ix$'%i)\n\n# Shrink current axis's height by 10% on the bottom\nbox = ax.get_position()\nax.set_position([box.x0, box.y0 + box.height * 0.1,\n                 box.width, box.height * 0.9])\n\n# Put a legend below current axis\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),\n          fancybox=True, shadow=True, ncol=5)\n\nplt.show()\nplt.figlegend()"}, {"idx": "webquery-test-7", "doc": "Null object in Python", "code": "NoneNoneNoneif foo is None:\n    ...\n"}, {"idx": "webquery-test-8", "doc": "How do I check which version of Python is running my script?", "code": "sys.versionsys.version&gt;&gt;&gt; import sys\n&gt;&gt;&gt; print(sys.version)  # parentheses necessary in python 3.       \n2.5.2 (r252:60911, Jul 31 2008, 17:28:52) \n[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)]\nsys.version_infosys.version_info&gt;&gt;&gt; sys.version_info\n(2, 5, 2, 'final', 0)\n# or\n&gt;&gt;&gt; sys.hexversion\n34014192\nassert sys.version_info &gt;= (2, 5)\n0000"}, {"idx": "webquery-test-9", "doc": "Change column type in pandas", "code": "to_numeric()to_numeric()to_numeric()to_numeric()to_numeric()to_numeric()to_numeric()to_numeric()pandas.to_numeric()to_numeric()&gt;&gt;&gt; s = pd.Series([\"8\", 6, \"7.5\", 3, \"0.9\"]) # mixed string and numeric values\n&gt;&gt;&gt; s\n0      8\n1      6\n2    7.5\n3      3\n4    0.9\ndtype: object\n\n&gt;&gt;&gt; pd.to_numeric(s) # convert everything to float values\n0    8.0\n1    6.0\n2    7.5\n3    3.0\n4    0.9\ndtype: float64\n# convert Series\nmy_series = pd.to_numeric(my_series)\n\n# convert column \"a\" of a DataFrame\ndf[\"a\"] = pd.to_numeric(df[\"a\"])\napply()# convert all columns of DataFrame\ndf = df.apply(pd.to_numeric) # convert all columns of DataFrame\n\n# convert just columns \"a\" and \"b\"\ndf[[\"a\", \"b\"]] = df[[\"a\", \"b\"]].apply(pd.to_numeric)\nto_numeric()to_numeric()to_numeric()s&gt;&gt;&gt; s = pd.Series(['1', '2', '4.7', 'pandas', '10'])\n&gt;&gt;&gt; s\n0         1\n1         2\n2       4.7\n3    pandas\n4        10\ndtype: object\n&gt;&gt;&gt; pd.to_numeric(s) # or pd.to_numeric(s, errors='raise')\nValueError: Unable to parse string\nNaNNaN&gt;&gt;&gt; pd.to_numeric(s, errors='coerce')\n0     1.0\n1     2.0\n2     4.7\n3     NaN\n4    10.0\ndtype: float64\nerrors&gt;&gt;&gt; pd.to_numeric(s, errors='ignore')\n# the original Series is returned untouched\ndf.apply(pd.to_numeric, errors='ignore')\nto_numeric()to_numeric()to_numeric()float32float32to_numeric()to_numeric()to_numeric()to_numeric()to_numeric()to_numeric()&gt;&gt;&gt; s = pd.Series([1, 2, -7])\n&gt;&gt;&gt; s\n0    1\n1    2\n2   -7\ndtype: int64\n'integer'&gt;&gt;&gt; pd.to_numeric(s, downcast='integer')\n0    1\n1    2\n2   -7\ndtype: int8\n'float'&gt;&gt;&gt; pd.to_numeric(s, downcast='float')\n0    1.0\n1    2.0\n2   -7.0\ndtype: float32\nastype()astype()np.int16astype()# convert all DataFrame columns to the int64 dtype\ndf = df.astype(int)\n\n# convert column \"a\" to int64 dtype and \"b\" to complex type\ndf = df.astype({\"a\": int, \"b\": complex})\n\n# convert Series to float16 type\ns = s.astype(np.float16)\n\n# convert Series to Python strings\ns = s.astype(str)\n\n# convert Series to categorical type - see docs for more details\ns = s.astype('category')\nastype()astype()astype()errors='ignore'astype()&gt;&gt;&gt; s = pd.Series([1, 2, -7])\n&gt;&gt;&gt; s\n0    1\n1    2\n2   -7\ndtype: int64\n&gt;&gt;&gt; s.astype(np.uint8)\n0      1\n1      2\n2    249\ndtype: uint8\npd.to_numeric(s, downcast='unsigned')infer_objects()infer_objects()&gt;&gt;&gt; df = pd.DataFrame({'a': [7, 1, 5], 'b': ['3','2','1']}, dtype='object')\n&gt;&gt;&gt; df.dtypes\na    object\nb    object\ndtype: object\ninfer_objects()&gt;&gt;&gt; df = df.infer_objects()\n&gt;&gt;&gt; df.dtypes\na     int64\nb    object\ndtype: object\ndf.astype(int)convert_dtypes()convert_dtypes()convert_dtypes()Int64Int64Int64objectobject&gt;&gt;&gt; df.convert_dtypes().dtypes                                             \na     Int64\nb    string\ndtype: object\nInt64Int64stringinfer_objects=False&gt;&gt;&gt; df.convert_dtypes(infer_objects=False).dtypes                          \na    object\nb    string\ndtype: object\ninfer_dtype"}, {"idx": "webquery-test-10", "doc": "In Python, how do I determine if an object is iterable?", "code": "__iter____iter__iteriteritertry:\n   _ = (e for e in my_object)\nexcept TypeError:\n   print my_object, 'is not iterable'\ncollectionscollections__getitem__"}, {"idx": "webquery-test-11", "doc": "How do I trim whitespace from a string?", "code": ".strip()&gt;&gt;&gt; ' Hello '.strip()\n'Hello'\n&gt;&gt;&gt; ' Hello'.strip()\n'Hello'\n&gt;&gt;&gt; 'Bob has a cat'.strip()\n'Bob has a cat'\n&gt;&gt;&gt; '   Hello   '.strip()  # ALL consecutive spaces at both ends removed\n'Hello'\nstr.strip()str.strip()&gt;&gt;&gt; \"  Hello\\n  \".strip(\" \")\n'Hello\\n'\ndef strip_one_space(s):\n    if s.endswith(\" \"): s = s[:-1]\n    if s.startswith(\" \"): s = s[1:]\n    return s\n\n&gt;&gt;&gt; strip_one_space(\"   Hello \")\n'  Hello'\n"}, {"idx": "webquery-test-12", "doc": "How do I get the full path of the current file's directory?", "code": "__file____file____file__import pathlib\npathlib.Path(__file__).parent.resolve()\nimport pathlib\npathlib.Path().resolve()\nimport os\nos.path.dirname(os.path.abspath(__file__))\nimport os\nos.path.abspath(os.getcwd())\nfile__file__"}, {"idx": "webquery-test-13", "doc": "How do I terminate a script?", "code": "import sys\nsys.exit()\nsyssys.<strong>exit</strong>([<em>arg</em>])sys.<strong>exit</strong>([<em>arg</em>])sys.<strong>exit</strong>([<em>arg</em>])sys.<strong>exit</strong>([<em>arg</em>])sys.<strong>exit</strong>([<em>arg</em>])sys.<strong>exit</strong>([<em>arg</em>])os._exit(*errorcode*)os._exit(*errorcode*)"}, {"idx": "webquery-test-14", "doc": "How can I do a line break (line continuation) in Python?", "code": "a = dostuff(blahblah1, blahblah2, blahblah3, blahblah4, blahblah5, \n            blahblah6, blahblah7)\nif (a == True and\n    b == False):\nif a == True and \\\n   b == False:\na = ('1' + '2' + '3' +\n    '4' + '5')\na = '1' + '2' + '3' + \\\n    '4' + '5'\n"}, {"idx": "webquery-test-1", "doc": "Get a list from Pandas DataFrame column headers", "code": "list(my_dataframe.columns.values)\nlist(my_dataframe)\n"}, {"idx": "webquery-test-2", "doc": "How do I find the location of my Python site-packages directory?", "code": "sys.pathsys.pathsys.pathsys.pathsys.pathsys.pathsys.pathsys.pathsys.pathsys.pathsys.path&lt;package&gt;.__path__&lt;package&gt;.__path__&lt;package&gt;.__path__&lt;package&gt;.__path__&lt;package&gt;.__path__&lt;package&gt;.__path__"}, {"idx": "webquery-test-3", "doc": "Why do people write #!/usr/bin/env python on the first line of a Python script?", "code": "/usr/bin/env/usr/bin/env/usr/bin/env#!"}, {"idx": "webquery-test-4", "doc": "How to drop rows of Pandas DataFrame whose value in a certain column is NaN", "code": "df = df[df['EPS'].notna()]\n"}, {"idx": "webquery-test-5", "doc": "How to read a text file into a string variable and strip newlines?", "code": "with open('data.txt', 'r') as file:\n    data = file.read().replace('\\n', '')\nwith open('data.txt', 'r') as file:\n    data = file.read().rstrip()\n"}, {"idx": "webquery-test-6", "doc": "How to add a new column to an existing DataFrame?", "code": "assigndf1 = df1.assign(e=pd.Series(np.random.randn(sLength)).values)\nSettingWithCopyWarning&gt;&gt;&gt; sLength = len(df1['a'])\n&gt;&gt;&gt; df1\n          a         b         c         d\n6 -0.269221 -0.026476  0.997517  1.294385\n8  0.917438  0.847941  0.034235 -0.448948\n\n&gt;&gt;&gt; df1['e'] = pd.Series(np.random.randn(sLength), index=df1.index)\n&gt;&gt;&gt; df1\n          a         b         c         d         e\n6 -0.269221 -0.026476  0.997517  1.294385  1.757167\n8  0.917438  0.847941  0.034235 -0.448948  2.228131\n\n&gt;&gt;&gt; pd.version.short_version\n'0.16.1'\nSettingWithCopyWarning&gt;&gt;&gt; df1.loc[:,'f'] = pd.Series(np.random.randn(sLength), index=df1.index)\n&gt;&gt;&gt; df1\n          a         b         c         d         e         f\n6 -0.269221 -0.026476  0.997517  1.294385  1.757167 -0.050927\n8  0.917438  0.847941  0.034235 -0.448948  2.228131  0.006109\n&gt;&gt;&gt; \ndf1['e'] = pd.Series(np.random.randn(sLength), index=df1.index)\n"}, {"idx": "webquery-test-7", "doc": "How to get line count of a large file cheaply in Python?", "code": "num_lines = sum(1 for line in open('myfile.txt'))\n"}, {"idx": "webquery-test-8", "doc": "How to deal with SettingWithCopyWarning in Pandas", "code": "SettingWithCopyWarningdf[df['A'] &gt; 2]['B'] = new_val  # new_val not set in df\ndf.loc[df['A'] &gt; 2, 'B'] = new_val\ndf = df[df['A'] &gt; 2]\ndf['B'] = new_val\nimport pandas as pd\npd.options.mode.chained_assignment = None  # default='warn'\n"}, {"idx": "webquery-test-9", "doc": "How do I get file creation and modification date/times?", "code": "os.path.getmtime(<i>path</i>)os.path.getmtime(<i>path</i>)ctimectimectimectimectimectimectimectimectimectimectimectimectimectimectimectimeimport os\nimport platform\n\ndef creation_date(path_to_file):\n    \"\"\"\n    Try to get the date that a file was created, falling back to when it was\n    last modified if that isn't possible.\n    See http://stackoverflow.com/a/39501288/1709587 for explanation.\n    \"\"\"\n    if platform.system() == 'Windows':\n        return os.path.getctime(path_to_file)\n    else:\n        stat = os.stat(path_to_file)\n        try:\n            return stat.st_birthtime\n        except AttributeError:\n            # We're probably on Linux. No easy way to get creation dates here,\n            # so we'll settle for when its content was last modified.\n            return stat.st_mtime\n"}, {"idx": "webquery-test-1", "doc": "Alternatives for returning multiple values from a Python function", "code": "&gt;&gt;&gt; import collections\n&gt;&gt;&gt; Point = collections.namedtuple('Point', ['x', 'y'])\n&gt;&gt;&gt; p = Point(1, y=2)\n&gt;&gt;&gt; p.x, p.y\n1 2\n&gt;&gt;&gt; p[0], p[1]\n1 2\ntypingtypingtypingclass Employee(NamedTuple):  # inherit from typing.NamedTuple\n    name: str\n    id: int = 3  # default value\n\nemployee = Employee('Guido')\nassert employee.id == 3\n"}, {"idx": "webquery-test-2", "doc": "Count the number of occurrences of a character in a string", "code": "str.count(sub[, start[, end]])str.count(sub[, start[, end]])str.count(sub[, start[, end]])str.count(sub[, start[, end]])str.count(sub[, start[, end]])&gt;&gt;&gt; sentence = 'Mary had a little lamb'\n&gt;&gt;&gt; sentence.count('a')\n4\n"}, {"idx": "webquery-test-3", "doc": "How to overcome \"datetime.datetime not JSON serializable\"?", "code": "json.dumps(my_dictionary, indent=4, sort_keys=True, default=str)\ndefaultdefault"}, {"idx": "webquery-test-4", "doc": "Extract file name from path, no matter what the os/path format", "code": "import os\nprint(os.path.basename(your_path))\nos.path.basename()os.path.basename()Python 3.8.2 (default, Mar 13 2020, 10:14:16)\n[GCC 9.3.0] on Linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; filepath = \"C:\\\\my\\\\path\\\\to\\\\file.txt\" # A Windows style file path.\n&gt;&gt;&gt; os.path.basename(filepath)\n'C:\\\\my\\\\path\\\\to\\\\file.txt'\n"}, {"idx": "webquery-test-5", "doc": "Use a list of values to select rows from a Pandas dataframe", "code": "isinIn [1]: df = pd.DataFrame({'A': [5,6,3,4], 'B': [1,2,3,5]})\n\nIn [2]: df\nOut[2]:\n   A  B\n0  5  1\n1  6  2\n2  3  3\n3  4  5\n\nIn [3]: df[df['A'].isin([3, 6])]\nOut[3]:\n   A  B\n1  6  2\n2  3  3\n~In [4]: df[~df['A'].isin([3, 6])]\nOut[4]:\n   A  B\n0  5  1\n3  4  5\n"}, {"idx": "webquery-test-6", "doc": "How do I iterate through two lists in parallel?", "code": "for f, b in zip(foo, bar):\n    print(f, b)\nzipzipzipzipzipzipzipzipzipzipzipzipimport itertools\nfor f,b in itertools.izip(foo,bar):\n    print(f,b)\nfor f,b in itertools.izip_longest(foo,bar):\n    print(f,b)\nizipizipizipizipizipizipizipizipizipizipzipzipfor num, cheese, color in zip([1,2,3], ['manchego', 'stilton', 'brie'], \n                              ['red', 'blue', 'green']):\n    print('{} {} {}'.format(num, color, cheese))\n1 red manchego\n2 blue stilton\n3 green brie\n"}, {"idx": "webquery-test-7", "doc": "Get the data received in a Flask request", "code": "requestrequestrequestrequest.datarequest.argsrequest.argsrequest.argsrequest.argsrequest.argsrequest.argsrequest.argsrequest.argsrequest.argsrequest.argsrequest.argsrequest.argsMultiDictMultiDictrequest.form['name']request.form['name']request.form['name']request.form['name']request.form['name']request.form['name']"}, {"idx": "webquery-test-8", "doc": "Remove all whitespace in a string", "code": "str.strip()&gt;&gt;&gt; \"  hello  apple  \".strip()\n'hello  apple'\nstr.replace()str.replace()&gt;&gt;&gt; \"  hello  apple  \".replace(\" \", \"\")\n'helloapple'\nstr.split()str.split()&gt;&gt;&gt; \" \".join(\"  hello  apple  \".split())\n'hello apple'\n"}, {"idx": "webquery-test-9", "doc": "How can I represent an 'Enum' in Python?", "code": "enum34enum34enum34enum34enum34enum34enumfrom enum import Enum     # for enum34, or the stdlib version\n# from aenum import Enum  # for the aenum version\nAnimal = Enum('Animal', 'ant bee cat dog')\n\nAnimal.ant  # returns &lt;Animal.ant: 1&gt;\nAnimal['ant']  # returns &lt;Animal.ant: 1&gt; (string lookup)\nAnimal.ant.name  # returns 'ant' (inverse lookup)\nclass Animal(Enum):\n    ant = 1\n    bee = 2\n    cat = 3\n    dog = 4\ndef enum(**enums):\n    return type('Enum', (), enums)\n&gt;&gt;&gt; Numbers = enum(ONE=1, TWO=2, THREE='three')\n&gt;&gt;&gt; Numbers.ONE\n1\n&gt;&gt;&gt; Numbers.TWO\n2\n&gt;&gt;&gt; Numbers.THREE\n'three'\ndef enum(*sequential, **named):\n    enums = dict(zip(sequential, range(len(sequential))), **named)\n    return type('Enum', (), enums)\n&gt;&gt;&gt; Numbers = enum('ZERO', 'ONE', 'TWO')\n&gt;&gt;&gt; Numbers.ZERO\n0\n&gt;&gt;&gt; Numbers.ONE\n1\ndef enum(*sequential, **named):\n    enums = dict(zip(sequential, range(len(sequential))), **named)\n    reverse = dict((value, key) for key, value in enums.iteritems())\n    enums['reverse_mapping'] = reverse\n    return type('Enum', (), enums)\nKeyError&gt;&gt;&gt; Numbers.reverse_mapping['three']\n'THREE'\ntyping.Literalfrom typing import Literal #python &gt;=3.8\nfrom typing_extensions import Literal #python 2.7, 3.4-3.7\n\n\nAnimal = Literal['ant', 'bee', 'cat', 'dog']\n\ndef hello_animal(animal: Animal):\n    print(f\"hello {animal}\")\n\nhello_animal('rock') # error\nhello_animal('bee') # passes\n\n"}, {"idx": "webquery-test-10", "doc": "Is there a simple way to delete a list element by value?", "code": "list.remove&gt;&gt;&gt; xs = ['a', 'b', 'c', 'd']\n&gt;&gt;&gt; xs.remove('b')\n&gt;&gt;&gt; print(xs)\n['a', 'c', 'd']\n&gt;&gt;&gt; xs = ['a', 'b', 'c', 'd', 'b', 'b', 'b', 'b']\n&gt;&gt;&gt; xs = [x for x in xs if x != 'b']\n&gt;&gt;&gt; print(xs)\n['a', 'c', 'd']\n"}, {"idx": "webquery-test-11", "doc": "What are the most common Python docstring formats?", "code": "Epytext\"\"\"\nThis is a javadoc style.\n\n@param param1: this is a first param\n@param param2: this is a second param\n@return: this is a description of what is returned\n@raise keyError: raises an exception\n\"\"\"\n\"\"\"\nThis is a reST style.\n\n:param param1: this is a first param\n:param param2: this is a second param\n:returns: this is a description of what is returned\n:raises keyError: raises an exception\n\"\"\"\n\"\"\"\nThis is an example of Google style.\n\nArgs:\n    param1: This is the first param.\n    param2: This is a second param.\n\nReturns:\n    This is a description of what is returned.\n\nRaises:\n    KeyError: Raises an exception.\n\"\"\"\n\"\"\"\nMy numpydoc description of a kind\nof very exhautive numpydoc format docstring.\n\nParameters\n----------\nfirst : array_like\n    the 1st param name `first`\nsecond :\n    the 2nd param\nthird : {'value', 'other'}, optional\n    the 3rd param, by default 'value'\n\nReturns\n-------\nstring\n    a value in a string\n\nRaises\n------\nKeyError\n    when a key error\nOtherError\n    when an other error\n\"\"\"\n"}, {"idx": "webquery-test-1", "doc": "How to sort a list of objects based on an attribute of the objects?", "code": "# To sort the list in place...\nut.sort(key=lambda x: x.count, reverse=True)\n\n# To return a new list, use the sorted() built-in function...\nnewlist = sorted(ut, key=lambda x: x.count, reverse=True)\n"}, {"idx": "webquery-test-2", "doc": "Maximum and Minimum values for ints", "code": "intsys.maxsizesys.maxsize * 2 + 1sys.maxsize * 2 + 1intint&gt;&gt;&gt; sys.maxint\n9223372036854775807\n-sys.maxint - 1"}, {"idx": "webquery-test-3", "doc": "What is the difference between old style and new style classes in Python?", "code": "xxxxxxxxx"}, {"idx": "webquery-test-4", "doc": "How to convert list to string", "code": "''.joinxs = ['1', '2', '3']\ns = ''.join(xs)\nxs = [1, 2, 3]\ns = ''.join(str(x) for x in xs)\n"}, {"idx": "webquery-test-5", "doc": "Pretty-print an entire Pandas Series / DataFrame", "code": "option_contextwith pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also\n    print(df)\ndisplay(df)display(df)"}, {"idx": "webquery-test-6", "doc": "How to subtract a day from a date?", "code": "timedeltafrom datetime import datetime, timedelta\n    \nd = datetime.today() - timedelta(days=days_to_subtract)\n"}, {"idx": "webquery-test-7", "doc": "How do I check file size in Python?", "code": "os.path.getsize&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.path.getsize(\"/path/to/file.mp3\")\n2071611\n"}, {"idx": "webquery-test-8", "doc": "How to create a GUID/UUID in Python", "code": "uuid1()uuid1()uuid1()uuid1()uuid1()uuid1()uuid1()uuid1()&gt;&gt;&gt; import uuid\n\n&gt;&gt;&gt; # make a random UUID\n&gt;&gt;&gt; uuid.uuid4()\nUUID('bd65600d-8669-4903-8a14-af88203add38')\n\n&gt;&gt;&gt; # Convert a UUID to a string of hex digits in standard form\n&gt;&gt;&gt; str(uuid.uuid4())\n'f50ec0b7-f960-400d-91f0-c42a6d44e3d0'\n\n&gt;&gt;&gt; # Convert a UUID to a 32-character hexadecimal string\n&gt;&gt;&gt; uuid.uuid4().hex\n'9fe2c4e93f654fdbb24c02b15259716c'\n"}, {"idx": "webquery-test-9", "doc": "How to emulate a do-while loop?", "code": "while True:\n  stuff()\n  if fail_condition:\n    break\nstuff()\nwhile not fail_condition:\n  stuff()\nfor i in l:\n  print i\nprint \"done\"\nfor s in l: \n  while True: \n    stuff() \n    # use a \"break\" instead of s = i.next()\nfor s in some_list:\n  while True:\n    if state is STATE_CODE:\n      if \"//\" in s:\n        tokens.add( TOKEN_COMMENT, s.split( \"//\" )[1] )\n        state = STATE_COMMENT\n      else :\n        tokens.add( TOKEN_CODE, s )\n    if state is STATE_COMMENT:\n      if \"//\" in s:\n        tokens.append( TOKEN_COMMENT, s.split( \"//\" )[1] )\n        break # get next s\n      else:\n        state = STATE_CODE\n        # re-evaluate same line\n        # continues automatically\n"}, {"idx": "webquery-test-10", "doc": "How to concatenate (join) items in a list to a single string", "code": "str.join&gt;&gt;&gt; words = ['this', 'is', 'a', 'sentence']\n&gt;&gt;&gt; '-'.join(words)\n'this-is-a-sentence'\n&gt;&gt;&gt; ' '.join(words)\n'this is a sentence'\n"}, {"idx": "webquery-test-11", "doc": "What IDE to use for Python?", "code": "                         Bracket Matching -.  .- Line Numbering\n                          Smart Indent -.  |  |  .- UML Editing / Viewing\n         Source Control Integration -.  |  |  |  |  .- Code Folding\n                    Error Markup -.  |  |  |  |  |  |  .- Code Templates\n  Integrated Python Debugging -.  |  |  |  |  |  |  |  |  .- Unit Testing\n    Multi-Language Support -.  |  |  |  |  |  |  |  |  |  |  .- GUI Designer (Qt, Eric, etc)\n   Auto Code Completion -.  |  |  |  |  |  |  |  |  |  |  |  |  .- Integrated DB Support\n     Commercial/Free -.  |  |  |  |  |  |  |  |  |  |  |  |  |  |  .- Refactoring\n   Cross Platform -.  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     \n                  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\nAtom              |Y |F |Y |Y*|Y |Y |Y |Y |Y |Y |  |Y |Y |  |  |  |  |*many plugins\nEditra            |Y |F |Y |Y |  |  |Y |Y |Y |Y |  |Y |  |  |  |  |  |\nEmacs             |Y |F |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |  |  |  |\nEric Ide          |Y |F |Y |  |Y |Y |  |Y |  |Y |  |Y |  |Y |  |  |  |\nGeany             |Y |F |Y*|Y |  |  |  |Y |Y |Y |  |Y |  |  |  |  |  |*very limited\nGedit             |Y |F |Y\u00b9|Y |  |  |  |Y |Y |Y |  |  |Y\u00b2|  |  |  |  |\u00b9with plugin; \u00b2sort of\nIdle              |Y |F |Y |  |Y |  |  |Y |Y |  |  |  |  |  |  |  |  |\nIntelliJ          |Y |CF|Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |\nJEdit             |Y |F |  |Y |  |  |  |  |Y |Y |  |Y |  |  |  |  |  |\nKDevelop          |Y |F |Y*|Y |  |  |Y |Y |Y |Y |  |Y |  |  |  |  |  |*no type inference\nKomodo            |Y |CF|Y |Y |Y |Y |Y |Y |Y |Y |  |Y |Y |Y |  |Y |  |\nNetBeans*         |Y |F |Y |Y |Y |  |Y |Y |Y |Y |Y |Y |Y |Y |  |  |Y |*pre-v7.0\nNotepad++         |W |F |Y |Y |  |Y*|Y*|Y*|Y |Y |  |Y |Y*|  |  |  |  |*with plugin\nPfaide            |W |C |Y |Y |  |  |  |Y |Y |Y |  |Y |Y |  |  |  |  |\nPIDA              |LW|F |Y |Y |  |  |  |Y |Y |Y |  |Y |  |  |  |  |  |VIM based\nPTVS              |W |F |Y |Y |Y |Y |Y |Y |Y |Y |  |Y |  |  |Y*|  |Y |*WPF bsed\nPyCharm           |Y |CF|Y |Y*|Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |*JavaScript\nPyDev (Eclipse)   |Y |F |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |  |  |  |\nPyScripter        |W |F |Y |  |Y |Y |  |Y |Y |Y |  |Y |Y |Y |  |  |  |\nPythonWin         |W |F |Y |  |Y |  |  |Y |Y |  |  |Y |  |  |  |  |  |\nSciTE             |Y |F\u00b9|  |Y |  |Y |  |Y |Y |Y |  |Y |Y |  |  |  |  |\u00b9Mac version is\nScriptDev         |W |C |Y |Y |Y |Y |  |Y |Y |Y |  |Y |Y |  |  |  |  |    commercial\nSpyder            |Y |F |Y |  |Y |Y |  |Y |Y |Y |  |  |  |  |  |  |  |\nSublime Text      |Y |CF|Y |Y |  |Y |Y |Y |Y |Y |  |Y |Y |Y*|  |  |  |extensible w/Python,\nTextMate          |M |F |  |Y |  |  |Y |Y |Y |Y |  |Y |Y |  |  |  |  |    *PythonTestRunner\nUliPad            |Y |F |Y |Y |Y |  |  |Y |Y |  |  |  |Y |Y |  |  |  |\nVim               |Y |F |Y |Y |Y |Y |Y |Y |Y |Y |  |Y |Y |Y |  |  |  |\nVisual Studio     |W |CF|Y |Y |Y |Y |Y |Y |Y |Y |? |Y |? |? |Y |? |Y |\nVisual Studio Code|Y |F |Y |Y |Y |Y |Y |Y |Y |Y |? |Y |? |? |? |? |Y |uses plugins\nWingIde           |Y |C |Y |Y*|Y |Y |Y |Y |Y |Y |  |Y |Y |Y |  |  |  |*support for C\nZeus              |W |C |  |  |  |  |Y |Y |Y |Y |  |Y |Y |  |  |  |  |\n                  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n   Cross Platform -'  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     \n     Commercial/Free -'  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '- Refactoring\n   Auto Code Completion -'  |  |  |  |  |  |  |  |  |  |  |  |  '- Integrated DB Support\n    Multi-Language Support -'  |  |  |  |  |  |  |  |  |  |  '- GUI Designer (Qt, Eric, etc)\n  Integrated Python Debugging -'  |  |  |  |  |  |  |  |  '- Unit Testing\n                    Error Markup -'  |  |  |  |  |  |  '- Code Templates\n         Source Control Integration -'  |  |  |  |  '- Code Folding\n                          Smart Indent -'  |  |  '- UML Editing / Viewing\n                         Bracket Matching -'  '- Line Numbering\n L  - Linux\n W  - Windows\n M  - Mac\n C  - Commercial\n F  - Free\n CF - Commercial with Free limited edition\n ?  - To be confirmed\n"}, {"idx": "webquery-test-12", "doc": "Python's equivalent of && (logical-and) in an if-statement", "code": "andand"}, {"idx": "webquery-test-1", "doc": "Writing a pandas DataFrame to CSV file", "code": "sepsepdf.to_csv(file_name, sep='\\t')\nencodingdf.to_csv(file_name, sep='\\t', encoding='utf-8')\n"}, {"idx": "webquery-test-2", "doc": "How to retrieve a module's path?", "code": "import a_module\nprint(a_module.__file__)\nimport os\npath = os.path.abspath(a_module.__file__)\npath = os.path.dirname(a_module.__file__)\n"}, {"idx": "webquery-test-3", "doc": "How to get a function name as a string?", "code": "my_function.__name__\n__name____name__&gt;&gt;&gt; import time\n&gt;&gt;&gt; time.time.func_name\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in ?\nAttributeError: 'builtin_function_or_method' object has no attribute 'func_name'\n&gt;&gt;&gt; time.time.__name__ \n'time'\n__name__"}, {"idx": "webquery-test-4", "doc": "How can I make a Python script standalone executable to run without ANY dependency?", "code": "pip install pyinstaller\npip install pyinstaller\npip install pyinstaller\npip install pyinstaller\npip install pyinstaller\npip install pyinstaller\n"}, {"idx": "webquery-test-5", "doc": "Peak detection in a 2D array", "code": "import numpy as np\nfrom scipy.ndimage.filters import maximum_filter\nfrom scipy.ndimage.morphology import generate_binary_structure, binary_erosion\nimport matplotlib.pyplot as pp\n\n#for some reason I had to reshape. Numpy ignored the shape header.\npaws_data = np.loadtxt(\"paws.txt\").reshape(4,11,14)\n\n#getting a list of images\npaws = [p.squeeze() for p in np.vsplit(paws_data,4)]\n\n\ndef detect_peaks(image):\n    \"\"\"\n    Takes an image and detect the peaks usingthe local maximum filter.\n    Returns a boolean mask of the peaks (i.e. 1 when\n    the pixel's value is the neighborhood maximum, 0 otherwise)\n    \"\"\"\n\n    # define an 8-connected neighborhood\n    neighborhood = generate_binary_structure(2,2)\n\n    #apply the local maximum filter; all pixel of maximal value \n    #in their neighborhood are set to 1\n    local_max = maximum_filter(image, footprint=neighborhood)==image\n    #local_max is a mask that contains the peaks we are \n    #looking for, but also the background.\n    #In order to isolate the peaks we must remove the background from the mask.\n\n    #we create the mask of the background\n    background = (image==0)\n\n    #a little technicality: we must erode the background in order to \n    #successfully subtract it form local_max, otherwise a line will \n    #appear along the background border (artifact of the local maximum filter)\n    eroded_background = binary_erosion(background, structure=neighborhood, border_value=1)\n\n    #we obtain the final mask, containing only peaks, \n    #by removing the background from the local_max mask (xor operation)\n    detected_peaks = local_max ^ eroded_background\n\n    return detected_peaks\n\n\n#applying the detection and plotting results\nfor i, paw in enumerate(paws):\n    detected_peaks = detect_peaks(paw)\n    pp.subplot(4,2,(2*i+1))\n    pp.imshow(paw)\n    pp.subplot(4,2,(2*i+2) )\n    pp.imshow(detected_peaks)\n\npp.show()\nscipy.ndimage.measurements.label"}, {"idx": "webquery-test-6", "doc": "What is __pycache__?", "code": "__pycache____pycache____pycache____pycache__gitgitpython -B foo.py\nPYTHONDONTWRITEBYTECODE"}, {"idx": "webquery-test-7", "doc": "Parsing boolean values with argparse", "code": "command --feature\ncommand --no-feature\nargparseparser.add_argument('--feature', action=argparse.BooleanOptionalAction)\nparser.add_argument('--feature', action='store_true')\nparser.add_argument('--no-feature', dest='feature', action='store_false')\nparser.set_defaults(feature=True)\n--arg &lt;True|False&gt;--arg &lt;True|False&gt;def t_or_f(arg):\n    ua = str(arg).upper()\n    if 'TRUE'.startswith(ua):\n       return True\n    elif 'FALSE'.startswith(ua):\n       return False\n    else:\n       pass  #error condition maybe?\n"}, {"idx": "webquery-test-1", "doc": "Reverse / invert a dictionary mapping", "code": "inv_map = {v: k for k, v in my_map.items()}\ninv_map = {v: k for k, v in my_map.iteritems()}\n"}, {"idx": "webquery-test-2", "doc": "How to make IPython notebook matplotlib plot inline", "code": "%matplotlib inline%matplotlib inline\n\nimport matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\nc.IPKernelApp.matplotlib=&lt;CaselessStrEnum&gt;\n  Default: None\n  Choices: ['auto', 'gtk', 'gtk3', 'inline', 'nbagg', 'notebook', 'osx', 'qt', 'qt4', 'qt5', 'tk', 'wx']\n  Configure matplotlib for interactive use with the default matplotlib backend.\n"}, {"idx": "webquery-test-3", "doc": "How do I convert a datetime to date?", "code": "date()datetime.datetime.now().date()\n"}, {"idx": "webquery-test-4", "doc": "How do I expand the output display to see more columns of a Pandas DataFrame?", "code": "pd.options.display.width = 0pandas.set_printoptions(...)pandas.set_printoptions(...)pandas.set_printoptions(...)import pandas as pd\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\nset_optionprint df.describe().to_string()pandas.util.terminal.get_terminal_size()pandas.util.terminal.get_terminal_size()pandas.set_printoptions(max_rows=200, max_columns=10)"}, {"idx": "webquery-test-5", "doc": "Why does Python code run faster in a function?", "code": "  2           0 SETUP_LOOP              20 (to 23)\n              3 LOAD_GLOBAL              0 (xrange)\n              6 LOAD_CONST               3 (100000000)\n              9 CALL_FUNCTION            1\n             12 GET_ITER            \n        &gt;&gt;   13 FOR_ITER                 6 (to 22)\n             16 STORE_FAST               0 (i)\n\n  3          19 JUMP_ABSOLUTE           13\n        &gt;&gt;   22 POP_BLOCK           \n        &gt;&gt;   23 LOAD_CONST               0 (None)\n             26 RETURN_VALUE        \n  1           0 SETUP_LOOP              20 (to 23)\n              3 LOAD_NAME                0 (xrange)\n              6 LOAD_CONST               3 (100000000)\n              9 CALL_FUNCTION            1\n             12 GET_ITER            \n        &gt;&gt;   13 FOR_ITER                 6 (to 22)\n             16 STORE_NAME               1 (i)\n\n  2          19 JUMP_ABSOLUTE           13\n        &gt;&gt;   22 POP_BLOCK           \n        &gt;&gt;   23 LOAD_CONST               2 (None)\n             26 RETURN_VALUE        \nSTORE_FASTSTORE_FASTSTORE_FASTdisdis"}, {"idx": "webquery-test-6", "doc": "What is a clean \"pythonic\" way to implement multiple constructors?", "code": "Noneclass Cheese():\n    def __init__(self, num_holes = None):\n        if num_holes is None:\n            ...\nclass Cheese():\n    def __init__(self, *args, **kwargs):\n        #args -- tuple of anonymous arguments\n        #kwargs -- dictionary of named arguments\n        self.num_holes = kwargs.get('num_holes',random_holes())\n*args*argsdef f(*args, **kwargs):\n   print 'args: ', args, ' kwargs: ', kwargs\n\n&gt;&gt;&gt; f('a')\nargs:  ('a',)  kwargs:  {}\n&gt;&gt;&gt; f(ar='a')\nargs:  ()  kwargs:  {'ar': 'a'}\n&gt;&gt;&gt; f(1,2,param=3)\nargs:  (1, 2)  kwargs:  {'param': 3}\n"}, {"idx": "webquery-test-7", "doc": "How do I do a not equal in Django queryset filtering?", "code": "~from myapp.models import Entry\nfrom django.db.models import Q\n\nEntry.objects.filter(~Q(id=3))\n3[&lt;Entry: Entry object&gt;, &lt;Entry: Entry object&gt;, &lt;Entry: Entry object&gt;, ...]\n"}, {"idx": "webquery-test-8", "doc": "Automatically create requirements.txt", "code": "pip install pipreqs\n\npipreqs /path/to/project\npip freeze"}, {"idx": "webquery-test-9", "doc": "Deleting DataFrame row in Pandas based on column value", "code": "df = df[df.line_race != 0]\n"}, {"idx": "webquery-test-10", "doc": "List comprehension vs map", "code": "map$ python -m timeit -s'xs=range(10)' 'map(hex, xs)'\n100000 loops, best of 3: 4.86 usec per loop\n$ python -m timeit -s'xs=range(10)' '[hex(x) for x in xs]'\n100000 loops, best of 3: 5.58 usec per loop\n$ python -m timeit -s'xs=range(10)' 'map(lambda x: x+2, xs)'\n100000 loops, best of 3: 4.24 usec per loop\n$ python -m timeit -s'xs=range(10)' '[x+2 for x in xs]'\n100000 loops, best of 3: 2.32 usec per loop\n"}, {"idx": "webquery-test-1", "doc": "What is __future__ in Python used for and how/when to use it, and how it works", "code": "__future__from __future__ import with_statementfrom __future__ import with_statementfrom __future__ import with_statementfrom __future__ import division\nprint 8/7  # prints 1.1428571428571428\nprint 8//7 # prints 1\n__future____future____future__/////printprint&gt;&gt;&gt; print\n\n&gt;&gt;&gt; from __future__ import print_function\n&gt;&gt;&gt; print\n&lt;built-in function print&gt;\n&gt;&gt;&gt;\n"}, {"idx": "webquery-test-2", "doc": "Combine two columns of text in pandas dataframe", "code": "df[\"period\"] = df[\"Year\"] + df[\"quarter\"]\ndf[\"period\"] = df[\"Year\"].astype(str) + df[\"quarter\"]\naggdf['period'] = df[['Year', 'quarter', ...]].agg('-'.join, axis=1)\n"}, {"idx": "webquery-test-3", "doc": "not None test in Python", "code": "if val is not None:\n    # ...\nNoneNoneNoneNoneif not (val is None):\n    # ...\n"}, {"idx": "webquery-test-4", "doc": "How can I open multiple files using \"with open\" in Python?", "code": "with open('a', 'w') as a, open('b', 'w') as b:\n    do_something()\ncontextlib.nested()contextlib.ExitStackwith ExitStack() as stack:\n    files = [stack.enter_context(open(fname)) for fname in filenames]\n    # Do something with \"files\"\nfor fname in filenames:\n    with open(fname) as f:\n        # Process f\n"}, {"idx": "webquery-test-5", "doc": "Getting a list of all subdirectories in the current directory", "code": "os.walkos.walk(directory)\n[x[0] for x in os.walk(directory)]\nnext(os.walk('.'))[1]\nos.listdiros.listdir"}, {"idx": "webquery-test-6", "doc": "How are iloc and loc different?", "code": "loclocs&gt;&gt;&gt; s = pd.Series(list(\"abcdef\"), index=[49, 48, 47, 0, 1, 2]) \n49    a\n48    b\n47    c\n0     d\n1     e\n2     f\n\n&gt;&gt;&gt; s.loc[0]    # value at index label 0\n'd'\n\n&gt;&gt;&gt; s.iloc[0]   # value at index location 0\n'a'\n\n&gt;&gt;&gt; s.loc[0:1]  # rows at index labels between 0 and 1 (inclusive)\n0    d\n1    e\n\n&gt;&gt;&gt; s.iloc[0:1] # rows at index location between 0 and 1 (exclusive)\n49    a\ns.locs.locs.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]s.loc[&lt;object&gt;]loc&gt;&gt;&gt; s2 = pd.Series(s.index, index=s.values)\n&gt;&gt;&gt; s2\na    49\nb    48\nc    47\nd     0\ne     1\nf     2\nlocloc&gt;&gt;&gt; s2.loc['c':'e']  # all rows lying between 'c' and 'e' (inclusive)\nc    47\nd     0\ne     1\n&gt;&gt;&gt; s3 = pd.Series(list('abcde'), pd.date_range('now', periods=5, freq='M')) \n&gt;&gt;&gt; s3\n2021-01-31 16:41:31.879768    a\n2021-02-28 16:41:31.879768    b\n2021-03-31 16:41:31.879768    c\n2021-04-30 16:41:31.879768    d\n2021-05-31 16:41:31.879768    e\n&gt;&gt;&gt; s3.loc['2021-03':'2021-04']\n2021-03-31 17:04:30.742316    c\n2021-04-30 17:04:30.742316    d\nlocloc&gt;&gt;&gt; import numpy as np \n&gt;&gt;&gt; df = pd.DataFrame(np.arange(25).reshape(5, 5),  \n                      index=list('abcde'), \n                      columns=['x','y','z', 8, 9])\n&gt;&gt;&gt; df\n    x   y   z   8   9\na   0   1   2   3   4\nb   5   6   7   8   9\nc  10  11  12  13  14\nd  15  16  17  18  19\ne  20  21  22  23  24\n&gt;&gt;&gt; df.loc['c': , :'z']  # rows 'c' and onwards AND columns up to 'z'\n    x   y   z\nc  10  11  12\nd  15  16  17\ne  20  21  22\n\n&gt;&gt;&gt; df.iloc[:, 3]        # all rows, but only the column at index location 3\na     3\nb     8\nc    13\nd    18\ne    23\nlocloc&gt;&gt;&gt; import numpy as np \n&gt;&gt;&gt; df = pd.DataFrame(np.arange(25).reshape(5, 5),  \n                      index=list('abcde'), \n                      columns=['x','y','z', 8, 9])\n&gt;&gt;&gt; df\n    x   y   z   8   9\na   0   1   2   3   4\nb   5   6   7   8   9\nc  10  11  12  13  14\nd  15  16  17  18  19\ne  20  21  22  23  24\niloc&gt;&gt;&gt; df.iloc[:df.index.get_loc('c') + 1, :4]\n    x   y   z   8\na   0   1   2   3\nb   5   6   7   8\nc  10  11  12  13\nget_loc()get_loc()"}, {"idx": "webquery-test-7", "doc": "How can I iterate over files in a given directory?", "code": "osososimport os\n\ndirectory = os.fsencode(directory_in_str)\n    \nfor file in os.listdir(directory):\n     filename = os.fsdecode(file)\n     if filename.endswith(\".asm\") or filename.endswith(\".py\"): \n         # print(os.path.join(directory, filename))\n         continue\n     else:\n         continue\npathlibfrom pathlib import Path\n\npathlist = Path(directory_in_str).glob('**/*.asm')\nfor path in pathlist:\n     # because path is object not string\n     path_in_str = str(path)\n     # print(path_in_str)\nrglobrglobrglobrglobrglobfrom pathlib import Path\n\npathlist = Path(directory_in_str).rglob('*.asm')\nfor path in pathlist:\n     # because path is object not string\n     path_in_str = str(path)\n     # print(path_in_str)\nimport os\n\nfor filename in os.listdir(\"/path/to/dir/\"):\n    if filename.endswith(\".asm\") or filename.endswith(\".py\"): \n         # print(os.path.join(directory, filename))\n        continue\n    else:\n        continue\n"}, {"idx": "webquery-test-8", "doc": "What is the purpose and use of **kwargs?", "code": "**kwargs&gt;&gt;&gt; def print_keyword_args(**kwargs):\n...     # kwargs is a dict of the keyword args passed to the function\n...     for key, value in kwargs.iteritems():\n...         print \"%s = %s\" % (key, value)\n... \n&gt;&gt;&gt; print_keyword_args(first_name=\"John\", last_name=\"Doe\")\nfirst_name = John\nlast_name = Doe\n**kwargs&gt;&gt;&gt; kwargs = {'first_name': 'Bobby', 'last_name': 'Smith'}\n&gt;&gt;&gt; print_keyword_args(**kwargs)\nfirst_name = Bobby\nlast_name = Smith\niteritems()iteritems()"}, {"idx": "webquery-test-9", "doc": "Purpose of \"%matplotlib inline\"", "code": "%matplotlib%matplotlib inline%matplotlib notebook"}, {"idx": "webquery-test-10", "doc": "Argparse optional positional arguments?", "code": "nargs='?'nargs='?'parser.add_argument('dir', nargs='?', default=os.getcwd())\n&gt;&gt;&gt; import os, argparse\n&gt;&gt;&gt; parser = argparse.ArgumentParser()\n&gt;&gt;&gt; parser.add_argument('-v', action='store_true')\n_StoreTrueAction(option_strings=['-v'], dest='v', nargs=0, const=True, default=False, type=None, choices=None, help=None, metavar=None)\n&gt;&gt;&gt; parser.add_argument('dir', nargs='?', default=os.getcwd())\n_StoreAction(option_strings=[], dest='dir', nargs='?', const=None, default='/home/vinay', type=None, choices=None, help=None, metavar=None)\n&gt;&gt;&gt; parser.parse_args('somedir -v'.split())\nNamespace(dir='somedir', v=True)\n&gt;&gt;&gt; parser.parse_args('-v'.split())\nNamespace(dir='/home/vinay', v=True)\n&gt;&gt;&gt; parser.parse_args(''.split())\nNamespace(dir='/home/vinay', v=False)\n&gt;&gt;&gt; parser.parse_args(['somedir'])\nNamespace(dir='somedir', v=False)\n&gt;&gt;&gt; parser.parse_args('somedir -h -v'.split())\nusage: [-h] [-v] [dir]\n\npositional arguments:\n  dir\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -v\n"}, {"idx": "webquery-test-11", "doc": "Styling multi-line conditions in 'if' statements?", "code": "if (cond1 == 'val1' and cond2 == 'val2' and \n       cond3 == 'val3' and cond4 == 'val4'):\n    do_something\nif (   \n       cond1 == 'val1' and cond2 == 'val2' and \n       cond3 == 'val3' and cond4 == 'val4'\n   ):\n    do_something\nif    (cond1 == 'val1' and cond2 == 'val2' and \n       cond3 == 'val3' and cond4 == 'val4'):\n    do_something\nif cond1 == 'val1' and cond2 == 'val2' and \\\n   cond3 == 'val3' and cond4 == 'val4':\n    do_something\nif cond1 == 'val1' and cond2 == 'val2' and \\\n                       cond3 == 'val3' and \\\n                       cond4 == 'val4':\n    do_something\nif cond1 == 'val1' and \\\n   cond2 == 'val2' and \\\n   cond3 == 'val3' and \\\n   cond4 == 'val4':\n    do_something\n"}, {"idx": "webquery-test-12", "doc": "How to change the font size on a matplotlib plot", "code": "font = {'family' : 'normal',\n        'weight' : 'bold',\n        'size'   : 22}\n\nmatplotlib.rc('font', **font)\nfontrcParamsrcParamsmatplotlib.rcParams.update({'font.size': 22})\nimport matplotlib.pyplot as plt\nplt.rcParams.update({'font.size': 22})\n"}, {"idx": "webquery-test-13", "doc": "What is the difference between range and xrange functions in Python 2.X?", "code": "rangerangerangerangerangerangerangerange"}, {"idx": "webquery-test-1", "doc": "Why is python setup.py saying invalid command 'bdist_wheel' on Travis CI?", "code": "wheelpip install wheel\npython setup.py bdist_wheel \n"}, {"idx": "webquery-test-2", "doc": "How do I print the full NumPy array, without truncation?", "code": "numpy.set_printoptionsimport sys\nimport numpy\nnumpy.set_printoptions(threshold=sys.maxsize)\n"}, {"idx": "webquery-test-3", "doc": "What exactly do \"u\" and \"r\" string prefixes do, and what are raw string literals?", "code": "'r'\\r'...'r'...'r'...'r'...'r'...'r'...'u'...'u'...'&gt;&gt;&gt; sys.getsizeof('ciao')\n28\n&gt;&gt;&gt; sys.getsizeof(u'ciao')\n34\n"}, {"idx": "webquery-test-4", "doc": "Equivalent of shell 'cd' command to change the working directory?", "code": "import os\n\nos.chdir(path)\nos.chdir()"}, {"idx": "webquery-test-5", "doc": "How to fix \"Attempted relative import in non-package\" even with __init__.py", "code": "__name____name__-m-m"}, {"idx": "webquery-test-6", "doc": "How to convert string representation of list to a list", "code": "&gt;&gt;&gt; import ast\n&gt;&gt;&gt; x = '[ \"A\",\"B\",\"C\" , \" D\"]'\n&gt;&gt;&gt; x = ast.literal_eval(x)\n&gt;&gt;&gt; x\n['A', 'B', 'C', ' D']\n&gt;&gt;&gt; x = [n.strip() for n in x]\n&gt;&gt;&gt; x\n['A', 'B', 'C', 'D']\nast.literal_evalast.literal_evalast.literal_eval"}, {"idx": "webquery-test-7", "doc": "How to check if a string is a substring of items in a list of strings", "code": "'abc'xs = ['abc-123', 'def-456', 'ghi-789', 'abc-456']\n\nif any(\"abc\" in s for s in xs):\n    ...\n'abc'matching = [s for s in xs if \"abc\" in s]\n"}, {"idx": "webquery-test-8", "doc": "How do I generate all permutations of a list?", "code": "itertools.permutationsimport itertools\nlist(itertools.permutations([1, 2, 3]))\nitertools.permutationsdef permutations(elements):\n    if len(elements) &lt;= 1:\n        yield elements\n        return\n    for perm in permutations(elements[1:]):\n        for i in range(len(elements)):\n            # nb elements[0:1] works in both string and list contexts\n            yield perm[:i] + elements[0:1] + perm[i:]\nitertools.permutationsdef permutations(iterable, r=None):\n    # permutations('ABCD', 2) --&gt; AB AC AD BA BC BD CA CB CD DA DB DC\n    # permutations(range(3)) --&gt; 012 021 102 120 201 210\n    pool = tuple(iterable)\n    n = len(pool)\n    r = n if r is None else r\n    if r &gt; n:\n        return\n    indices = range(n)\n    cycles = range(n, n-r, -1)\n    yield tuple(pool[i] for i in indices[:r])\n    while n:\n        for i in reversed(range(r)):\n            cycles[i] -= 1\n            if cycles[i] == 0:\n                indices[i:] = indices[i+1:] + indices[i:i+1]\n                cycles[i] = n - i\n            else:\n                j = cycles[i]\n                indices[i], indices[-j] = indices[-j], indices[i]\n                yield tuple(pool[i] for i in indices[:r])\n                break\n        else:\n            return\nitertools.productdef permutations(iterable, r=None):\n    pool = tuple(iterable)\n    n = len(pool)\n    r = n if r is None else r\n    for indices in product(range(n), repeat=r):\n        if len(set(indices)) == r:\n            yield tuple(pool[i] for i in indices)\n"}, {"idx": "webquery-test-9", "doc": "Getting today's date in YYYY-MM-DD in Python?", "code": "strftime&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; datetime.today().strftime('%Y-%m-%d')\n'2021-01-26'\nHour:Minute:Second&gt;&gt;&gt; datetime.today().strftime('%Y-%m-%d %H:%M:%S')\n'2021-01-26 16:50:03'\n"}, {"idx": "webquery-test-10", "doc": "How to change a string into uppercase", "code": "str.upper()&gt;&gt;&gt; s = 'sdsd'\n&gt;&gt;&gt; s.upper()\n'SDSD'\n"}, {"idx": "webquery-test-11", "doc": "Why are Python's 'private' methods not actually private?", "code": "&gt;&gt;&gt; class Foo(object):\n...     def __init__(self):\n...         self.__baz = 42\n...     def foo(self):\n...         print self.__baz\n...     \n&gt;&gt;&gt; class Bar(Foo):\n...     def __init__(self):\n...         super(Bar, self).__init__()\n...         self.__baz = 21\n...     def bar(self):\n...         print self.__baz\n...\n&gt;&gt;&gt; x = Bar()\n&gt;&gt;&gt; x.foo()\n42\n&gt;&gt;&gt; x.bar()\n21\n&gt;&gt;&gt; print x.__dict__\n{'_Bar__baz': 21, '_Foo__baz': 42}\n"}, {"idx": "webquery-test-12", "doc": "Import a module from a relative path", "code": "__init__.py import os, sys, inspect\n # realpath() will make your script run, even if you symlink it :)\n cmd_folder = os.path.realpath(os.path.abspath(os.path.split(inspect.getfile( inspect.currentframe() ))[0]))\n if cmd_folder not in sys.path:\n     sys.path.insert(0, cmd_folder)\n\n # Use this if you want to include modules from a subfolder\n cmd_subfolder = os.path.realpath(os.path.abspath(os.path.join(os.path.split(inspect.getfile( inspect.currentframe() ))[0],\"subfolder\")))\n if cmd_subfolder not in sys.path:\n     sys.path.insert(0, cmd_subfolder)\n\n # Info:\n # cmd_folder = os.path.dirname(os.path.abspath(__file__)) # DO NOT USE __file__ !!!\n # __file__ fails if the script is called in different ways on Windows.\n # __file__ fails if someone does os.chdir() before.\n # sys.argv[0] also fails, because it doesn't not always contains the path.\negg"}, {"idx": "webquery-test-13", "doc": "How to print a date in a regular format?", "code": "printprintprintprintprintprintprintprintprintprintprintstr()str()mylistfor date in mylist :\n    print str(date)\nstr()import datetime\nmylist = []\ntoday = datetime.date.today()\nmylist.append(today)\nprint mylist[0] # print the date object, not the container ;-)\n2008-11-22\n\n# It's better to always use str() because :\n\nprint \"This is a new day : \", mylist[0] # will work\n&gt;&gt;&gt; This is a new day : 2008-11-22\n\nprint \"This is a new day : \" + mylist[0] # will crash\n&gt;&gt;&gt; cannot concatenate 'str' and 'datetime.date' objects\n\nprint \"This is a new day : \" + str(mylist[0]) \n&gt;&gt;&gt; This is a new day : 2008-11-22\nstrftime()strftime()print today.strftime('We are the %d, %b %Y')\n&gt;&gt;&gt; 'We are the 22, Nov 2008'\n\"%\"%d%d%d%d%d%dprint \"We are the {:%d, %b %Y}\".format(today)\n&gt;&gt;&gt; 'We are the 22, Nov 2008'\nimport datetime\nf\"{datetime.datetime.now():%Y-%m-%d}\"\n&gt;&gt;&gt; '2017-06-15'\n"}, {"idx": "webquery-test-1", "doc": "Filter pandas DataFrame by substring criteria", "code": "df[df['A'].str.contains(\"hello\")]\n"}, {"idx": "webquery-test-2", "doc": "What is the Python equivalent of static variables inside a function?", "code": "def foo():\n    foo.counter += 1\n    print \"Counter is %d\" % foo.counter\nfoo.counter = 0\ndef static_vars(**kwargs):\n    def decorate(func):\n        for k in kwargs:\n            setattr(func, k, kwargs[k])\n        return func\n    return decorate\n@static_vars(counter=0)\ndef foo():\n    foo.counter += 1\n    print \"Counter is %d\" % foo.counter\nfoo."}, {"idx": "webquery-test-3", "doc": "What is the difference between dict.items() and dict.iteritems() in Python2?", "code": "items()iteritems()items()items()items()items()items()"}, {"idx": "webquery-test-4", "doc": "How to disable Python warnings?", "code": "catch_warningscatch_warningsimport warnings\nwarnings.filterwarnings(\"ignore\")\n&gt;&gt;&gt; import warnings\n&gt;&gt;&gt; def f():\n...     print('before')\n...     warnings.warn('you are warned!')\n...     print('after')\n...\n&gt;&gt;&gt; f()\nbefore\n&lt;stdin&gt;:3: UserWarning: you are warned!\nafter\n&gt;&gt;&gt; warnings.filterwarnings(\"ignore\")\n&gt;&gt;&gt; f()\nbefore\nafter\n"}, {"idx": "webquery-test-5", "doc": "Shuffle DataFrame rows", "code": ".sampledf.sample(frac=1)\nfracfracdf = df.sample(frac=1).reset_index(drop=True)\ndrop=Truedrop=Trueid(df_old)id(df_old)$ python3 -m memory_profiler .\\test.py\nFilename: .\\test.py\n\nLine #    Mem usage    Increment   Line Contents\n================================================\n     5     68.5 MiB     68.5 MiB   @profile\n     6                             def shuffle():\n     7    847.8 MiB    779.3 MiB       df = pd.DataFrame(np.random.randn(100, 1000000))\n     8    847.9 MiB      0.1 MiB       df = df.sample(frac=1).reset_index(drop=True)\n\n"}, {"idx": "webquery-test-6", "doc": "Which exception should I raise on bad/illegal argument combinations in Python?", "code": "def import_to_orm(name, save=False, recurse=False):\n    if recurse and not save:\n        raise ValueError(\"save must be True if recurse is True\")\nclass BadValueError(ValueError):pass"}, {"idx": "webquery-test-7", "doc": "Is arr.__len__() the preferred way to get the length of an array in Python?", "code": "my_list = [1,2,3,4,5]\nlen(my_list)\n# 5\nmy_tuple = (1,2,3,4,5)\nlen(my_tuple)\n# 5\nmy_string = 'hello world'\nlen(my_string)\n# 11\n.length().length().length().length().length().length()len()lengths = map(len, list_of_containers)\n"}, {"idx": "webquery-test-8", "doc": "How do I call a parent class's method from a child class in Python?", "code": "super()class Foo(Bar):\n    def baz(self, **kwargs):\n        return super().baz(**kwargs)\nclass Foo(Bar):\n    def baz(self, arg):\n        return super(Foo, self).baz(arg)\n"}, {"idx": "webquery-test-9", "doc": "How to filter Pandas dataframe using 'in' and 'not in' like in SQL", "code": "pd.Series.isinsomething.isin(somewhere)~something.isin(somewhere)&gt;&gt;&gt; df\n    country\n0        US\n1        UK\n2   Germany\n3     China\n&gt;&gt;&gt; countries_to_keep\n['UK', 'China']\n&gt;&gt;&gt; df.country.isin(countries_to_keep)\n0    False\n1     True\n2    False\n3     True\nName: country, dtype: bool\n&gt;&gt;&gt; df[df.country.isin(countries_to_keep)]\n    country\n1        UK\n3     China\n&gt;&gt;&gt; df[~df.country.isin(countries_to_keep)]\n    country\n0        US\n2   Germany\n"}, {"idx": "webquery-test-10", "doc": "How to convert index of a pandas dataframe into a column", "code": "df['index1'] = df.index\n.reset_indexdf = df.reset_index(level=0)\n&gt;&gt;&gt; df\n                       val\ntick       tag obs        \n2016-02-26 C   2    0.0139\n2016-02-27 A   2    0.5577\n2016-02-28 C   6    0.0303\nticktick&gt;&gt;&gt; df.reset_index(level=['tick', 'obs'])\n          tick  obs     val\ntag                        \nC   2016-02-26    2  0.0139\nA   2016-02-27    2  0.5577\nC   2016-02-28    6  0.0303\n"}, {"idx": "webquery-test-11", "doc": "TypeError: 'module' object is not callable", "code": "socketsocketsocket.socket(...)socket.socket(...)&gt;&gt;&gt; import socket\n&gt;&gt;&gt; socket\n&lt;module 'socket' from 'C:\\Python27\\lib\\socket.pyc'&gt;\n&gt;&gt;&gt; socket.socket\n&lt;class 'socket._socketobject'&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; from socket import socket\n&gt;&gt;&gt; socket\n&lt;class 'socket._socketobject'&gt;\nmodule object is not callablemodule object is not callablemodule object is not callablemodule object is not callablemodule object is not callable"}, {"idx": "webquery-test-12", "doc": "What does the star and doublestar operator mean in a function call?", "code": "*def sum(a, b):\n    return a + b\n\nvalues = (1, 2)\n\ns = sum(*values)\ns = sum(1, 2)\n**values = { 'a': 1, 'b': 2 }\ns = sum(**values)\ndef sum(a, b, c, d):\n    return a + b + c + d\n\nvalues1 = (1, 2)\nvalues2 = { 'c': 10, 'd': 15 }\ns = sum(*values1, **values2)\ns = sum(1, 2, c=10, d=15)\n*x*xdef sum(*values):\n    s = 0\n    for v in values:\n        s = s + v\n    return s\n\ns = sum(1, 2, 3, 4, 5)\n**def get_a(**values):\n    return values['a']\n\ns = get_a(a=1, b=2)      # returns 1\ndef sum(*values, **options):\n    s = 0\n    for i in values:\n        s = s + i\n    if \"neg\" in options:\n        if options[\"neg\"]:\n            s = -s\n    return s\n\ns = sum(1, 2, 3, 4, 5)            # returns 15\ns = sum(1, 2, 3, 4, 5, neg=True)  # returns -15\ns = sum(1, 2, 3, 4, 5, neg=False) # returns 15\n"}, {"idx": "webquery-test-13", "doc": "How to read/process command line arguments?", "code": "import sys\n\nprint(\"\\n\".join(sys.argv))\nsys.argvsys.argvimport sys\nprint(sys.argv[1:])\n"}, {"idx": "webquery-test-14", "doc": "How do I get indices of N maximum values in a NumPy array?", "code": "argpartition&gt;&gt;&gt; a = np.array([9, 4, 4, 3, 3, 9, 0, 4, 6, 0])\n&gt;&gt;&gt; a\narray([9, 4, 4, 3, 3, 9, 0, 4, 6, 0])\n\n&gt;&gt;&gt; ind = np.argpartition(a, -4)[-4:]\n&gt;&gt;&gt; ind\narray([1, 5, 8, 0])\n\n&gt;&gt;&gt; top4 = a[ind]\n&gt;&gt;&gt; top4\narray([4, 9, 6, 9])\nargsortargsort&gt;&gt;&gt; ind[np.argsort(a[ind])]\narray([1, 8, 5, 0])\n"}, {"idx": "webquery-test-15", "doc": "How do I call a function from another .py file?", "code": "functionfunctionfrom file import function\nfunction(a, b)\nfilefilea.pya.pya.pya.py"}, {"idx": "webquery-test-1", "doc": "What is the purpose of the single underscore \"_\" variable in Python?", "code": "_raise forms.ValidationError(_(\"Please enter a correct username\"))\nraise forms.ValidationError(_(\"Please enter a correct username\"))\nraise forms.ValidationError(_(\"Please enter a correct username\"))\nraise forms.ValidationError(_(\"Please enter a correct username\"))\nraise forms.ValidationError(_(\"Please enter a correct username\"))\nraise forms.ValidationError(_(\"Please enter a correct username\"))\nraise forms.ValidationError(_(\"Please enter a correct username\"))\nraise forms.ValidationError(_(\"Please enter a correct username\"))\nraise forms.ValidationError(_(\"Please enter a correct username\"))\nraise forms.ValidationError(_(\"Please enter a correct username\"))\nraise forms.ValidationError(_(\"Please enter a correct username\"))\nraise forms.ValidationError(_(\"Please enter a correct username\"))\nraise forms.ValidationError(_(\"Please enter a correct username\"))\nraise forms.ValidationError(_(\"Please enter a correct username\"))\nraise forms.ValidationError(_(\"Please enter a correct username\"))\nraise forms.ValidationError(_(\"Please enter a correct username\"))\nraise forms.ValidationError(_(\"Please enter a correct username\"))\nraise forms.ValidationError(_(\"Please enter a correct username\"))\nraise forms.ValidationError(_(\"Please enter a correct username\"))\n"}, {"idx": "webquery-test-2", "doc": "What is a \"slug\" in Django?", "code": "&lt;title&gt; The 46 Year Old Virgin &lt;/title&gt;\n&lt;content&gt; A silly comedy movie &lt;/content&gt;\n&lt;slug&gt; the-46-year-old-virgin &lt;/slug&gt;\nclass Article(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField(max_length=1000)\n    slug = models.SlugField(max_length=40)\nwww.example.com/article/23\nwww.example.com/article/The 46 Year Old Virgin\n%20www.example.com/article/The%2046%20Year%20Old%20Virgin\nwww.example.com/article/the-46-year-old-virgin\nthe-46-year-old-virginthe-46-year-old-virgin"}, {"idx": "webquery-test-3", "doc": "How do I get the current time in milliseconds in Python?", "code": "time.time()import time\n\ndef current_milli_time():\n    return round(time.time() * 1000)\n&gt;&gt;&gt; current_milli_time()\n1378761833768\n"}, {"idx": "webquery-test-4", "doc": "Dump a NumPy array into a csv file", "code": "numpy.savetxtimport numpy\na = numpy.asarray([ [1,2,3], [4,5,6], [7,8,9] ])\nnumpy.savetxt(\"foo.csv\", a, delimiter=\",\")\n"}, {"idx": "webquery-test-5", "doc": "Python and pip, list all versions of a package that's available?", "code": "pip index versions pylibmc\npip install pylibmc==\npip install --use-deprecated=legacy-resolver pylibmc==\n$ pip install pylibmc==\nCollecting pylibmc==\n  Could not find a version that satisfies the requirement pylibmc== (from \n  versions: 0.2, 0.3, 0.4, 0.5.1, 0.5.2, 0.5.3, 0.5.4, 0.5.5, 0.5, 0.6.1, 0.6, \n  0.7.1, 0.7.2, 0.7.3, 0.7.4, 0.7, 0.8.1, 0.8.2, 0.8, 0.9.1, 0.9.2, 0.9, \n  1.0-alpha, 1.0-beta, 1.0, 1.1.1, 1.1, 1.2.0, 1.2.1, 1.2.2, 1.2.3, 1.3.0)\nNo matching distribution found for pylibmc==\npip install pylibmc==blork\nblork"}, {"idx": "webquery-test-6", "doc": "What is the difference between __init__ and __call__?", "code": "class Foo:\n    def __init__(self, a, b, c):\n        # ...\n\nx = Foo(1, 2, 3) # __init__\nclass Foo:\n    def __call__(self, a, b, c):\n        # ...\n\nx = Foo()\nx(1, 2, 3) # __call__\n"}, {"idx": "webquery-test-7", "doc": "Can I force pip to reinstall the current version?", "code": "pip install --upgrade --force-reinstall &lt;package&gt;\npip install -I &lt;package&gt;\npip install --ignore-installed &lt;package&gt;\n"}, {"idx": "webquery-test-8", "doc": "How do I wait for a pressed key?", "code": "input()input(\"Press Enter to continue...\")\nraw_input()raw_input(\"Press Enter to continue...\")\nmsvcrtmsvcrtimport msvcrt as m\ndef wait():\n    m.getch()\nraw_input()raw_input()raw_input()"}, {"idx": "webquery-test-9", "doc": "Get statistics for each group (such as count, mean, etc) using pandas GroupBy?", "code": ".size().size()df.groupby(['col1','col2']).size()\nDataFrameDataFramedf.groupby(['col1', 'col2']).size().reset_index(name='counts')\nIn [2]: df\nOut[2]: \n  col1 col2  col3  col4  col5  col6\n0    A    B  0.20 -0.61 -0.49  1.49\n1    A    B -1.53 -1.01 -0.39  1.82\n2    A    B -0.44  0.27  0.72  0.11\n3    A    B  0.28 -1.32  0.38  0.18\n4    C    D  0.12  0.59  0.81  0.66\n5    C    D -0.13 -1.65 -1.64  0.50\n6    C    D -1.42 -0.11 -0.18 -0.44\n7    E    F -0.00  1.42 -0.26  1.17\n8    E    F  0.91 -0.47  1.35 -0.34\n9    G    H  1.48 -0.63 -1.14  0.17\n.size()In [3]: df.groupby(['col1', 'col2']).size()\nOut[3]: \ncol1  col2\nA     B       4\nC     D       3\nE     F       2\nG     H       1\ndtype: int64\n.size().reset_index(name='counts')In [4]: df.groupby(['col1', 'col2']).size().reset_index(name='counts')\nOut[4]: \n  col1 col2  counts\n0    A    B       4\n1    C    D       3\n2    E    F       2\n3    G    H       1\nIn [5]: (df\n   ...: .groupby(['col1', 'col2'])\n   ...: .agg({\n   ...:     'col3': ['mean', 'count'], \n   ...:     'col4': ['median', 'min', 'count']\n   ...: }))\nOut[5]: \n            col4                  col3      \n          median   min count      mean count\ncol1 col2                                   \nA    B    -0.810 -1.32     4 -0.372500     4\nC    D    -0.110 -1.65     3 -0.476667     3\nE    F     0.475 -0.47     2  0.455000     2\nG    H    -0.630 -0.63     1  1.480000     1\njoinIn [6]: gb = df.groupby(['col1', 'col2'])\n   ...: counts = gb.size().to_frame(name='counts')\n   ...: (counts\n   ...:  .join(gb.agg({'col3': 'mean'}).rename(columns={'col3': 'col3_mean'}))\n   ...:  .join(gb.agg({'col4': 'median'}).rename(columns={'col4': 'col4_median'}))\n   ...:  .join(gb.agg({'col4': 'min'}).rename(columns={'col4': 'col4_min'}))\n   ...:  .reset_index()\n   ...: )\n   ...: \nOut[6]: \n  col1 col2  counts  col3_mean  col4_median  col4_min\n0    A    B       4  -0.372500       -0.810     -1.32\n1    C    D       3  -0.476667       -0.110     -1.65\n2    E    F       2   0.455000        0.475     -0.47\n3    G    H       1   1.480000       -0.630     -0.63\nIn [1]: import numpy as np\n   ...: import pandas as pd \n   ...: \n   ...: keys = np.array([\n   ...:         ['A', 'B'],\n   ...:         ['A', 'B'],\n   ...:         ['A', 'B'],\n   ...:         ['A', 'B'],\n   ...:         ['C', 'D'],\n   ...:         ['C', 'D'],\n   ...:         ['C', 'D'],\n   ...:         ['E', 'F'],\n   ...:         ['E', 'F'],\n   ...:         ['G', 'H'] \n   ...:         ])\n   ...: \n   ...: df = pd.DataFrame(\n   ...:     np.hstack([keys,np.random.randn(10,4).round(2)]), \n   ...:     columns = ['col1', 'col2', 'col3', 'col4', 'col5', 'col6']\n   ...: )\n   ...: \n   ...: df[['col3', 'col4', 'col5', 'col6']] = \\\n   ...:     df[['col3', 'col4', 'col5', 'col6']].astype(float)\n   ...: \nNaN"}, {"idx": "webquery-test-10", "doc": "How to delete the contents of a folder?", "code": "import os, shutil\nfolder = '/path/to/folder'\nfor filename in os.listdir(folder):\n    file_path = os.path.join(folder, filename)\n    try:\n        if os.path.isfile(file_path) or os.path.islink(file_path):\n            os.unlink(file_path)\n        elif os.path.isdir(file_path):\n            shutil.rmtree(file_path)\n    except Exception as e:\n        print('Failed to delete %s. Reason: %s' % (file_path, e))\n"}, {"idx": "webquery-test-11", "doc": "Speed comparison with Project Euler: C vs Python vs Erlang vs Haskell", "code": "GHC 7.0.3GHC 7.0.3GHC 7.0.3GHC 7.0.3GHC 7.0.3-O3-O3-O3-O3-O3-O3-O3-O3-O3-O3-O3-O3 $ time ./so\n 842161320  \n\n real    0m7.954s  \n user    0m7.944s  \n sys     0m0.004s  \n-fllvm-fllvmfactorCount number = factorCount' number isquare 1 0 - (fromEnum $ square == fromIntegral isquare)\n    where square = sqrt $ fromIntegral number\n          isquare = floor square\n\nfactorCount' :: Int -&gt; Int -&gt; Int -&gt; Int -&gt; Int\nfactorCount' number sqrt candidate0 count0 = go candidate0 count0\n  where\n  go candidate count\n    | candidate &gt; sqrt = count\n    | number `rem` candidate == 0 = go (candidate + 1) (count + 2)\n    | otherwise = go (candidate + 1) count\n\nnextTriangle index triangle\n    | factorCount triangle &gt; 1000 = triangle\n    | otherwise = nextTriangle (index + 1) (triangle + index + 1)\n\nmain = print $ nextTriangle 1 1\nIntegerIntegerIntegerIntegerIntegerInteger-O2-O2-O2"}, {"idx": "webquery-test-12", "doc": "How do I get my program to sleep for 50 milliseconds?", "code": "time.sleep()from time import sleep\nsleep(0.05)\n"}, {"idx": "webquery-test-1", "doc": "How do I remove packages installed with Python's easy_install?", "code": "$ wget https://bootstrap.pypa.io/get-pip.py\n$ python get-pip.py\npip uninstallpip uninstall"}, {"idx": "webquery-test-2", "doc": "What is the Python equivalent for a case/switch statement?", "code": "def http_error(status):\n    match status:\n        case 400:\n            return \"Bad request\"\n        case 404:\n            return \"Not found\"\n        case 418:\n            return \"I'm a teapot\"\n\n        # If an exact match is not confirmed, this last case will be used if provided\n        case _:\n            return \"Something's wrong with the internet\"\nswitch# define the function blocks\ndef zero():\n    print \"You typed zero.\\n\"\n\ndef sqr():\n    print \"n is a perfect square\\n\"\n\ndef even():\n    print \"n is an even number\\n\"\n\ndef prime():\n    print \"n is a prime number\\n\"\n\n# map the inputs to the function blocks\noptions = {0 : zero,\n           1 : sqr,\n           4 : sqr,\n           9 : sqr,\n           2 : even,\n           3 : prime,\n           5 : prime,\n           7 : prime,\n}\nswitchoptions[num]()\n"}, {"idx": "webquery-test-3", "doc": "Does Python have \u201cprivate\u201d variables in classes?", "code": "________"}, {"idx": "webquery-test-4", "doc": "Filter dict to contain only certain keys?", "code": "dict_you_want = { your_key: old_dict[your_key] for your_key in your_keys }\ndict((your_key, old_dict[your_key]) for ...)old_dictunwanted = set(keys) - set(your_dict)\nfor unwanted_key in unwanted: del your_dict[unwanted_key]\n"}, {"idx": "webquery-test-5", "doc": "How can I get the concatenation of two lists in Python without modifying either one?", "code": "list1 + list2list1 + list2list1 + list2"}, {"idx": "webquery-test-6", "doc": "Return a default value if a dictionary key is not available", "code": "dict.get()value = d.get(key)\nNoneNoneNonevalue = d.get(key, \"empty\")\n"}, {"idx": "webquery-test-7", "doc": "Changing the tick frequency on the x or y axis", "code": "plt.xticksplt.xticks(np.arange(min(x), max(x)+1, 1.0))\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = [0,5,9,10,15]\ny = [0,1,2,3,4]\nplt.plot(x,y)\nplt.xticks(np.arange(min(x), max(x)+1, 1.0))\nplt.show()\nnp.arangenp.arangenp.arangenp.arangeplt.plotplt.plotplt.plotplt.plotplt.plotstart, end = ax.get_xlim()\nax.xaxis.set_ticks(np.arange(start, end, stepsize))\nax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%0.1f'))\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\nx = [0,5,9,10,15]\ny = [0,1,2,3,4]\nfig, ax = plt.subplots()\nax.plot(x,y)\nstart, end = ax.get_xlim()\nax.xaxis.set_ticks(np.arange(start, end, 0.712123))\nax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%0.1f'))\nplt.show()\n"}, {"idx": "webquery-test-8", "doc": "When to use cla(), clf() or close() for clearing a plot in matplotlib?", "code": "Figurepyplotpyplotpyplotmatplotlib.pyplotplt.cla()plt.cla()plt.cla()close()close()close()close()close()close()FigureFigureFigurefig.clf()fig.clf()fig.clf()fig.clear()fig.clear()del figdel fig"}, {"idx": "webquery-test-9", "doc": "How to urlencode a querystring in Python?", "code": "urllib.quote_plussafe_string = urllib.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')\n\n#Value: 'string_of_characters_like_these%3A%24%23%40%3D%3F%25%5EQ%5E%24'\nurlliburlliburllibimport urllib.parse\nsafe_string = urllib.parse.quote_plus(...)\n"}, {"idx": "webquery-test-10", "doc": "Import multiple CSV files into pandas and concatenate into one DataFrame", "code": ".read_header=0import pandas as pd\nimport glob\nimport os\n\npath = r'C:\\DRO\\DCL_rawdata_files' # use your path\nall_files = glob.glob(os.path.join(path , \"/*.csv\"))\n\nli = []\n\nfor filename in all_files:\n    df = pd.read_csv(filename, index_col=None, header=0)\n    li.append(df)\n\nframe = pd.concat(li, axis=0, ignore_index=True)\nall_files = glob.glob(os.path.join(path, \"*.csv\"))\n\ndf = pd.concat((pd.read_csv(f) for f in all_files), ignore_index=True)\npathlibfrom pathlib import Path\nimport pandas as pd\nimport numpy as np\n\npath = r'C:\\DRO\\DCL_rawdata_files'  # or unix / linux / mac path\n\n# Get the files from the path provided in the OP\nfiles = Path(path).glob('*.csv')  # .rglob to get subdirectories\ndfs = list()\nfor f in files:\n    data = pd.read_csv(f)\n    # .stem is method for pathlib objects to get the filename w/o the extension\n    data['file'] = f.stem\n    dfs.append(data)\n\ndf = pd.concat(dfs, ignore_index=True)\nenumeratedfs = list()\nfor i, f in enumerate(files):\n    data = pd.read_csv(f)\n    data['file'] = f'File {i}'\n    dfs.append(data)\n\ndf = pd.concat(dfs, ignore_index=True)\nnp.repeatnp.repeatnp.repeat# Read the files into dataframes\ndfs = [pd.read_csv(f) for f in files]\n\n# Combine the list of dataframes\ndf = pd.concat(dfs, ignore_index=True)\n\n# Add a new column\ndf['Source'] = np.repeat([f'S{i}' for i in range(len(dfs))], [len(df) for df in dfs])\n.assigndf = pd.concat((pd.read_csv(f).assign(filename=f.stem) for f in files), ignore_index=True)\ndf = pd.concat((pd.read_csv(f).assign(Source=f'S{i}') for i, f in enumerate(files)), ignore_index=True)\n"}, {"idx": "webquery-test-11", "doc": "How can I pass a list as a command-line argument with argparse?", "code": "nargsnargsnargsparser.add_argument('-l','--list', nargs='+', help='&lt;Required&gt; Set flag', required=True)\n# Use like:\n# python arg.py -l 1234 2345 3456 4567\nnargs='+'nargs='+'parser.add_argument('-l','--list', action='append', help='&lt;Required&gt; Set flag', required=True)\n# Use like:\n# python arg.py -l 1234 -l 2345 -l 3456 -l 4567\nappendtype=listtype=listtype=listimport argparse\n\nparser = argparse.ArgumentParser()\n\n# By default it will fail with multiple arguments.\nparser.add_argument('--default')\n\n# Telling the type to be a list will also fail for multiple arguments,\n# but give incorrect results for a single argument.\nparser.add_argument('--list-type', type=list)\n\n# This will allow you to provide multiple arguments, but you will get\n# a list of lists which is not desired.\nparser.add_argument('--list-type-nargs', type=list, nargs='+')\n\n# This is the correct way to handle accepting multiple arguments.\n# '+' == 1 or more.\n# '*' == 0 or more.\n# '?' == 0 or 1.\n# An int is an explicit number of arguments to accept.\nparser.add_argument('--nargs', nargs='+')\n\n# To make the input integers\nparser.add_argument('--nargs-int-type', nargs='+', type=int)\n\n# An alternate way to accept multiple inputs, but you must\n# provide the flag once per input. Of course, you can use\n# type=int here if you want.\nparser.add_argument('--append-action', action='append')\n\n# To show the results of the given option to screen.\nfor _, value in parser.parse_args()._get_kwargs():\n    if value is not None:\n        print(value)\n$ python arg.py --default 1234 2345 3456 4567\n...\narg.py: error: unrecognized arguments: 2345 3456 4567\n\n$ python arg.py --list-type 1234 2345 3456 4567\n...\narg.py: error: unrecognized arguments: 2345 3456 4567\n\n$ # Quotes won't help here... \n$ python arg.py --list-type \"1234 2345 3456 4567\"\n['1', '2', '3', '4', ' ', '2', '3', '4', '5', ' ', '3', '4', '5', '6', ' ', '4', '5', '6', '7']\n\n$ python arg.py --list-type-nargs 1234 2345 3456 4567\n[['1', '2', '3', '4'], ['2', '3', '4', '5'], ['3', '4', '5', '6'], ['4', '5', '6', '7']]\n\n$ python arg.py --nargs 1234 2345 3456 4567\n['1234', '2345', '3456', '4567']\n\n$ python arg.py --nargs-int-type 1234 2345 3456 4567\n[1234, 2345, 3456, 4567]\n\n$ # Negative numbers are handled perfectly fine out of the box.\n$ python arg.py --nargs-int-type -1234 2345 -3456 4567\n[-1234, 2345, -3456, 4567]\n\n$ python arg.py --append-action 1234 --append-action 2345 --append-action 3456 --append-action 4567\n['1234', '2345', '3456', '4567']\nnargsnargsnargsnargsnargsnargsnargsnargsnargsnargsnargsnargsnargsnargsnargsnargsnargsnargsargparse"}, {"idx": "webquery-test-12", "doc": "Are dictionaries ordered in Python 3.6+?", "code": "OrderedDict3.6dk_entriesdk_entriesdk_entriesdk_entriesdk_entriesdk_entriesdk_entriesdk_entriesdk_entriesdk_entriesdk_entriesdk_entriesdk_entriesdk_entriesdk_entriesPyDictKeyEntryPyDictKeyEntryPyDictKeyEntryPyDictKeyEntryintX_tintX_tintX_tintX_tintX_tPyDictKeyEntryPyDictKeyEntryd = {'timmy': 'red', 'barry': 'green', 'guido': 'blue'}\nd = {'timmy': 'red', 'barry': 'green', 'guido': 'blue'}\nd = {'timmy': 'red', 'barry': 'green', 'guido': 'blue'}\n"}, {"idx": "webquery-test-13", "doc": "Why does python use 'else' after for and while loops?", "code": "forforfor i in mylist:\n    if i == theflag:\n        break\n    process(i)\nelse:\n    raise ValueError(\"List argument missing terminal flag.\")\nflagfound = False\nfor i in mylist:\n    if i == theflag:\n        flagfound = True\n        break\n    process(i)\n\nif not flagfound:\n    raise ValueError(\"List argument missing terminal flag.\")\nraise"}, {"idx": "webquery-test-14", "doc": "How to avoid pandas creating an index in a saved csv", "code": "index=Falsedf.to_csv('your.csv', index=False)\n"}, {"idx": "webquery-test-15", "doc": "How to get the position of a character in Python?", "code": "find()find()find()find()find()find()find()&gt;&gt;&gt; myString = 'Position of a character'\n&gt;&gt;&gt; myString.find('s')\n2\n&gt;&gt;&gt; myString.find('x')\n-1\nindex()&gt;&gt;&gt; myString = 'Position of a character'\n&gt;&gt;&gt; myString.index('s')\n2\n&gt;&gt;&gt; myString.index('x')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: substring not found\nstring.find(s, sub[, start[, end]])string.find(s, sub[, start[, end]])string.find(s, sub[, start[, end]])string.index(s, sub[, start[, end]])string.index(s, sub[, start[, end]])string.index(s, sub[, start[, end]])"}, {"idx": "webquery-test-16", "doc": "Dealing with multiple Python versions and PIP?", "code": "python -m pippython -m pip# The system default python:\n$ python -m pip install fish\n\n# A virtualenv's python:\n$ .env/bin/python -m pip install fish\n\n# A specific version of python:\n$ python-3.6 -m pip install fish\npip-{version}pip-{version}$ pip-2.5 install myfoopackage\n$ pip-2.6 install otherpackage\n$ pip-2.7 install mybarpackage\npipVERSIONpipVERSIONpipVERSION$ pip2.6 install otherpackage\n$ pip2.7 install mybarpackage\n"}, {"idx": "webquery-test-1", "doc": "How to state in requirements.txt a direct github source", "code": "requirements.txtpackage-one==1.9.4\npackage-two==3.7.1\npackage-three==1.0.1\n...\npackage-name==package-twopackage-twopackage-two41b95ec41b95ecpackage-one==1.9.4\ngit+https://github.com/path/to/package-two@41b95ec#egg=package-two\npackage-three==1.0.1\nmastergit+https://github.com/path/to/package-two@master#egg=package-two\n0.1git+https://github.com/path/to/package-two@0.1#egg=package-two\n3.7.1git+https://github.com/path/to/package-two@releases/tag/v3.7.1#egg=package-two\n#egg=package-two"}, {"idx": "webquery-test-2", "doc": "Does Python have an ordered set?", "code": "collections.OrderedDictcollections.OrderedDictdictdictdictdictdictdictdict&gt;&gt;&gt; keywords = ['foo', 'bar', 'bar', 'foo', 'baz', 'foo']\n\n&gt;&gt;&gt; list(dict.fromkeys(keywords))\n['foo', 'bar', 'baz']\n"}, {"idx": "webquery-test-3", "doc": "How to set the current working directory?", "code": "os.chdiros.chdir(path)\n"}, {"idx": "webquery-test-4", "doc": "How to install psycopg2 with \"pip\" on Python?", "code": "psycopg2-binarypip install psycopg2-binary\npsycopg2sudo apt install libpq-dev python3-dev\npython3.8-devsudo apt install libpq-dev python-dev\nsudo apt install build-essential\nsudo apt install postgresql-server-dev-all\n"}, {"idx": "webquery-test-5", "doc": "Getting file size in Python?", "code": "os.path.getsize(path)OSErrorimport os\nos.path.getsize('C:\\\\Python27\\\\Lib\\\\genericpath.py')\nos.stat(path).st_sizeimport os\nos.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size \nPath(path).stat().st_sizefrom pathlib import Path\nPath('C:\\\\Python27\\\\Lib\\\\genericpath.py').stat().st_size\n"}, {"idx": "webquery-test-6", "doc": "Add a new item to a dictionary in Python", "code": "default_data['item3'] = 3\ndefault_data.update({'item3': 3})\n"}, {"idx": "webquery-test-7", "doc": "Does Python's time.time() return the local or UTC timestamp?", "code": "time.time()time.time()&gt;&gt;&gt; import time\n&gt;&gt;&gt; ts = time.time()\n&gt;&gt;&gt; ts\n1355563265.81\n&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')\n'2012-12-15 01:21:05'\n&gt;&gt;&gt;\ntsts"}, {"idx": "webquery-test-8", "doc": "Correct way to try/except using Python requests module?", "code": "ConnectionErrorConnectionErrorConnectionErrorConnectionErrorConnectionErrorsys.exittry:\n    r = requests.get(url, params={'s': thing})\nexcept requests.exceptions.RequestException as e:  # This is the correct syntax\n    raise SystemExit(e)\ntry:\n    r = requests.get(url, params={'s': thing})\nexcept requests.exceptions.Timeout:\n    # Maybe set up for a retry, or continue in a retry loop\nexcept requests.exceptions.TooManyRedirects:\n    # Tell the user their URL was bad and try a different one\nexcept requests.exceptions.RequestException as e:\n    # catastrophic error. bail.\n    raise SystemExit(e)\nResponse.raise_for_statusResponse.raise_for_statustry:\n    r = requests.get('http://www.google.com/nothere')\n    r.raise_for_status()\nexcept requests.exceptions.HTTPError as err:\n    raise SystemExit(err)\n404 Client Error: Not Found for url: http://www.google.com/nothere\n"}, {"idx": "webquery-test-9", "doc": "What is a Python egg?", "code": ".jar.jar.jar.egg"}, {"idx": "webquery-test-10", "doc": "Convert list to tuple in Python", "code": "tupletuple&gt;&gt;&gt; l = [4,5,6]\n&gt;&gt;&gt; tuple(l)\n(4, 5, 6)\n\n&gt;&gt;&gt; tuple = 'whoops'   # Don't do this\n&gt;&gt;&gt; tuple(l)\nTypeError: 'tuple' object is not callable\n"}, {"idx": "webquery-test-11", "doc": "How to apply a function to two columns of Pandas dataframe", "code": "df['col_3'] = df.apply(lambda x: f(x.col_1, x.col_2), axis=1)\nfimport pandas as pd\n\ndf = pd.DataFrame({'ID':['1', '2', '3'], 'col_1': [0, 2, 3], 'col_2':[1, 4, 5]})\nmylist = ['a', 'b', 'c', 'd', 'e', 'f']\n\ndef get_sublist(sta,end):\n    return mylist[sta:end+1]\n\ndf['col_3'] = df.apply(lambda x: get_sublist(x.col_1, x.col_2), axis=1)\nprint(df)  ID  col_1  col_2      col_3\n0  1      0      1     [a, b]\n1  2      2      4  [c, d, e]\n2  3      3      5  [d, e, f]\ndf['col_3'] = df.apply(lambda x: f(x['col 1'], x['col 2']), axis=1)\n"}, {"idx": "webquery-test-12", "doc": "Convert pandas dataframe to NumPy array", "code": "df.to_numpy()df.valuesvaluesvaluesto_numpy()to_numpy()to_numpy()to_numpy()to_numpy()to_numpy()to_numpy().valuesDataFrame.to_numpy()to_numpy()to_numpy()to_numpy()to_numpy# Setup\ndf = pd.DataFrame(data={'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]}, \n                  index=['a', 'b', 'c'])\n\n# Convert the entire DataFrame\ndf.to_numpy()\n# array([[1, 4, 7],\n#        [2, 5, 8],\n#        [3, 6, 9]])\n\n# Convert specific columns\ndf[['A', 'C']].to_numpy()\n# array([[1, 7],\n#        [2, 8],\n#        [3, 9]])\nIndexIndexdf.index.to_numpy()\n# array(['a', 'b', 'c'], dtype=object)\n\ndf['A'].to_numpy()\n#  array([1, 2, 3])\nv = df.to_numpy()\nv[0, 0] = -1\n \ndf\n   A  B  C\na -1  4  7\nb  2  5  8\nc  3  6  9\nto_numpy(copy=True)a = pd.array([1, 2, None], dtype=\"Int64\")                                  \na                                                                          \n\n&lt;IntegerArray&gt;\n[1, 2, &lt;NA&gt;]\nLength: 3, dtype: Int64 \n\n# Wrong\na.to_numpy()                                                               \n# array([1, 2, &lt;NA&gt;], dtype=object)  # yuck, objects\n\n# Correct\na.to_numpy(dtype='float', na_value=np.nan)                                 \n# array([ 1.,  2., nan])\n\n# Also correct\na.to_numpy(dtype='int', na_value=-1)\n# array([ 1,  2, -1])\ndtypesDataFrame.to_recordsdf.to_records()\n# rec.array([('a', 1, 4, 7), ('b', 2, 5, 8), ('c', 3, 6, 9)],\n#           dtype=[('index', 'O'), ('A', '&lt;i8'), ('B', '&lt;i8'), ('C', '&lt;i8')])\nto_numpyto_numpyv = df.reset_index()\nnp.rec.fromrecords(v, names=v.columns.tolist())\n# rec.array([('a', 1, 4, 7), ('b', 2, 5, 8), ('c', 3, 6, 9)],\n#           dtype=[('index', '&lt;U1'), ('A', '&lt;i8'), ('B', '&lt;i8'), ('C', '&lt;i8')])\nrec.fromrecordsdf2 = pd.concat([df] * 10000)\n\n%timeit df2.to_records()\n%%timeit\nv = df2.reset_index()\nnp.rec.fromrecords(v, names=v.columns.tolist())\n\n12.9 ms \u00b1 511 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n9.56 ms \u00b1 291 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\nto_numpy()to_numpy().values.values.values.values.valuesto_numpyto_numpyDataFrame.valuesDataFrame.get_values()DataFrame.get_values()DataFrame.as_matrix()"}, {"idx": "webquery-test-13", "doc": "How to build a basic iterator?", "code": "__iter__()__iter__()__iter____iter__class Counter:\n    def __init__(self, low, high):\n        self.current = low - 1\n        self.high = high\n\n    def __iter__(self):\n        return self\n\n    def __next__(self): # Python 2: def next(self)\n        self.current += 1\n        if self.current &lt; self.high:\n            return self.current\n        raise StopIteration\n\n\nfor c in Counter(3, 9):\n    print(c)\n3\n4\n5\n6\n7\n8\ndef counter(low, high):\n    current = low\n    while current &lt; high:\n        yield current\n        current += 1\n\nfor c in counter(3, 9):\n    print(c)\n"}, {"idx": "webquery-test-14", "doc": "Difference between map, applymap and apply methods in Pandas", "code": "In [116]: frame = DataFrame(np.random.randn(4, 3), columns=list('bde'), index=['Utah', 'Ohio', 'Texas', 'Oregon'])\n\nIn [117]: frame\nOut[117]: \n               b         d         e\nUtah   -0.029638  1.081563  1.280300\nOhio    0.647747  0.831136 -1.549481\nTexas   0.513416 -0.884417  0.195343\nOregon -0.485454 -0.477388 -0.309548\n\nIn [118]: f = lambda x: x.max() - x.min()\n\nIn [119]: frame.apply(f)\nOut[119]: \nb    1.133201\nd    1.965980\ne    2.829781\ndtype: float64\nIn [120]: format = lambda x: '%.2f' % x\n\nIn [121]: frame.applymap(format)\nOut[121]: \n            b      d      e\nUtah    -0.03   1.08   1.28\nOhio     0.65   0.83  -1.55\nTexas    0.51  -0.88   0.20\nOregon  -0.49  -0.48  -0.31\nIn [122]: frame['e'].map(format)\nOut[122]: \nUtah       1.28\nOhio      -1.55\nTexas      0.20\nOregon    -0.31\nName: e, dtype: object\napplyapplyapply"}, {"idx": "webquery-test-15", "doc": "How would you make a comma-separated string from a list of strings?", "code": "my_list = ['a', 'b', 'c', 'd']\nmy_string = ','.join(my_list)\n'a,b,c,d'\nmy_string = ','.join(map(str, my_list)) \n"}, {"idx": "webquery-test-1", "doc": "How do I capture SIGINT in Python?", "code": "signal.signal#!/usr/bin/env python\nimport signal\nimport sys\n\ndef signal_handler(sig, frame):\n    print('You pressed Ctrl+C!')\n    sys.exit(0)\n\nsignal.signal(signal.SIGINT, signal_handler)\nprint('Press Ctrl+C')\nsignal.pause()\nsignal"}, {"idx": "webquery-test-2", "doc": "How to save/restore a model after training?", "code": "import tensorflow as tf\n\n#Prepare to feed input, i.e. feed_dict and placeholders\nw1 = tf.placeholder(\"float\", name=\"w1\")\nw2 = tf.placeholder(\"float\", name=\"w2\")\nb1= tf.Variable(2.0,name=\"bias\")\nfeed_dict ={w1:4,w2:8}\n\n#Define a test operation that we will restore\nw3 = tf.add(w1,w2)\nw4 = tf.multiply(w3,b1,name=\"op_to_restore\")\nsess = tf.Session()\nsess.run(tf.global_variables_initializer())\n\n#Create a saver object which will save all the variables\nsaver = tf.train.Saver()\n\n#Run the operation by feeding input\nprint sess.run(w4,feed_dict)\n#Prints 24 which is sum of (w1+w2)*b1 \n\n#Now, save the graph\nsaver.save(sess, 'my_test_model',global_step=1000)\nimport tensorflow as tf\n\nsess=tf.Session()    \n#First let's load meta graph and restore weights\nsaver = tf.train.import_meta_graph('my_test_model-1000.meta')\nsaver.restore(sess,tf.train.latest_checkpoint('./'))\n\n\n# Access saved Variables directly\nprint(sess.run('bias:0'))\n# This will print 2, which is the value of bias that we saved\n\n\n# Now, let's access and create placeholders variables and\n# create feed-dict to feed new data\n\ngraph = tf.get_default_graph()\nw1 = graph.get_tensor_by_name(\"w1:0\")\nw2 = graph.get_tensor_by_name(\"w2:0\")\nfeed_dict ={w1:13.0,w2:17.0}\n\n#Now, access the op that you want to run. \nop_to_restore = graph.get_tensor_by_name(\"op_to_restore:0\")\n\nprint sess.run(op_to_restore,feed_dict)\n#This will print 60 which is calculated \n"}, {"idx": "webquery-test-3", "doc": "Converting a Pandas GroupBy output from Series to DataFrame", "code": "g1In [19]: type(g1)\nOut[19]: pandas.core.frame.DataFrame\n\nIn [20]: g1.index\nOut[20]: \nMultiIndex([('Alice', 'Seattle'), ('Bob', 'Seattle'), ('Mallory', 'Portland'),\n       ('Mallory', 'Seattle')], dtype=object)\nIn [21]: g1.add_suffix('_Count').reset_index()\nOut[21]: \n      Name      City  City_Count  Name_Count\n0    Alice   Seattle           1           1\n1      Bob   Seattle           2           2\n2  Mallory  Portland           2           2\n3  Mallory   Seattle           1           1\nIn [36]: DataFrame({'count' : df1.groupby( [ \"Name\", \"City\"] ).size()}).reset_index()\nOut[36]: \n      Name      City  count\n0    Alice   Seattle      1\n1      Bob   Seattle      2\n2  Mallory  Portland      2\n3  Mallory   Seattle      1\n"}, {"idx": "webquery-test-4", "doc": "Sort a list by multiple attributes?", "code": "s = sorted(s, key = lambda x: (x[1], x[2]))\nitemgetterimport operator\ns = sorted(s, key = operator.itemgetter(1, 2))\nsortsorts.sort(key = operator.itemgetter(1, 2))\n"}, {"idx": "webquery-test-5", "doc": "How to convert a nested Python dict to object?", "code": "namedtuple&gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; MyStruct = namedtuple('MyStruct', 'a b d')\n&gt;&gt;&gt; s = MyStruct(a=1, b={'c': 2}, d=['hi'])\n&gt;&gt;&gt; s\nMyStruct(a=1, b={'c': 2}, d=['hi'])\n&gt;&gt;&gt; s.a\n1\n&gt;&gt;&gt; s.b\n{'c': 2}\n&gt;&gt;&gt; s.c\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'MyStruct' object has no attribute 'c'\n&gt;&gt;&gt; s.d\n['hi']\nclass Struct:\n    def __init__(self, **entries):\n        self.__dict__.update(entries)\n&gt;&gt;&gt; args = {'a': 1, 'b': 2}\n&gt;&gt;&gt; s = Struct(**args)\n&gt;&gt;&gt; s\n&lt;__main__.Struct instance at 0x01D6A738&gt;\n&gt;&gt;&gt; s.a\n1\n&gt;&gt;&gt; s.b\n2\n"}, {"idx": "webquery-test-6", "doc": "What is the maximum recursion depth in Python, and how to increase it?", "code": "sys.getrecursionlimitimport sys\nprint(sys.getrecursionlimit())\nsys.setrecursionlimitsys.setrecursionlimit(1500)\n"}, {"idx": "webquery-test-7", "doc": "How can I get a value from a cell of a dataframe?", "code": "In [3]: sub_df\nOut[3]:\n          A         B\n2 -0.133653 -0.030854\n\nIn [4]: sub_df.iloc[0]\nOut[4]:\nA   -0.133653\nB   -0.030854\nName: 2, dtype: float64\n\nIn [5]: sub_df.iloc[0]['A']\nOut[5]: -0.13365288513107493\n"}, {"idx": "webquery-test-8", "doc": "Return JSON response from Flask view", "code": "jsonify@app.route(\"/summary\")\ndef summary():\n    d = make_summary()\n    return d\njsonifyfrom flask import jsonify\n\n@app.route(\"/summary\")\ndef summary():\n    d = make_summary()\n    return jsonify(d)\n"}, {"idx": "webquery-test-9", "doc": "Rename a dictionary key", "code": "mydict[k_new] = mydict.pop(k_old)\nk_new22&gt;&gt;&gt; d = {0:0, 1:1, 2:2, 3:3}\n&gt;&gt;&gt; {\"two\" if k == 2 else k:v for k,v in d.items()}\n{0: 0, 1: 1, 'two': 2, 3: 3}\nOrderedDictOrderedDict((k_new if k == k_old else k, v) for k, v in od.items())\n"}, {"idx": "webquery-test-10", "doc": "How can I find script's directory?", "code": "os.path.realpathos.path.realpathos.path.realpathimport os\nprint(os.path.dirname(os.path.realpath(__file__)))\n"}, {"idx": "webquery-test-11", "doc": "Differences between distribute, distutils, setuptools and distutils2?", "code": "setuptoolssetuptoolssetuptoolssetuptoolssetuptoolssetuptoolssetuptoolssetuptoolssetuptoolssetuptoolssetuptoolssetuptoolssetuptoolssetuptoolssetuptoolssetuptoolssetuptoolssetuptoolsdistutilsdistutilsdistutilsdistutilsdistutilsdistutilsdistutilsdistutilsdistutilsdistutilsdistutilsdistutilsdistutilsdistutilsdistutilsdistributedistributedistributedistributesetuptoolssetuptoolssetuptoolsvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenv"}, {"idx": "webquery-test-12", "doc": "What does -1 mean in numpy reshape?", "code": "z = np.array([[1, 2, 3, 4],\n         [5, 6, 7, 8],\n         [9, 10, 11, 12]])\nz.shape\n(3, 4)\nz.reshape(-1)\narray([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12])\nz.reshape(-1,1)\narray([[ 1],\n   [ 2],\n   [ 3],\n   [ 4],\n   [ 5],\n   [ 6],\n   [ 7],\n   [ 8],\n   [ 9],\n   [10],\n   [11],\n   [12]])\nnumpynumpyarray.reshape(-1, 1)z.reshape(-1, 2)\narray([[ 1,  2],\n   [ 3,  4],\n   [ 5,  6],\n   [ 7,  8],\n   [ 9, 10],\n   [11, 12]])\nz.reshape(1,-1)\narray([[ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12]])\nnumpynumpyarray.reshape(1, -1)z.reshape(2, -1)\narray([[ 1,  2,  3,  4,  5,  6],\n   [ 7,  8,  9, 10, 11, 12]])\nz.reshape(3, -1)\narray([[ 1,  2,  3,  4],\n   [ 5,  6,  7,  8],\n   [ 9, 10, 11, 12]])\nz.reshape(-1, -1)\nValueError: can only specify one unknown dimension\n"}, {"idx": "webquery-test-1", "doc": "Python \"extend\" for a dictionary", "code": "a.update(b)\n"}, {"idx": "webquery-test-2", "doc": "Python exit commands - why so many and when should each be used?", "code": "quit()quit()quit()quit()quit()quit()quit()quit()quit()quit()quit()quit()quit()quit()quit()quit()quit()quit()quit()quit()sys.exitsys.exitraise SystemExit\nsys"}, {"idx": "webquery-test-3", "doc": "Where does pip install its packages?", "code": "pip show &lt;package name&gt;&gt; pip show cvxopt\nName: cvxopt\nVersion: 1.2.0\n...\nLocation: /usr/local/lib/python2.7/site-packages\n"}, {"idx": "webquery-test-4", "doc": "How to extract numbers from a string in Python?", "code": "&gt;&gt;&gt; import re\n&gt;&gt;&gt; re.findall(r'\\d+', \"hello 42 I'm a 32 string 30\")\n['42', '32', '30']\nbla42bla&gt;&gt;&gt; re.findall(r'\\b\\d+\\b', \"he33llo 42 I'm a 32 string 30\")\n['42', '32', '30']\n&gt;&gt;&gt; [int(s) for s in re.findall(r'\\b\\d+\\b', \"he33llo 42 I'm a 32 string 30\")]\n[42, 32, 30]\n"}, {"idx": "webquery-test-5", "doc": "How do I split a string into a list of words?", "code": "sentencesentencewords = sentence.split()\n"}, {"idx": "webquery-test-6", "doc": "if else in a list comprehension", "code": "&gt;&gt;&gt; xs = [22, 13, 45, 50, 98, 69, 43, 44, 1]\n&gt;&gt;&gt; [x+1 if x &gt;= 45 else x+5 for x in xs]\n[27, 18, 46, 51, 99, 70, 48, 49, 6]\n&lt;condition&gt;"}, {"idx": "webquery-test-7", "doc": "How can I use pickle to save a dict (or any other Python object)?", "code": "import pickle\n\na = {'hello': 'world'}\n\nwith open('filename.pickle', 'wb') as handle:\n    pickle.dump(a, handle, protocol=pickle.HIGHEST_PROTOCOL)\n\nwith open('filename.pickle', 'rb') as handle:\n    b = pickle.load(handle)\n\nprint(a == b)\ndictimport datetime\ntoday = datetime.datetime.now()\na = [{'hello': 'world'}, 1, 2.3333, 4, True, \"x\", \n     (\"y\", [[[\"z\"], \"y\"], \"x\"]), {'today', today}]\nTrue"}, {"idx": "webquery-test-8", "doc": "How do I access the ith column of a NumPy multidimensional array?", "code": "&gt;&gt;&gt; test[:, 0]\narray([1, 3, 5])\n&gt;&gt;&gt; test[0, :]\narray([1, 2])\n"}, {"idx": "webquery-test-9", "doc": "How to rename a file using Python", "code": "os.renameimport os\n\nos.rename('a.txt', 'b.kml')\nos.rename('from.extension.whatever','to.another.extension')\n"}, {"idx": "webquery-test-10", "doc": "Finding what methods a Python object has", "code": "object_methods = [method_name for method_name in dir(object)\n                  if callable(getattr(object, method_name))]\nAttributeErrorgetattr()import pandas as pd\ndf = pd.DataFrame([[10, 20, 30], [100, 200, 300]],\n                  columns=['foo', 'bar', 'baz'])\ndef get_methods(object, spacing=20):\n  methodList = []\n  for method_name in dir(object):\n    try:\n        if callable(getattr(object, method_name)):\n            methodList.append(str(method_name))\n    except Exception:\n        methodList.append(str(method_name))\n  processFunc = (lambda s: ' '.join(s.split())) or (lambda s: s)\n  for method in methodList:\n    try:\n        print(str(method.ljust(spacing)) + ' ' +\n              processFunc(str(getattr(object, method).__doc__)[0:90]))\n    except Exception:\n        print(method.ljust(spacing) + ' ' + ' getattr() failed')\n\nget_methods(df['foo'])\n"}, {"idx": "webquery-test-11", "doc": "Alphabet range in Python", "code": "&gt;&gt;&gt; import string\n&gt;&gt;&gt; string.ascii_lowercase\n'abcdefghijklmnopqrstuvwxyz'\n&gt;&gt;&gt; list(string.ascii_lowercase)\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nrange&gt;&gt;&gt; list(map(chr, range(97, 123)))\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n&gt;&gt;&gt; list(map(chr, range(ord('a'), ord('z')+1)))\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nstring&gt;&gt;&gt; help(string)\n....\nDATA\n    ascii_letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    ascii_lowercase = 'abcdefghijklmnopqrstuvwxyz'\n    ascii_uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    digits = '0123456789'\n    hexdigits = '0123456789abcdefABCDEF'\n    octdigits = '01234567'\n    printable = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&amp;\\'()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~ \\t\\n\\r\\x0b\\x0c'\n    punctuation = '!\"#$%&amp;\\'()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~'\n    whitespace = ' \\t\\n\\r\\x0b\\x0c'\n"}, {"idx": "webquery-test-12", "doc": "Get HTML source of WebElement in Selenium WebDriver using Python", "code": "innerHTMLinnerHTMLelement.get_attribute('innerHTML')\nelem.getAttribute(\"innerHTML\");\nelement.GetAttribute(\"innerHTML\");\nelement.attribute(\"innerHTML\")\nelement.getAttribute('innerHTML');\n$element-&gt;getAttribute('innerHTML');\nChromeDriver"}, {"idx": "webquery-test-13", "doc": "How to get a random number between a float range?", "code": "&gt;&gt;&gt; import random\n&gt;&gt;&gt; random.uniform(1.5, 1.9)\n1.8733202628557872\n"}, {"idx": "webquery-test-14", "doc": "How to use StringIO in Python3?", "code": "StringIOStringIOStringIOStringIOStringIOtry:\n    from StringIO import StringIO ## for Python 2\nexcept ImportError:\n    from io import StringIO ## for Python 3\nStringIOStringIO"}, {"idx": "webquery-test-15", "doc": "How to set the y-axis limit", "code": "plt.gca()ax = plt.gca()\nax.set_xlim([xmin, xmax])\nax.set_ylim([ymin, ymax])\n"}, {"idx": "webquery-test-16", "doc": "mysql_config not found when installing mysqldb python interface", "code": "sudo apt-get install mysql-server\nsudo apt-get install libmysqlclient-dev\nsudo apt-get install libmariadbclient-dev\n"}, {"idx": "webquery-test-17", "doc": "Is there a simple way to remove multiple spaces in a string?", "code": "&gt;&gt;&gt; import re\n&gt;&gt;&gt; re.sub(' +', ' ', 'The     quick brown    fox')\n'The quick brown fox'\n"}, {"idx": "webquery-test-18", "doc": "Split string on whitespace in Python", "code": "str.split()&gt;&gt;&gt; \"many   fancy word \\nhello    \\thi\".split()\n['many', 'fancy', 'word', 'hello', 'hi']\n"}, {"idx": "webquery-test-19", "doc": "How to replace NaN values by Zeroes in a column of a Pandas Dataframe?", "code": "DataFrame.fillna()In [7]: df\nOut[7]: \n          0         1\n0       NaN       NaN\n1 -0.494375  0.570994\n2       NaN       NaN\n3  1.876360 -0.229738\n4       NaN       NaN\n\nIn [8]: df.fillna(0)\nOut[8]: \n          0         1\n0  0.000000  0.000000\n1 -0.494375  0.570994\n2  0.000000  0.000000\n3  1.876360 -0.229738\n4  0.000000  0.000000\nIn [12]: df[1].fillna(0, inplace=True)\nOut[12]: \n0    0.000000\n1    0.570994\n2    0.000000\n3   -0.229738\n4    0.000000\nName: 1\n\nIn [13]: df\nOut[13]: \n          0         1\n0       NaN  0.000000\n1 -0.494375  0.570994\n2       NaN  0.000000\n3  1.876360 -0.229738\n4       NaN  0.000000\nSettingWithCopyWarningdf.fillna({1:0}, inplace=True)\n"}, {"idx": "webquery-test-1", "doc": "How to retrieve an element from a set without removing it?", "code": "for e in s:\n    break\n# e is now an element from s\ne = next(iter(s))\n"}, {"idx": "webquery-test-2", "doc": "What is the common header format of Python files?", "code": "Foobardocstring#!/usr/bin/env python#!/usr/bin/env python#!/usr/bin/env python#!/usr/bin/env python#!/usr/bin/env python#!/usr/bin/env python#!/usr/bin/env python__author____author____author____author____author____author____author____author__"}, {"idx": "webquery-test-3", "doc": "SQLAlchemy: What's the difference between flush() and commit()?", "code": "session.add()session.add()session.flush()session.flush()session.commit()flush()flush()autoflush#---\ns = Session()\n\ns.add(Foo('A')) # The Foo('A') object has been added to the session.\n                # It has not been committed to the database yet,\n                #   but is returned as part of a query.\nprint 1, s.query(Foo).all()\ns.commit()\n\n#---\ns2 = Session()\ns2.autoflush = False\n\ns2.add(Foo('B'))\nprint 2, s2.query(Foo).all() # The Foo('B') object is *not* returned\n                             #   as part of this query because it hasn't\n                             #   been flushed yet.\ns2.flush()                   # Now, Foo('B') is in the same state as\n                             #   Foo('A') was above.\nprint 3, s2.query(Foo).all() \ns2.rollback()                # Foo('B') has not been committed, and rolling\n                             #   back the session's transaction removes it\n                             #   from the session.\nprint 4, s2.query(Foo).all()\n\n#---\nOutput:\n1 [&lt;Foo('A')&gt;]\n2 [&lt;Foo('A')&gt;]\n3 [&lt;Foo('A')&gt;, &lt;Foo('B')&gt;]\n4 [&lt;Foo('A')&gt;]\n"}, {"idx": "webquery-test-4", "doc": "Is there a NumPy function to return the first index of something in an array?", "code": "arrayarrayarrayitemindex = numpy.where(array == item)\narray[itemindex[0][0]][itemindex[1][0]]\narray[itemindex[0][1]][itemindex[1][1]]\n"}, {"idx": "webquery-test-5", "doc": "SQLAlchemy ORDER BY DESCENDING?", "code": ".order_by(model.Entry.amount.desc())\nimport"}, {"idx": "webquery-test-6", "doc": "Directory-tree listing in Python", "code": "import os\n\nfor dirname, dirnames, filenames in os.walk('.'):\n    # print path to all subdirectories first.\n    for subdirname in dirnames:\n        print(os.path.join(dirname, subdirname))\n\n    # print path to all filenames.\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n    # Advanced usage:\n    # editing the 'dirnames' list will stop os.walk() from recursing into there.\n    if '.git' in dirnames:\n        # don't go into any .git directories.\n        dirnames.remove('.git')\n"}, {"idx": "webquery-test-7", "doc": "Python: Checking if a 'Dictionary' is empty doesn't seem to work", "code": "False&gt;&gt;&gt; dct = {}\n&gt;&gt;&gt; bool(dct)\nFalse\n&gt;&gt;&gt; not dct\nTrue\n&gt;&gt;&gt;\nisEmptydef onMessage(self, socket, message):\n    if not self.users:\n        socket.send(\"Nobody is online, please use REGISTER command\" \\\n                    \" in order to register into the server\")\n    else:\n        socket.send(\"ONLINE \" + ' ' .join(self.users.keys()))\n"}, {"idx": "webquery-test-8", "doc": "String comparison in Python: is vs. ==", "code": "isis====isif x == True:\n    # do something\nif x:\n    # do something\nNoneNoneNone"}, {"idx": "webquery-test-9", "doc": "Python Pandas Error tokenizing data", "code": "data = pd.read_csv('file1.csv', on_bad_lines='skip')\ndata = pd.read_csv(\"file1.csv\", error_bad_lines=False)\n"}, {"idx": "webquery-test-10", "doc": "Separation of business logic and data access in django", "code": "def activate_user(user_id):\n    user = User.objects.get(pk=user_id)\n\n    # set active flag\n    user.active = True\n    user.save()\n\n    # mail user\n    send_mail(...)\n\n    # etc etc\nclass ActivateUserForm(forms.Form):\n\n    user_id = IntegerField(widget = UsernameSelectWidget, verbose_name=\"Select a user to activate\")\n    # the username select widget is not a standard Django widget, I just made it up\n\n    def clean_user_id(self):\n        user_id = self.cleaned_data['user_id']\n        if User.objects.get(pk=user_id).active:\n            raise ValidationError(\"This user cannot be activated\")\n        # you can also check authorizations etc. \n        return user_id\n\n    def execute(self):\n        \"\"\"\n        This is not a standard method in the forms API; it is intended to replace the \n        'extract-data-from-form-in-view-and-do-stuff' pattern by a more testable pattern. \n        \"\"\"\n        user_id = self.cleaned_data['user_id']\n\n        user = User.objects.get(pk=user_id)\n\n        # set active flag\n        user.active = True\n        user.save()\n\n        # mail user\n        send_mail(...)\n\n        # etc etc\nUser.objects.filter(active=True)\n&lt;h1&gt;Welcome, {{ user|friendly_name }}&lt;/h1&gt;\n@register.filter\ndef friendly_name(user):\n    return remote_api.get_cached_name(user.id)\ndef inactive_users():\n    return User.objects.filter(active=False)\n\n\ndef users_called_publysher():\n    for user in User.objects.all():\n        if remote_api.get_cached_name(user.id) == \"publysher\":\n            yield user \nManager.get_queryset()class InactiveUserManager(models.Manager):\n    def get_queryset(self):\n        query_set = super(InactiveUserManager, self).get_queryset()\n        return query_set.filter(active=False)\n\nclass InactiveUser(User):\n    \"\"\"\n    &gt;&gt;&gt; for user in InactiveUser.objects.all():\n    \u2026        assert user.active is False \n    \"\"\"\n\n    objects = InactiveUserManager()\n    class Meta:\n        proxy = True\nclass InactiveUserDistribution(models.Model):\n    country = CharField(max_length=200)\n    inactive_user_count = IntegerField(default=0)\nclass ActivateUserForm(forms.Form):\n    # see above\n   \n    def execute(self):\n        # see above\n        query_model = InactiveUserDistribution.objects.get_or_create(country=user.country)\n        query_model.inactive_user_count -= 1\n        query_model.save()\nuser_activated = Signal(providing_args = ['user'])\nuser_deactivated = Signal(providing_args = ['user'])\nclass ActivateUserForm(forms.Form):\n    # see above\n   \n    def execute(self):\n        # see above\n        user_activated.send_robust(sender=self, user=user)\nclass InactiveUserDistribution(models.Model):\n    # see above\n\n@receiver(user_activated)\ndef on_user_activated(sender, **kwargs):\n        user = kwargs['user']\n        query_model = InactiveUserDistribution.objects.get_or_create(country=user.country)\n        query_model.inactive_user_count -= 1\n        query_model.save()\n    \n"}, {"idx": "webquery-test-11", "doc": "How to read a file without newlines?", "code": "str.splitlinestemp = file.read().splitlines()\ntemp = [line[:-1] for line in file]\nwith open(the_file, 'r+') as f:\n    f.seek(-1, 2)  # go at the end of the file\n    if f.read(1) != '\\n':\n        # add missing newline if not already present\n        f.write('\\n')\n        f.flush()\n        f.seek(0)\n    lines = [line[:-1] for line in f]\nstrip[line.rstrip('\\n') for line in file]\n[line[:-(line[-1] == '\\n') or len(line)+1] for line in file]\norreadlinesdef readlines(self):\n    lines = []\n    for line in iter(self.readline, ''):\n        lines.append(line)\n    return lines\n\n# or equivalently\n\ndef readlines(self):\n    lines = []\n    while True:\n        line = self.readline()\n        if not line:\n            break\n        lines.append(line)\n    return lines\nreadline()readline()readlines()readlines()readlines()readlines()readlines()"}, {"idx": "webquery-test-12", "doc": "Is it worth using Python's re.compile?", "code": "re.match()re.match()def match(pattern, string, flags=0):\n    return _compile(pattern, flags).match(string)\n\ndef _compile(*key):\n\n    # Does cache check at top of function\n    cachekey = (type(key[0]),) + key\n    p = _cache.get(cachekey)\n    if p is not None: return p\n\n    # ...\n    # Does actual compilation on cache miss\n    # ...\n\n    # Caches compiled regex\n    if len(_cache) &gt;= _MAXCACHE:\n        _cache.clear()\n    _cache[cachekey] = p\n    return p\n"}, {"idx": "webquery-test-13", "doc": "A non-blocking read on a subprocess.PIPE in Python", "code": "fcntlfcntlfcntlQueue.get_nowait()import sys\nfrom subprocess import PIPE, Popen\nfrom threading  import Thread\n\ntry:\n    from queue import Queue, Empty\nexcept ImportError:\n    from Queue import Queue, Empty  # python 2.x\n\nON_POSIX = 'posix' in sys.builtin_module_names\n\ndef enqueue_output(out, queue):\n    for line in iter(out.readline, b''):\n        queue.put(line)\n    out.close()\n\np = Popen(['myprogram.exe'], stdout=PIPE, bufsize=1, close_fds=ON_POSIX)\nq = Queue()\nt = Thread(target=enqueue_output, args=(p.stdout, q))\nt.daemon = True # thread dies with the program\nt.start()\n\n# ... do other things here\n\n# read line without blocking\ntry:  line = q.get_nowait() # or q.get(timeout=.1)\nexcept Empty:\n    print('no output yet')\nelse: # got line\n    # ... do something with line\n"}, {"idx": "webquery-test-14", "doc": "How to read a large file - line by line?", "code": "with open(...) as f:\n    for line in f:\n        # Do something with 'line'\nwithwithwith"}, {"idx": "webquery-test-15", "doc": "Calling C/C++ from Python?", "code": "#include &lt;iostream&gt;\n\nclass Foo{\n    public:\n        void bar(){\n            std::cout &lt;&lt; \"Hello\" &lt;&lt; std::endl;\n        }\n};\nextern \"C\" {\n    Foo* Foo_new(){ return new Foo(); }\n    void Foo_bar(Foo* foo){ foo-&gt;bar(); }\n}\ng++ -c -fPIC foo.cpp -o foo.o\ng++ -shared -Wl,-soname,libfoo.so -o libfoo.so  foo.o\nfrom ctypes import cdll\nlib = cdll.LoadLibrary('./libfoo.so')\n\nclass Foo(object):\n    def __init__(self):\n        self.obj = lib.Foo_new()\n\n    def bar(self):\n        lib.Foo_bar(self.obj)\nf = Foo()\nf.bar() #and you will see \"Hello\" on the screen\n"}, {"idx": "webquery-test-1", "doc": "Is there a short contains function for lists?", "code": "if my_item in some_list:\n    ...\nif my_item not in some_list:\n    ...\n"}, {"idx": "webquery-test-2", "doc": "Removing Conda environment", "code": "conda deactivateconda deactivateconda env remove -n ENV_NAME\n--name--name-p /path/to/env-p /path/to/envconda activate"}, {"idx": "webquery-test-3", "doc": "How do I count the occurrence of a certain item in an ndarray?", "code": "numpy.uniqueimport numpy\na = numpy.array([0, 3, 0, 1, 0, 1, 2, 1, 0, 0, 0, 0, 1, 3, 4])\nunique, counts = numpy.unique(a, return_counts=True)\n\n&gt;&gt;&gt; dict(zip(unique, counts))\n{0: 7, 1: 4, 2: 1, 3: 2, 4: 1}\ncollections.Counterimport collections, numpy\na = numpy.array([0, 3, 0, 1, 0, 1, 2, 1, 0, 0, 0, 0, 1, 3, 4])\ncounter = collections.Counter(a)\n\n&gt;&gt;&gt; counter\nCounter({0: 7, 1: 4, 3: 2, 2: 1, 4: 1})\n"}, {"idx": "webquery-test-4", "doc": "Get name of current script in Python", "code": "__file__os.path.basename(__file__)"}, {"idx": "webquery-test-5", "doc": "How to delete rows from a pandas DataFrame based on a conditional expression", "code": "df = df.drop(some labels)\ndf = df.drop(df[&lt;some boolean condition&gt;].index)\ndf = df.drop(df[df.score &lt; 50].index)\ndf.drop(df[df.score &lt; 50].index, inplace=True)\n||||||df = df.drop(df[(df.score &lt; 50) &amp; (df.score &gt; 20)].index)\n"}, {"idx": "webquery-test-6", "doc": "How do I find the location of Python module sources?", "code": "themodule.__file__themodule.__file__themodule.__file__Python-2.6/Modules/datetimemodule.c\n"}, {"idx": "webquery-test-7", "doc": "Adding days to a date in Python", "code": "import datetime\ndatetime.timedeltadate_1 = datetime.datetime.strptime(start_date, \"%m/%d/%y\")\n\nend_date = date_1 + datetime.timedelta(days=10)\n"}, {"idx": "webquery-test-8", "doc": "Sorting list based on values from another list", "code": "[x for _, x in sorted(zip(Y, X))]\nX = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]\nY = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]\n\nZ = [x for _,x in sorted(zip(Y,X))]\nprint(Z)  # [\"a\", \"d\", \"h\", \"b\", \"c\", \"e\", \"i\", \"f\", \"g\"]\n[x for _, x in sorted(zip(Y, X), key=lambda pair: pair[0])]\nzipzipzipzipzipzipkeykey"}, {"idx": "webquery-test-9", "doc": "Printing Python version in output", "code": "import sys\nprint(sys.version)\n"}, {"idx": "webquery-test-10", "doc": "How to check whether a pandas DataFrame is empty?", "code": "df.emptyif df.empty:\n    print('DataFrame is empty!')\n"}, {"idx": "webquery-test-11", "doc": "How do I correctly clean up a Python object?", "code": "withwithwithwithdef __enter__(self)\ndef __exit__(self, exc_type, exc_value, traceback)\nclass Package:\n    def __init__(self):\n        self.files = []\n\n    def __enter__(self):\n        return self\n\n    # ...\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        for file in self.files:\n            os.unlink(file)\nwith Package() as package_obj:\n    # use package_obj\n__enter____enter__withwithwithwithwithclass PackageResource:\n    def __enter__(self):\n        class Package:\n            ...\n        self.package_obj = Package()\n        return self.package_obj\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.package_obj.cleanup()\nwith PackageResource() as package_obj:\n    # use package_obj\n"}, {"idx": "webquery-test-12", "doc": "What does the argument mean in fig.add_subplot(111)?", "code": "import matplotlib.pyplot as plt\nfig = plt.figure()\nfig.add_subplot(221)   #top left\nfig.add_subplot(222)   #top right\nfig.add_subplot(223)   #bottom left\nfig.add_subplot(224)   #bottom right \nplt.show()\n"}, {"idx": "webquery-test-13", "doc": "Download large file in python with requests", "code": "def download_file(url):\n    local_filename = url.split('/')[-1]\n    # NOTE the stream=True parameter below\n    with requests.get(url, stream=True) as r:\n        r.raise_for_status()\n        with open(local_filename, 'wb') as f:\n            for chunk in r.iter_content(chunk_size=8192): \n                # If you have chunk encoded response uncomment if\n                # and set chunk_size parameter to None.\n                #if chunk: \n                f.write(chunk)\n    return local_filename\niter_contentiter_content"}, {"idx": "webquery-test-14", "doc": "How to get the return value from a thread in Python?", "code": "def foo(bar, result, index):\n    print 'hello {0}'.format(bar)\n    result[index] = \"foo\"\n\nfrom threading import Thread\n\nthreads = [None] * 10\nresults = [None] * 10\n\nfor i in range(len(threads)):\n    threads[i] = Thread(target=foo, args=('world!', results, i))\n    threads[i].start()\n\n# do some other stuff\n\nfor i in range(len(threads)):\n    threads[i].join()\n\nprint \" \".join(results)  # what sound does a metasyntactic locomotive make?\njoin()join()from threading import Thread\n\ndef foo(bar):\n    print 'hello {0}'.format(bar)\n    return \"foo\"\n\nclass ThreadWithReturnValue(Thread):\n    def __init__(self, group=None, target=None, name=None,\n                 args=(), kwargs={}, Verbose=None):\n        Thread.__init__(self, group, target, name, args, kwargs, Verbose)\n        self._return = None\n    def run(self):\n        if self._Thread__target is not None:\n            self._return = self._Thread__target(*self._Thread__args,\n                                                **self._Thread__kwargs)\n    def join(self):\n        Thread.join(self)\n        return self._return\n\ntwrv = ThreadWithReturnValue(target=foo, args=('world!',))\n\ntwrv.start()\nprint twrv.join()   # prints foo\nThreadclass ThreadWithReturnValue(Thread):\n    \n    def __init__(self, group=None, target=None, name=None,\n                 args=(), kwargs={}, Verbose=None):\n        Thread.__init__(self, group, target, name, args, kwargs)\n        self._return = None\n\n    def run(self):\n        if self._target is not None:\n            self._return = self._target(*self._args,\n                                                **self._kwargs)\n    def join(self, *args):\n        Thread.join(self, *args)\n        return self._return\n"}, {"idx": "webquery-test-15", "doc": "How do I change the figure size with subplots?", "code": "fig.set_figheight(15)\nfig.set_figwidth(15)\n.subplots().subplots()fig, axs = plt.subplots(2, 2, figsize=(15, 15))\n"}, {"idx": "webquery-test-1", "doc": "Proper indentation for multiline strings?", "code": "\"\"\"def foo():\n    string = \"\"\"line one\n             line two\n             line three\"\"\"\ndef foo():\n    string = (\"this is an \"\n              \"implicitly joined \"\n              \"string\")\ntextwrapdef trim(docstring):\n    if not docstring:\n        return ''\n    # Convert tabs to spaces (following the normal Python rules)\n    # and split into a list of lines:\n    lines = docstring.expandtabs().splitlines()\n    # Determine minimum indentation (first line doesn't count):\n    indent = sys.maxint\n    for line in lines[1:]:\n        stripped = line.lstrip()\n        if stripped:\n            indent = min(indent, len(line) - len(stripped))\n    # Remove indentation (first line is special):\n    trimmed = [lines[0].strip()]\n    if indent &lt; sys.maxint:\n        for line in lines[1:]:\n            trimmed.append(line[indent:].rstrip())\n    # Strip off trailing and leading blank lines:\n    while trimmed and not trimmed[-1]:\n        trimmed.pop()\n    while trimmed and not trimmed[0]:\n        trimmed.pop(0)\n    # Return a single string:\n    return '\\n'.join(trimmed)\n"}, {"idx": "webquery-test-2", "doc": "How can I pivot a dataframe?", "code": "ValueError: Index contains duplicate entries, cannot reshapecolumnscolumnscolumnscolumnscolumnsdf.duplicated(['row', 'col']).any()\n\nTrue\npivotdf.pivot(index='row', columns='col', values='val0')\ndf.set_index(['row', 'col'])['val0'].unstack()\npd.DataFrame.groupbypd.DataFrame.groupbypd.DataFrame.groupbypd.DataFrame.groupbypd.DataFrame.groupbypd.DataFrame.groupbypd.DataFrame.groupbypd.DataFrame.groupbypd.DataFrame.groupbypd.DataFrame.groupbypd.DataFrame.groupbypd.DataFrame.groupbypd.DataFrame.groupbypd.DataFrame.groupbypd.DataFrame.groupbypd.DataFrame.groupbypd.DataFrame.groupbypd.DataFrame.groupbypd.DataFrame.groupbypd.DataFrame.groupbypd.DataFrame.groupbypd.DataFrame.pivot_tabledfdfdfdfdfpd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablemeanmeanpd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepivot_tablepivot_tablepivot_tablepivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tablepd.DataFrame.pivot_tableDataFrame.pivotDataFrame.pivotDataFrame.pivotDataFrame.pivotDataFrame.pivotDataFrame.pivotDataFrame.pivotDataFrame.pivotDataFrame.pivotDataFrame.pivotDataFrame.pivotpivotcolumnscolumnscolumnsdf.columns = df.columns.map('|'.join)\nformatdf.columns = df.columns.map('{0[0]}|{0[1]}'.format)\n"}, {"idx": "webquery-test-3", "doc": "pandas create new column based on values from other columns / apply a function of multiple columns, row-wise", "code": "def label_race (row):\n   if row['eri_hispanic'] == 1 :\n      return 'Hispanic'\n   if row['eri_afr_amer'] + row['eri_asian'] + row['eri_hawaiian'] + row['eri_nat_amer'] + row['eri_white'] &gt; 1 :\n      return 'Two Or More'\n   if row['eri_nat_amer'] == 1 :\n      return 'A/I AK Native'\n   if row['eri_asian'] == 1:\n      return 'Asian'\n   if row['eri_afr_amer']  == 1:\n      return 'Black/AA'\n   if row['eri_hawaiian'] == 1:\n      return 'Haw/Pac Isl.'\n   if row['eri_white'] == 1:\n      return 'White'\n   return 'Other'\ndf.apply (lambda row: label_race(row), axis=1)\n0           White\n1        Hispanic\n2           White\n3           White\n4           Other\n5           White\n6     Two Or More\n7           White\n8    Haw/Pac Isl.\n9           White\ndf['race_label'] = df.apply (lambda row: label_race(row), axis=1)\n      lname   fname rno_cd  eri_afr_amer  eri_asian  eri_hawaiian   eri_hispanic  eri_nat_amer  eri_white rno_defined    race_label\n0      MOST    JEFF      E             0          0             0              0             0          1       White         White\n1    CRUISE     TOM      E             0          0             0              1             0          0       White      Hispanic\n2      DEPP  JOHNNY    NaN             0          0             0              0             0          1     Unknown         White\n3     DICAP     LEO    NaN             0          0             0              0             0          1     Unknown         White\n4    BRANDO  MARLON      E             0          0             0              0             0          0       White         Other\n5     HANKS     TOM    NaN             0          0             0              0             0          1     Unknown         White\n6    DENIRO  ROBERT      E             0          1             0              0             0          1       White   Two Or More\n7    PACINO      AL      E             0          0             0              0             0          1       White         White\n8  WILLIAMS   ROBIN      E             0          0             1              0             0          0       White  Haw/Pac Isl.\n9  EASTWOOD   CLINT      E             0          0             0              0             0          1       White         White\n"}, {"idx": "webquery-test-4", "doc": "How can I get the named parameters from a URL using Flask?", "code": "request.argsfrom flask import request\n\n@app.route(...)\ndef login():\n    username = request.args.get('username')\n    password = request.args.get('password')\n"}, {"idx": "webquery-test-5", "doc": "logger configuration to log to file and print to stdout", "code": "StreamHandlerStreamHandlerStreamHandlerimport logging\nlogging.getLogger().addHandler(logging.StreamHandler())\nstdoutstdoutstdoutimport sys\n# ...\nlogging.getLogger().addHandler(logging.StreamHandler(sys.stdout))\nFormatterimport logging\nlogFormatter = logging.Formatter(\"%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s\")\nrootLogger = logging.getLogger()\n\nfileHandler = logging.FileHandler(\"{0}/{1}.log\".format(logPath, fileName))\nfileHandler.setFormatter(logFormatter)\nrootLogger.addHandler(fileHandler)\n\nconsoleHandler = logging.StreamHandler()\nconsoleHandler.setFormatter(logFormatter)\nrootLogger.addHandler(consoleHandler)\n2012-12-05 16:58:26,618 [MainThread  ] [INFO ]  my message\n"}, {"idx": "webquery-test-6", "doc": "Find full path of the Python interpreter?", "code": "sys.executableimport sys\n\nprint(sys.executable)\n"}, {"idx": "webquery-test-7", "doc": "Iterating each character in a string using Python", "code": "for c in \"string\":\n    #do something with c\nfor loopopen(\"file.txt\")with open(filename) as f:\n    for line in f:\n        # do something with line\nfornext()next()next()next()"}, {"idx": "webquery-test-8", "doc": "Filter dataframe rows if value in column is in a set list of values", "code": "isinrpt[rpt['STK_ID'].isin(stk_list)]"}, {"idx": "webquery-test-9", "doc": "How do I translate an ISO 8601 datetime string into a Python datetime object?", "code": "ISO 8601ISO 8601ISO 8601from dateutil import parser\nyourdate = parser.parse(datestring)\n"}, {"idx": "webquery-test-10", "doc": "How do I calculate the date six months from the current date using the datetime Python module?", "code": "from datetime import date\nfrom dateutil.relativedelta import relativedelta\n\nsix_months = date.today() + relativedelta(months=+6)\n$ date(2010,12,31)+relativedelta(months=+1)\n  datetime.date(2011, 1, 31)\n\n$ date(2010,12,31)+relativedelta(months=+2)\n  datetime.date(2011, 2, 28)\n"}, {"idx": "webquery-test-11", "doc": "How to find all occurrences of an element in a list", "code": "enumerateindices = [i for i, x in enumerate(my_list) if x == \"whatever\"]\nenumerate(my_list)enumerate(my_list)enumerate(my_list)enumerate(my_list)enumerate(my_list)enumerate(my_list)enumerate(my_list)"}, {"idx": "webquery-test-12", "doc": "Get all object attributes in Python?", "code": "dir()"}, {"idx": "webquery-test-13", "doc": "Where do the Python unit tests go?", "code": "module.pymodule.pytest_module.pymodule.pymodule.pymodule.pytest_test_test_"}, {"idx": "webquery-test-14", "doc": "Change the name of a key in dictionary", "code": "dictionary[new_key] = dictionary[old_key]\ndel dictionary[old_key]\ndictionary[new_key] = dictionary.pop(old_key)\nKeyErrorKeyErrorKeyError&gt;&gt;&gt; dictionary = { 1: 'one', 2:'two', 3:'three' }\n&gt;&gt;&gt; dictionary['ONE'] = dictionary.pop(1)\n&gt;&gt;&gt; dictionary\n{2: 'two', 3: 'three', 'ONE': 'one'}\n&gt;&gt;&gt; dictionary['ONE'] = dictionary.pop(1)\nTraceback (most recent call last):\n  File \"&lt;input&gt;\", line 1, in &lt;module&gt;\nKeyError: 1\n"}, {"idx": "webquery-test-15", "doc": "Remove all the elements that occur in one list from another", "code": "l3l3 = [x for x in l1 if x not in l2]\nl3l3"}, {"idx": "webquery-test-16", "doc": "Writing unit tests in Python: How do I start?", "code": "py.testpy.testimport unittest\n\nclass LearningCase(unittest.TestCase):\n    def test_starting_out(self):\n        self.assertEqual(1, 1)\n\ndef main():\n    unittest.main()\n\nif __name__ == \"__main__\":\n    main()\ndef test_starting_out():\n    assert 1 == 1\ntest_unittesting.pycd /path/to/dir/\npython test_unittesting.py\ncd /path/to/dir/\npy.test\n"}, {"idx": "webquery-test-17", "doc": "Which version of Python do I have installed?", "code": "python -V\n--version"}, {"idx": "webquery-test-18", "doc": "Selecting a row of pandas series/dataframe by integer index", "code": ".iloc.ilocIn [1]: df = pd.DataFrame(np.random.rand(5,2),index=range(0,10,2),columns=list('AB'))\n\nIn [2]: df\nOut[2]: \n          A         B\n0  1.068932 -0.794307\n2 -0.470056  1.192211\n4 -0.284561  0.756029\n6  1.037563 -0.267820\n8 -0.538478 -0.800654\n\nIn [5]: df.iloc[[2]]\nOut[5]: \n          A         B\n4 -0.284561  0.756029\n\nIn [6]: df.loc[[2]]\nOut[6]: \n          A         B\n2 -0.470056  1.192211\n[]"}, {"idx": "webquery-test-1", "doc": "Creating a range of dates in Python", "code": "base = datetime.datetime.today()\ndate_list = [base - datetime.timedelta(days=x) for x in range(numdays)]\n"}, {"idx": "webquery-test-2", "doc": "What are iterator, iterable, and iteration?", "code": "__iter____iter____iter__nextnextforforfor"}, {"idx": "webquery-test-3", "doc": "how to sort pandas dataframe from one column", "code": "sort_valuesIn [18]:\ndf.sort_values('2')\n\nOut[18]:\n        0          1     2\n4    85.6    January   1.0\n3    95.5   February   2.0\n7   104.8      March   3.0\n0   354.7      April   4.0\n8   283.5        May   5.0\n6   238.7       June   6.0\n5   152.0       July   7.0\n1    55.4     August   8.0\n11  212.7  September   9.0\n10  249.6    October  10.0\n9   278.8   November  11.0\n2   176.5   December  12.0\nsort_valuessort_valuessort_valuessort_valuessort_values"}, {"idx": "webquery-test-4", "doc": "How to check if a column exists in Pandas", "code": "if 'A' in df:\nif 'A' in df.columns:\n"}, {"idx": "webquery-test-5", "doc": "Remap values in pandas column with a dict, preserve NaNs", "code": ".replace&gt;&gt;&gt; df = pd.DataFrame({'col2': {0: 'a', 1: 2, 2: np.nan}, 'col1': {0: 'w', 1: 1, 2: 2}})\n&gt;&gt;&gt; di = {1: \"A\", 2: \"B\"}\n&gt;&gt;&gt; df\n  col1 col2\n0    w    a\n1    1    2\n2    2  NaN\n&gt;&gt;&gt; df.replace({\"col1\": di})\n  col1 col2\n0    w    a\n1    A    2\n2    B  NaN\nSeriesSeries"}, {"idx": "webquery-test-6", "doc": "How do I create a list with numbers between two values?", "code": "range&gt;&gt;&gt; range(11, 17)\n[11, 12, 13, 14, 15, 16]\nrange&gt;&gt;&gt; list(range(11, 17))\n[11, 12, 13, 14, 15, 16]\nrange(start, stop)range(start, stop)0.50.50.5&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; np.arange(11, 17, 0.5).tolist()\n\n[11.0, 11.5, 12.0, 12.5, 13.0, 13.5,\n 14.0, 14.5, 15.0, 15.5, 16.0, 16.5]\n"}, {"idx": "webquery-test-7", "doc": "How do I read CSV data into a record array in NumPy?", "code": "numpy.genfromtxt()numpy.genfromtxt()from numpy import genfromtxt\nmy_data = genfromtxt('my_file.csv', delimiter=',')\n"}, {"idx": "webquery-test-8", "doc": "Python: How to ignore an exception and proceed?", "code": "except Exception:\n    pass\n"}, {"idx": "webquery-test-9", "doc": "Why do some functions have underscores \"__\" before and after the function name?", "code": "_single_leading_underscore_single_leading_underscore_single_leading_underscore_single_leading_underscore_single_leading_underscore_single_leading_underscore_single_leading_underscore_single_leading_underscore_single_leading_underscore_single_leading_underscore_single_leading_underscore"}, {"idx": "webquery-test-10", "doc": "Difference between __getattr__ and __getattribute__", "code": "__getattr____getattr____getattr____getattribute__objectobjectobject__getattr__"}, {"idx": "webquery-test-11", "doc": "Plot logarithmic axes", "code": "Axes.set_yscaleAxes.set_yscaleax.set_yscale('log')\n'linear'import pylab\nimport matplotlib.pyplot as plt\na = [pow(10, i) for i in range(10)]\nfig = plt.figure()\nax = fig.add_subplot(2, 1, 1)\n\nline, = ax.plot(a, color='blue', lw=2)\n\nax.set_yscale('log')\n\npylab.show()\n"}, {"idx": "webquery-test-12", "doc": "Creating a new dictionary in Python", "code": "dictnew_dict = dict()\nnew_dict = {}\n"}, {"idx": "webquery-test-13", "doc": "return, return None, and no return at all?", "code": "Nonereturn NoneNoneNoneNonepersonpersonpersonpersonpersonpersondef get_mother(person):\n    if is_human(person):\n        return person.mother\n    else:\n        return None\nreturnbreakprisonersprisonersprisonersprisonersprisonersprisonersdef find_prisoner_with_knife(prisoners):\n    for prisoner in prisoners:\n        if \"knife\" in prisoner.items:\n            prisoner.move_to_inquisition()\n            return # no need to check rest of the prisoners nor raise an alert\n    raise_alert()\nvar = find_prisoner_with_knife()returnNoneNoneNonedef set_mother(person, mother):\n    if is_human(person):\n        person.mother = mother\nvar = set_mother(my_person, my_mother)"}, {"idx": "webquery-test-1", "doc": "beyond top level package error in relative import", "code": "python -m test_A.testpython -m test_A.testpython -m test_A.testpython -m test_A.testpython -m test_A.testpython -m test_A.testpython -m test_A.testpython -m test_A.testpython -m test_A.testpython -m test_A.testpython -m package.test_A.testpython -m package.test_A.testpython -m package.test_A.test"}, {"idx": "webquery-test-2", "doc": "Read .mat files in Python", "code": "import scipy.ioimport scipy.io\nmat = scipy.io.loadmat('file.mat')\n"}, {"idx": "webquery-test-3", "doc": "Reimport a module while interactive", "code": "import importlib\nimportlib.reload(nameOfModule)\nreload(my.module)\nfrom ... import ...from ... import ...from ... import ...from ... import ...from ... import ..."}, {"idx": "webquery-test-4", "doc": "Explaining Python's '__enter__' and '__exit__'", "code": "__enter____enter____enter__try-finallyclass DatabaseConnection(object):\n\n    def __enter__(self):\n        # make a database connection and return it\n        ...\n        return self.dbconn\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        # make sure the dbconnection gets closed\n        self.dbconn.close()\n        ...\nwithwithwith DatabaseConnection() as mydbconn:\n    # do stuff\n"}, {"idx": "webquery-test-5", "doc": "Sort a list of tuples by 2nd item (integer value)", "code": "keykeysorted([('abc', 121),('abc', 231),('abc', 148), ('abc',221)], \n       key=lambda x: x[1])\nkeykeyitemgetter(1)itemgetter(1)"}, {"idx": "webquery-test-6", "doc": "Expanding tuples into arguments", "code": "myfun(*some_tuple)myfun(*some_tuple)"}, {"idx": "webquery-test-7", "doc": "Deep copy of a dict in python", "code": "import copy\nd = { ... }\nd2 = copy.deepcopy(d)\nPython 3.2 (r32:88445, Feb 20 2011, 21:30:00) [MSC v.1500 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import copy\n&gt;&gt;&gt; my_dict = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n&gt;&gt;&gt; my_copy = copy.deepcopy(my_dict)\n&gt;&gt;&gt; my_dict['a'][2] = 7\n&gt;&gt;&gt; my_copy['a'][2]\n3\n&gt;&gt;&gt;\n"}, {"idx": "webquery-test-8", "doc": "Python string.replace regular expression", "code": "str.replace()re.sub()import re\n\nline = re.sub(\n           r\"(?i)^.*interfaceOpDataFile.*$\", \n           \"interfaceOpDataFile %s\" % fileIn, \n           line\n       )\nimport re\n\nregex = re.compile(r\"^.*interfaceOpDataFile.*$\", re.IGNORECASE)\nfor line in some_file:\n    line = regex.sub(\"interfaceOpDataFile %s\" % fileIn, line)\n    # do something with the updated line\n"}, {"idx": "webquery-test-9", "doc": "How to write inline if statement for print?", "code": "ififififififprint aprint aprint aprint a if b else 0\nprint (a if b else 0)\nx = a if b else 0\nx = (a if b else 0)\nelseif"}, {"idx": "webquery-test-10", "doc": "Elegant ways to support equivalence (\"equality\") in Python classes", "code": "class Number:\n\n    def __init__(self, number):\n        self.number = number\n\n\nn1 = Number(1)\nn2 = Number(1)\n\nn1 == n2 # False -- oops\nid(n1) # 140400634555856\nid(n2) # 140400634555920\n__eq__def __eq__(self, other):\n    \"\"\"Overrides the default implementation\"\"\"\n    if isinstance(other, Number):\n        return self.number == other.number\n    return False\n\n\nn1 == n2 # True\nn1 != n2 # True in Python 2 -- oops, False in Python 3\n__ne__x==yx==yx==yx==ydef __ne__(self, other):\n    \"\"\"Overrides the default implementation (unnecessary in Python 3)\"\"\"\n    return not self.__eq__(other)\n\n\nn1 == n2 # True\nn1 != n2 # False\n__ne__()__ne__()__ne__()__ne__()__ne__()class SubNumber(Number):\n    pass\n\n\nn3 = SubNumber(1)\n\nn1 == n3 # False for classic-style classes -- oops, True for new-style classes\nn3 == n1 # True\nn1 != n3 # True for classic-style classes -- oops, False for new-style classes\nn3 != n1 # False\nobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectobjectNumbern1 == n3n1 == n3n1 == n3n1 == n3n1 == n3n1 == n3n1 == n3n1 == n3Numbern1 == n3n1 == n3n1 == n3n1 == n3n1 == n3n1 == n3============__lt__()__lt__()__lt__()__lt__()__lt__()__lt__()def __eq__(self, other):\n    \"\"\"Overrides the default implementation\"\"\"\n    if isinstance(other, Number):\n        return self.number == other.number\n    return NotImplemented\n\ndef __ne__(self, other):\n    \"\"\"Overrides the default implementation (unnecessary in Python 3)\"\"\"\n    x = self.__eq__(other)\n    if x is NotImplemented:\n        return NotImplemented\n    return not x\nNotImplementedNotImplementedNotImplementedNotImplementedlen(set([n1, n2, n3])) # 3 -- oops\ndef __hash__(self):\n    \"\"\"Overrides the default implementation\"\"\"\n    return hash(tuple(sorted(self.__dict__.items())))\n\nlen(set([n1, n2, n3])) # 1\nclass Number:\n\n    def __init__(self, number):\n        self.number = number\n\n    def __eq__(self, other):\n        \"\"\"Overrides the default implementation\"\"\"\n        if isinstance(other, Number):\n            return self.number == other.number\n        return NotImplemented\n\n    def __ne__(self, other):\n        \"\"\"Overrides the default implementation (unnecessary in Python 3)\"\"\"\n        x = self.__eq__(other)\n        if x is not NotImplemented:\n            return not x\n        return NotImplemented\n\n    def __hash__(self):\n        \"\"\"Overrides the default implementation\"\"\"\n        return hash(tuple(sorted(self.__dict__.items())))\n\n\nclass SubNumber(Number):\n    pass\n\n\nn1 = Number(1)\nn2 = Number(1)\nn3 = SubNumber(1)\nn4 = SubNumber(4)\n\nassert n1 == n2\nassert n2 == n1\nassert not n1 != n2\nassert not n2 != n1\n\nassert n1 == n3\nassert n3 == n1\nassert not n1 != n3\nassert not n3 != n1\n\nassert not n1 == n4\nassert not n4 == n1\nassert n1 != n4\nassert n4 != n1\n\nassert len(set([n1, n2, n3, ])) == 1\nassert len(set([n1, n2, n3, n4])) == 2\n"}, {"idx": "webquery-test-11", "doc": "Append values to a set in Python", "code": "your_set.update(your_sequence_of_values)\nyour_set.update([1, 2, 3, 4])for value in ...:\n    your_set.add(value)\n.update"}, {"idx": "webquery-test-12", "doc": "How do I remove a substring from the end of a string?", "code": "stripstripstripstripremoveprefixremoveprefixurl = 'abcdc.com'\nurl.removesuffix('.com')    # Returns 'abcdc'\nurl.removeprefix('abcdc.')  # Returns 'com'\nendswithurl = 'abcdc.com'\nif url.endswith('.com'):\n    url = url[:-4]\nimport re\nurl = 'abcdc.com'\nurl = re.sub('\\.com$', '', url)\n"}, {"idx": "webquery-test-13", "doc": "How do I determine if my python shell is executing in 32bit or 64bit?", "code": "sys.maxsize$ python-32 -c 'import sys;print(\"%x\" % sys.maxsize, sys.maxsize &gt; 2**32)'\n('7fffffff', False)\n$ python-64 -c 'import sys;print(\"%x\" % sys.maxsize, sys.maxsize &gt; 2**32)'\n('7fffffffffffffff', True)\npython -c \"import sys;print(\\\"%x\\\" % sys.maxsize, sys.maxsize &gt; 2**32)\"\nsys.maxsize$ python-32 -c 'import struct;print( 8 * struct.calcsize(\"P\"))'\n32\n$ python-64 -c 'import struct;print( 8 * struct.calcsize(\"P\"))'\n64\nplatform.architecture()$ arch -x86_64 /usr/bin/python2.6 -c 'import sys,platform; print platform.architecture()[0], sys.maxsize &gt; 2**32'\n64bit True\n$ arch -i386 /usr/bin/python2.6 -c 'import sys,platform; print platform.architecture()[0], sys.maxsize &gt; 2**32'\n64bit False\n"}, {"idx": "webquery-test-14", "doc": "Get list from pandas dataframe column or row?", "code": "x.tolist()x.tolist()import pandas as pd\n\ndata_dict = {'one': pd.Series([1, 2, 3], index=['a', 'b', 'c']),\n             'two': pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}\n\ndf = pd.DataFrame(data_dict)\n\nprint(f\"DataFrame:\\n{df}\\n\")\nprint(f\"column types:\\n{df.dtypes}\")\n\ncol_one_list = df['one'].tolist()\n\ncol_one_arr = df['one'].to_numpy()\n\nprint(f\"\\ncol_one_list:\\n{col_one_list}\\ntype:{type(col_one_list)}\")\nprint(f\"\\ncol_one_arr:\\n{col_one_arr}\\ntype:{type(col_one_arr)}\")\nDataFrame:\n   one  two\na  1.0    1\nb  2.0    2\nc  3.0    3\nd  NaN    4\n\ncolumn types:\none    float64\ntwo      int64\ndtype: object\n\ncol_one_list:\n[1.0, 2.0, 3.0, nan]\ntype:&lt;class 'list'&gt;\n\ncol_one_arr:\n[ 1.  2.  3. nan]\ntype:&lt;class 'numpy.ndarray'&gt;\n"}, {"idx": "webquery-test-15", "doc": "Append a dictionary to a dictionary", "code": "orig.update(extra)\norigdest = dict(orig)  # or orig.copy()\ndest.update(extra)\n&gt;&gt;&gt; d1 = {1: 1, 2: 2}\n&gt;&gt;&gt; d2 = {2: 'ha!', 3: 3}\n&gt;&gt;&gt; d1.update(d2)\n&gt;&gt;&gt; d1\n{1: 1, 2: 'ha!', 3: 3}\n"}, {"idx": "webquery-test-16", "doc": "Determine if variable is defined in Python", "code": "try:\n    thevariable\nexcept NameError:\n    print(\"well, it WASN'T defined after all!\")\nelse:\n    print(\"sure, it was defined.\")\n"}, {"idx": "webquery-test-17", "doc": "Installation Issue with matplotlib Python", "code": "~/.matplotlib~/.matplotlib~/.matplotlib"}, {"idx": "webquery-test-1", "doc": "How to select all columns except one in pandas?", "code": "df.columnsdf.loc[:, df.columns != 'b']\n\n          a         c         d\n0  0.561196  0.013768  0.772827\n1  0.882641  0.615396  0.075381\n2  0.368824  0.651378  0.397203\n3  0.788730  0.568099  0.869127\n"}, {"idx": "webquery-test-2", "doc": "Run function from the command line", "code": "-c-c$ python -c 'import foo; print foo.hello()'\n$ python -c 'from foo import *; print hello()'\n$ python -c 'from foo import hello; print hello()'\n"}, {"idx": "webquery-test-3", "doc": "How do I create variable variables?", "code": "&gt;&gt;&gt; dct = {'x': 1, 'y': 2, 'z': 3}\n&gt;&gt;&gt; dct\n{'y': 2, 'x': 1, 'z': 3}\n&gt;&gt;&gt; dct[\"y\"]\n2\n&gt;&gt;&gt; x = \"spam\"\n&gt;&gt;&gt; z = {x: \"eggs\"}\n&gt;&gt;&gt; z[\"spam\"]\n'eggs'\nvar1 = 'foo'\nvar2 = 'bar'\nvar3 = 'baz'\n...\nlst = ['foo', 'bar', 'baz']\nprint(lst[1])           # prints bar, because indices start at 0\nlst.append('potatoes')  # lst is now ['foo', 'bar', 'baz', 'potatoes']\nappend"}, {"idx": "webquery-test-4", "doc": "Changing one character in a string", "code": "&gt;&gt;&gt; s = list(\"Hello zorld\")\n&gt;&gt;&gt; s\n['H', 'e', 'l', 'l', 'o', ' ', 'z', 'o', 'r', 'l', 'd']\n&gt;&gt;&gt; s[6] = 'W'\n&gt;&gt;&gt; s\n['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']\n&gt;&gt;&gt; \"\".join(s)\n'Hello World'\n"}, {"idx": "webquery-test-5", "doc": "Pandas read_csv: low_memory and dtype options", "code": "low_memorylow_memorydtype={'user_id': int}\npd.read_csv()\"foobar\"\"foobar\"import pandas as pd\ntry:\n    from StringIO import StringIO\nexcept ImportError:\n    from io import StringIO\n\n\ncsvdata = \"\"\"user_id,username\n1,Alice\n3,Bob\nfoobar,Caesar\"\"\"\nsio = StringIO(csvdata)\npd.read_csv(sio, dtype={\"user_id\": int, \"username\": \"string\"})\n\nValueError: invalid literal for long() with base 10: 'foobar'\n'datetime64[ns, &lt;tz&gt;]'.strdtype=objectdtype=unicodedtype=unicodedtype=unicode'foobar''foobar'"}, {"idx": "webquery-test-6", "doc": "Difference between exit() and sys.exit() in Python", "code": "exitexitsitesitesiteSystemExitSystemExitstatic PyObject *\nsys_exit(PyObject *self, PyObject *args)\n{\n    PyObject *exit_code = 0;\n    if (!PyArg_UnpackTuple(args, \"exit\", 0, 1, &amp;exit_code))\n        return NULL;\n    /* Raise SystemExit so callers may catch it or clean up. */\n    PyErr_SetObject(PyExc_SystemExit, exit_code);\n   return NULL;\n}\nexitclass Quitter(object):\n    def __init__(self, name):\n        self.name = name\n    def __repr__(self):\n        return 'Use %s() or %s to exit' % (self.name, eof)\n    def __call__(self, code=None):\n        # Shells like IDLE catch the SystemExit, but listen when their\n        # stdin wrapper is closed.\n        try:\n            sys.stdin.close()\n        except:\n            pass\n        raise SystemExit(code)\n__builtin__.quit = Quitter('quit')\n__builtin__.exit = Quitter('exit')\nfork()"}, {"idx": "webquery-test-7", "doc": "Is it possible to use pip to install a package from a private GitHub repository?", "code": "git+sshgit+sshpip install git+ssh://git@github.com/echweb/echweb-utils.git\npip install -e URI#egg=EggName\n::::$ git remote -v\norigin  git@github.com:echweb/echweb-utils.git (fetch)\n#                     ^ change this to a '/' character\nssh: Could not resolve hostname github.com:echweb:\n         nodename nor servname provided, or not known\n"}, {"idx": "webquery-test-8", "doc": "Should import statements always be at the top of a module?", "code": "__init__.py__init__.py"}, {"idx": "webquery-test-9", "doc": "How do I create test and train samples from one dataframe with pandas?", "code": "train_test_splitfrom sklearn.model_selection import train_test_split\n\ntrain, test = train_test_split(df, test_size=0.2)\n"}, {"idx": "webquery-test-10", "doc": "Reloading submodules in IPython", "code": "%load_ext autoreload\n%autoreload 2\ndreloaddreload~/.ipython/profile_default/ipython_config.pyc.InteractiveShellApp.extensions = ['autoreload']     \nc.InteractiveShellApp.exec_lines = ['%autoreload 2']\n~/.ipython/profile_default/ipython_config.py~/.ipython/profile_default/ipython_config.py~/.ipython/profile_default/ipython_config.py"}, {"idx": "webquery-test-11", "doc": "How do I get the parent directory in Python?", "code": "pathlibfrom pathlib import Path\npath = Path(\"/here/your/path/file.txt\")\nprint(path.parent.absolute())\nimport os\nprint os.path.abspath(os.path.join(yourpath, os.pardir))\nyourpath"}, {"idx": "webquery-test-12", "doc": "Get the last 4 characters of a string", "code": "&gt;&gt;&gt; mystr = \"abcdefghijkl\"\n&gt;&gt;&gt; mystr[-4:]\n'ijkl'\n[:-4]&gt;&gt;&gt; mystr[:-4]\n'abcdefgh'\n"}, {"idx": "webquery-test-13", "doc": "How can I use the apply() function for a single column?", "code": "df   a  b\n0  1  2\n1  2  3\n2  3  4\n3  4  5\ndf['a'] = df['a'].apply(lambda x: x + 1)\n   a  b\n0  2  2\n1  3  3\n2  4  4\n3  5  5\n"}, {"idx": "webquery-test-14", "doc": "What is the python \"with\" statement designed for?", "code": "withwithwithwithwithwithwithwithwithwithwithwithwithwithwithwithwithwith"}, {"idx": "webquery-test-15", "doc": "How can I compare two lists in python and return matches", "code": "&gt;&gt;&gt; a = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; b = [9, 8, 7, 6, 5]\n&gt;&gt;&gt; set(a) &amp; set(b)\n{5}\n&gt;&gt;&gt; [i for i, j in zip(a, b) if i == j]\n[5]\n"}, {"idx": "webquery-test-16", "doc": "Case insensitive regular expression without re.compile?", "code": "re.IGNORECASEre.IGNORECASEre.IGNORECASEre.IGNORECASEre.IGNORECASEre.search('test', 'TeSt', re.IGNORECASE)\nre.match('test', 'TeSt', re.IGNORECASE)\nre.sub('test', 'xxxx', 'Testing', flags=re.IGNORECASE)\n"}, {"idx": "webquery-test-1", "doc": "Remove all occurrences of a value from a list?", "code": "&gt;&gt;&gt; x = [1,2,3,2,2,2,3,4]\n&gt;&gt;&gt; list(filter((2).__ne__, x))\n[1, 3, 3, 4]\n&gt;&gt;&gt; x = [1,2,3,2,2,2,3,4]\n&gt;&gt;&gt; list(filter(lambda a: a != 2, x))\n[1, 3, 3, 4]\n&gt;&gt;&gt; x = [1,2,3,2,2,2,3,4]\n&gt;&gt;&gt; filter(lambda a: a != 2, x)\n[1, 3, 3, 4]\n"}, {"idx": "webquery-test-2", "doc": "How to extract the substring between two markers?", "code": "import re\n\ntext = 'gfgfdAAA1234ZZZuijjk'\n\nm = re.search('AAA(.+?)ZZZ', text)\nif m:\n    found = m.group(1)\n\n# found: 1234\nimport re\n\ntext = 'gfgfdAAA1234ZZZuijjk'\n\ntry:\n    found = re.search('AAA(.+?)ZZZ', text).group(1)\nexcept AttributeError:\n    # AAA, ZZZ not found in the original string\n    found = '' # apply your error handling\n\n# found: 1234\n"}, {"idx": "webquery-test-3", "doc": "Why does \"not(True) in [False, True]\" return False?", "code": "notnot&gt;&gt;&gt; not ((True) in [False, True])\nFalse\n&gt;&gt;&gt; (not True) in [False, True]\nTrue\nnot(True)not(True)not(True)"}, {"idx": "webquery-test-4", "doc": "What is the difference between \"is None\" and \"== None\"", "code": "is None"}, {"idx": "webquery-test-5", "doc": "What is the reason for having '//' in Python?", "code": "///&gt;&gt;&gt; 10/3\n3\n&gt;&gt;&gt; # To get a floating point number from integer division:\n&gt;&gt;&gt; 10.0/3\n3.3333333333333335\n&gt;&gt;&gt; float(10)/3\n3.3333333333333335\n&gt;&gt;&gt; 10/3\n3.3333333333333335\n&gt;&gt;&gt; 10//3\n3\n"}, {"idx": "webquery-test-6", "doc": "How to compare two dates?", "code": "datetimedatetime&gt;&gt;&gt; from datetime import datetime, timedelta\n&gt;&gt;&gt; past = datetime.now() - timedelta(days=1)\n&gt;&gt;&gt; present = datetime.now()\n&gt;&gt;&gt; past &lt; present\nTrue\n&gt;&gt;&gt; datetime(3000, 1, 1) &lt; present\nFalse\n&gt;&gt;&gt; present - datetime(2000, 4, 4)\ndatetime.timedelta(4242, 75703, 762105)\n"}, {"idx": "webquery-test-7", "doc": "Improve subplot size/spacing with many subplots", "code": "matplotlib.pyplot.tight_layoutmatplotlib.pyplot.tight_layoutimport matplotlib.pyplot as plt\n\nfig, axes = plt.subplots(nrows=4, ncols=4, figsize=(8, 8))\nfig.tight_layout() # Or equivalently,  \"plt.tight_layout()\"\n\nplt.show()\n"}, {"idx": "webquery-test-8", "doc": "What is the standard way to add N seconds to datetime.time in Python?", "code": "datetimedatetimedatetimeimport datetime\na = datetime.datetime(100,1,1,11,34,59)\nb = a + datetime.timedelta(0,3) # days, seconds, then other fields.\nprint(a.time())\nprint(b.time())\n11:34:59\n11:35:02\nb = a + datetime.timedelta(seconds=3)\naddSecsimport datetime\n\ndef addSecs(tm, secs):\n    fulldate = datetime.datetime(100, 1, 1, tm.hour, tm.minute, tm.second)\n    fulldate = fulldate + datetime.timedelta(seconds=secs)\n    return fulldate.time()\n\na = datetime.datetime.now().time()\nb = addSecs(a, 300)\nprint(a)\nprint(b)\n 09:11:55.775695\n 09:16:55\n"}, {"idx": "webquery-test-9", "doc": "The difference between sys.stdout.write and print?", "code": "printprintprint &gt;&gt; open('file.txt', 'w'), 'Hello', 'World', 2+3\nprintprintprintprint('Hello', 'World', 2+3, file=open('file.txt', 'w'))\nprintfrom __future__ import print_function\nprint \"something\", 1/0, \"other\" #prints only something because 1/0 raise an Exception\n\nprint(\"something\", 1/0, \"other\") #doesn't print anything. The function is not called\n"}, {"idx": "webquery-test-10", "doc": "List attributes of an object", "code": "&gt;&gt;&gt; class new_class():\n...   def __init__(self, number):\n...     self.multi = int(number) * 2\n...     self.str = str(number)\n... \n&gt;&gt;&gt; a = new_class(2)\n&gt;&gt;&gt; a.__dict__\n{'multi': 4, 'str': '2'}\n&gt;&gt;&gt; a.__dict__.keys()\ndict_keys(['multi', 'str'])\n"}, {"idx": "webquery-test-11", "doc": "Selecting/excluding sets of columns in pandas", "code": "# Using DataFrame.drop\ndf.drop(df.columns[[1, 2]], axis=1, inplace=True)\n\n# drop by Name\ndf1 = df1.drop(['B', 'C'], axis=1)\n\n# Select the ones you want\ndf1 = df[['a','d']]\n"}, {"idx": "webquery-test-12", "doc": "Get first row value of a given column", "code": "ithithIn [31]: df_test.iloc[0]\nOut[31]: \nATime     1.2\nX         2.0\nY        15.0\nZ         2.0\nBtime     1.2\nC        12.0\nD        25.0\nE        12.0\nName: 0, dtype: float64\nBtimeIn [30]: df_test['Btime'].iloc[0]\nOut[30]: 1.2\ndf_test['Btime'].iloc[0]df_test['Btime'].iloc[0]df_test.iloc[0]['Btime']df_test.iloc[0]['Btime']df_test['Btime'].iloc[0] = xdf_test['Btime'].iloc[0] = xdf_test['Btime'].iloc[0] = xdf.iloc[0, df.columns.get_loc('Btime')] = x\ndf.iloc[0, df.columns.get_loc('Btime')] = xdf.loc[df.index[n], 'Btime'] = x\ndf.iloc[n, df.columns.get_loc('Btime')] = x\ndf.locdf.locdf['Btime'].iloc[0] = xdf['Btime']df['Btime']df['Btime']df['Btime']SettingWithCopyWarningSettingWithCopyWarningIn [22]: df = pd.DataFrame({'foo':list('ABC')}, index=[0,2,1])\nIn [24]: df['bar'] = 100\nIn [25]: df['bar'].iloc[0] = 99\n/home/unutbu/data/binky/bin/ipython:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  self._setitem_with_indexer(indexer, value)\n\nIn [26]: df\nOut[26]: \n  foo  bar\n0   A   99  &lt;-- assignment succeeded\n2   B  100\n1   C  100\ndf.iloc[0]['Btime'] = xdf.iloc[0]['bar'] = 123df.iloc[0]['bar'] = 123In [66]: df.iloc[0]['bar'] = 123\n/home/unutbu/data/binky/bin/ipython:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n\nIn [67]: df\nOut[67]: \n  foo  bar\n0   A   99  &lt;-- assignment failed\n2   B  100\n1   C  100\ndf_test.ix[i, 'Btime']df_test.ix[i, 'Btime']df_test.ix[i, 'Btime']df_test.ix[i, 'Btime']df_test.ix[i, 'Btime']df_test.ix[i, 'Btime']In [1]: df = pd.DataFrame({'foo':list('ABC')}, index=[0,2,1])\n\nIn [2]: df\nOut[2]: \n  foo\n0   A\n2   B\n1   C\n\nIn [4]: df.ix[1, 'foo']\nOut[4]: 'C'\n"}, {"idx": "webquery-test-13", "doc": "What do the python file extensions, .pyc .pyd .pyo stand for?", "code": ".py.py.py.py.py.py.py.pyc.pyc__doc__.pyo.pyo"}, {"idx": "webquery-test-14", "doc": "Convert JSON string to dict using Python", "code": "json.loads()import json\n\nd = json.loads(j)\nprint d['glossary']['title']\n"}, {"idx": "webquery-test-15", "doc": "Why do we need the \"finally\" clause in Python?", "code": "try:\n    run_code1()\nexcept TypeError:\n    run_code2()\n    return None   # The finally block is run before the method returns\nfinally:\n    other_code()\ntry:\n    run_code1()\nexcept TypeError:\n    run_code2()\n    return None   \n\nother_code()  # This doesn't get run if there's an exception.\nrun_code1()run_code1()run_code1()run_code1()"}, {"idx": "webquery-test-16", "doc": "Rotate axis text in python matplotlib", "code": "plt.xticks(rotation=90)\n"}, {"idx": "webquery-test-17", "doc": "How to check if an object is a list or tuple (but not string)?", "code": "assert not isinstance(lst, basestring)\nlistlist"}, {"idx": "webquery-test-18", "doc": "Is there a way to perform \"if\" in python's lambda?", "code": "lambda x: True if x % 2 == 0 else False\nprintprint"}, {"idx": "webquery-test-1", "doc": "Sorting arrays in NumPy by column", "code": "aa[a[:, 1].argsort()]\n"}, {"idx": "webquery-test-2", "doc": "Python unittest - opposite of assertRaises?", "code": "def run_test(self):\n    try:\n        myFunc()\n    except ExceptionType:\n        self.fail(\"myFunc() raised ExceptionType unexpectedly!\")\n"}, {"idx": "webquery-test-3", "doc": "Python Pandas: Get index of rows where column matches certain value", "code": "df.iloc[i]df.iloc[i]df.iloc[i]df.iloc[i]df.iloc[i]indexdf.index[df['BoolCol'] == True].tolist()\ndf.index[df['BoolCol']].tolist()\ndf = pd.DataFrame({'BoolCol': [True, False, False, True, True]},\n       index=[10,20,30,40,50])\n\nIn [53]: df\nOut[53]: \n   BoolCol\n10    True\n20   False\n30   False\n40    True\n50    True\n\n[5 rows x 1 columns]\n\nIn [54]: df.index[df['BoolCol']].tolist()\nOut[54]: [10, 40, 50]\nIn [56]: idx = df.index[df['BoolCol']]\n\nIn [57]: idx\nOut[57]: Int64Index([10, 40, 50], dtype='int64')\nloclocIn [58]: df.loc[idx]\nOut[58]: \n   BoolCol\n10    True\n40    True\n50    True\n\n[3 rows x 1 columns]\nlocIn [55]: df.loc[df['BoolCol']]\nOut[55]: \n   BoolCol\n10    True\n40    True\n50    True\n\n[3 rows x 1 columns]\nmaskmaskIn [110]: np.flatnonzero(df['BoolCol'])\nOut[112]: array([0, 3, 4])\ndf.ilocIn [113]: df.iloc[np.flatnonzero(df['BoolCol'])]\nOut[113]: \n   BoolCol\n10    True\n40    True\n50    True\n"}, {"idx": "webquery-test-4", "doc": "How to sort a list of strings?", "code": "mylist = [\"b\", \"C\", \"A\"]\nmylist.sort()\nsorted()for x in sorted(mylist):\n    print x\nkeykeykeycmp_to_keysorted(mylist, key=cmp_to_key(locale.strcoll))\nimport locale\nlocale.setlocale(locale.LC_ALL, 'en_US.UTF-8') # vary depending on your lang/locale\nassert sorted((u'Ab', u'ad', u'aa'),\n  key=cmp_to_key(locale.strcoll)) == [u'aa', u'Ab', u'ad']\nlower()# this is incorrect!\nmylist.sort(key=lambda x: x.lower())\n# alternative notation, a bit faster, but still wrong\nmylist.sort(key=str.lower)\n"}, {"idx": "webquery-test-5", "doc": "Convert base-2 binary number string to int", "code": "int()int()&gt;&gt;&gt; int('11111111', 2)\n255\n"}, {"idx": "webquery-test-6", "doc": "How to change legend size with matplotlib.pyplot", "code": "propplot.legend(loc=2, prop={'size': 6})\nmatplotlib.font_manager.FontPropertiesprop: [ None | FontProperties | dict ]\n    A matplotlib.font_manager.FontProperties instance. If prop is a \n    dictionary, a new instance will be created with prop. If None, use\n    rc settings.\nfontsize"}, {"idx": "webquery-test-7", "doc": "Automatically creating directories with file output", "code": "\nimport os\n\nfilename = \"/foo/bar/baz.txt\"\nos.makedirs(os.path.dirname(filename), exist_ok=True)\nwith open(filename, \"w\") as f:\n    f.write(\"FOOBAR\")\n\nfrom pathlib import Path\noutput_file = Path(\"/foo/bar/baz.txt\")\noutput_file.parent.mkdir(exist_ok=True, parents=True)\noutput_file.write_text(\"FOOBAR\")\nos.makedirsimport os\nimport errno\n\nfilename = \"/foo/bar/baz.txt\"\nif not os.path.exists(os.path.dirname(filename)):\n    try:\n        os.makedirs(os.path.dirname(filename))\n    except OSError as exc: # Guard against race condition\n        if exc.errno != errno.EEXIST:\n            raise\n\nwith open(filename, \"w\") as f:\n    f.write(\"FOOBAR\")\n\ntry-excepttry-excepttry-except"}, {"idx": "webquery-test-8", "doc": "How do I execute a string containing Python code in Python?", "code": "exec(string)exec(string)&gt;&gt;&gt; mycode = 'print \"hello world\"'\n&gt;&gt;&gt; exec(mycode)\nHello world\neval(string)&gt;&gt;&gt; x = eval(\"2+2\")\n&gt;&gt;&gt; x\n4\n"}, {"idx": "webquery-test-9", "doc": "Hide all warnings in ipython", "code": "import warnings\nwarnings.filterwarnings('ignore')\n~/.ipython/profile_default/startup/disable-warnings.pywarnings.filterwarnings(action='once')\n"}, {"idx": "webquery-test-10", "doc": "How to set Python's default version to 3.x on OS X?", "code": "alias python='python3'alias python='python3'alias python='python3'alias python='python3'alias python='python3'[ -e ~/.profile ] &amp;&amp; . ~/.profile\npythonpythonpythonalias 2='python2'\nalias 3='python3'\n#!/usr/bin/env python\n#!/usr/bin/env python3\n"}, {"idx": "webquery-test-11", "doc": "How do I find out my PYTHONPATH using Python?", "code": "import sys\nprint(sys.path)\npython -c \"import sys; print('\\n'.join(sys.path))\"\npython2python2"}, {"idx": "webquery-test-12", "doc": "Find nearest value in numpy array", "code": "import numpy as np\ndef find_nearest(array, value):\n    array = np.asarray(array)\n    idx = (np.abs(array - value)).argmin()\n    return array[idx]\narray = np.random.random(10)\nprint(array)\n# [ 0.21069679  0.61290182  0.63425412  0.84635244  0.91599191  0.00213826\n#   0.17104965  0.56874386  0.57319379  0.28719469]\n\nprint(find_nearest(array, value=0.5))\n# 0.568743859261\n"}, {"idx": "webquery-test-13", "doc": "What are logits? What is the difference between softmax and softmax_cross_entropy_with_logits?", "code": "tf.nn.softmaxtf.nn.softmaxa = tf.constant(np.array([[.1, .3, .5, .9]]))\nprint s.run(tf.nn.softmax(a))\n[[ 0.16838508  0.205666    0.25120102  0.37474789]]\ntf.nn.softmax_cross_entropy_with_logitssm = tf.nn.softmax(x)\nce = cross_entropy(sm)\ntf.nn.softmax_cross_entropy_with_logitstf.nn.softmax_cross_entropy_with_logitstf.nn.softmax_cross_entropy_with_logitstf.nn.softmax_cross_entropy_with_logitstf.nn.sparse_softmax_cross_entropy_with_logits"}, {"idx": "webquery-test-1", "doc": "Should you always favor xrange() over range()?", "code": "xrange()xrange()range()range()range()range()range()range()range()range()range()range()range()RefactoringTool: Skipping implicit fixer: buffer\nRefactoringTool: Skipping implicit fixer: idioms\nRefactoringTool: Skipping implicit fixer: ws_comma\n--- range_test.py (original)\n+++ range_test.py (refactored)\n@@ -1,7 +1,7 @@\n\n for x in range(20):\n-    a=range(20)\n+    a=list(range(20))\n     b=list(range(20))\n     c=[x for x in range(20)]\n     d=(x for x in range(20))\n-    e=xrange(20)\n+    e=range(20)\n"}, {"idx": "webquery-test-2", "doc": "In pytest, what is the use of conftest.py files?", "code": "conftest.pyconftest.pyconftest.pyconftest.pyconftest.pyconftest.pyconftest.pyconftest.pyconftest.pyconftest.pydef pytest_runtest_setup(item):\n    print(\"I am mod\")\n    #do some stuff\n\n\ntest root/mod2/test.py will NOT produce \"I am mod\"\n@pytest.fixture()\ndef fixture():\n    return \"some stuff\"\n@pytest.fixture()\ndef fixture():\n    return \"some other stuff\"\ndef test(fixture):\n    print(fixture)\nconftest.pydef pytest_runtest_setup(item):\n    print(\"I am mod\")\n    #do some stuff\ndef pytest_runtest_setup(item):\n    print(\"I am root\")\n    #do some stuff\nroot/modconftest.pyconftest.pyconftest.py@pytest.fixture\ndef mock_redis():\n    return MockRedis()\npytest_plugin=\"helper.redis.redis\"\ndef test(mock_redis):\n    print(mock_redis.get('stuff'))\nredis.pyredis.pyredis.pyconftest.pyconftest.py@pytest.fixture\ndef mock_redis():\n    return MockRedis()\ndef test(mock_redis):\n    print(mock_redis.get(stuff))\nclass MockRedis():\n    # stuff\nfrom helper.redis import MockRedis\n\ndef test():\n    print(MockRedis().get(stuff))\n__init__.pyfrom .redis import MockRedis\nPYTHONPATH"}, {"idx": "webquery-test-3", "doc": "Can I get JSON to load into an OrderedDict?", "code": "object_pairs_hook&gt;&gt;&gt; json.JSONDecoder(object_pairs_hook=collections.OrderedDict).decode('{\"foo\":1, \"bar\": 2}')\nOrderedDict([('foo', 1), ('bar', 2)])\n&gt;&gt;&gt; \njson.loads&gt;&gt;&gt; import json\n&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; data = json.loads('{\"foo\":1, \"bar\": 2}', object_pairs_hook=OrderedDict)\n&gt;&gt;&gt; print json.dumps(data, indent=4)\n{\n    \"foo\": 1,\n    \"bar\": 2\n}\n&gt;&gt;&gt; \njson.load&gt;&gt;&gt; data = json.load(open('config.json'), object_pairs_hook=OrderedDict)\n"}, {"idx": "webquery-test-4", "doc": "How to format a floating number to fixed width in Python", "code": "numbers = [23.23, 0.1233, 1.0, 4.223, 9887.2]                                                                                                                                                   \n                                                                                                                                                                                                \nfor x in numbers:                                                                                                                                                                               \n    print(\"{:10.4f}\".format(x)) \n   23.2300\n    0.1233\n    1.0000\n    4.2230\n 9887.2000\nformat()format()format()format()format()format()"}, {"idx": "webquery-test-5", "doc": "Running Bash commands in Python", "code": "os.systemos.systemos.systemimport subprocess\n\nbashCommand = \"cwm --rdf test.rdf --ntriples &gt; test.nt\"\nprocess = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)\noutput, error = process.communicate()\n"}, {"idx": "webquery-test-6", "doc": "Reading JSON from a file", "code": "json.load()import json\n\nwith open('strings.json') as f:\n    d = json.load(f)\n    print(d)\njson.loads()json.loads"}, {"idx": "webquery-test-7", "doc": "Sorting columns in pandas dataframe based on column name", "code": "df = df.reindex(sorted(df.columns), axis=1)\n"}, {"idx": "webquery-test-8", "doc": "What's the difference between select_related and prefetch_related in Django ORM?", "code": "select_relatedselect_relatedselect_relatedselect_relatedselect_relatedselect_relatedselect_relatedclass ModelA(models.Model):\n    pass\n\nclass ModelB(models.Model):\n    a = ForeignKey(ModelA)\n\nModelB.objects.select_related('a').all() # Forward ForeignKey relationship\nModelA.objects.prefetch_related('modelb_set').all() # Reverse ForeignKey relationship\nselect_relatedselect_relatedselect_relatedselect_relatedselect_relatedprefetch_relatedprefetch_relatedprefetch_related"}, {"idx": "webquery-test-9", "doc": "How to input a regex in string.replace?", "code": "import re\nline = re.sub(r\"&lt;/?\\[\\d+&gt;\", \"\", line)\nline = re.sub(r\"\"\"\n  (?x) # Use free-spacing mode.\n  &lt;    # Match a literal '&lt;'\n  /?   # Optionally match a '/'\n  \\[   # Match a literal '['\n  \\d+  # Match one or more digits\n  &gt;    # Match a literal '&gt;'\n  \"\"\", \"\", line)\n"}, {"idx": "webquery-test-10", "doc": "How to save a Python interactive session?", "code": "%save%save%save%save current_session ~0/\n%save previous_session ~1/\n"}, {"idx": "webquery-test-11", "doc": "How to adjust padding with cutoff or overlapping labels", "code": "import matplotlib.pyplot as plt\n\nplt.gcf().subplots_adjust(bottom=0.15)\n\n# alternate option without .gcf\nplt.subplots_adjust(bottom=0.15)\nplt.gcf()plt.gcf()plt.gcf()matplotlibmatplotlibfig, axes = plt.subplots(ncols=2, nrows=2, figsize=(8, 6))\naxes = axes.flatten()\n\nfor ax in axes:\n    ax.set_ylabel(r'$\\ln\\left(\\frac{x_a-x_b}{x_a-x_c}\\right)$')\n    ax.set_xlabel(r'$\\ln\\left(\\frac{x_a-x_d}{x_a-x_e}\\right)$')\n\nplt.tight_layout()\nplt.show()\n"}, {"idx": "webquery-test-12", "doc": "Count the frequency that a value occurs in a dataframe column", "code": "value_counts()In [37]:\ndf = pd.DataFrame({'a':list('abssbab')})\ndf['a'].value_counts()\n\nOut[37]:\n\nb    3\na    2\ns    2\ndtype: int64\ngroupbygroupbyIn [38]:\ndf.groupby('a').count()\n\nOut[38]:\n\n   a\na   \na  2\nb  3\ns  2\n\n[3 rows x 1 columns]\ntransformIn [41]:\ndf['freq'] = df.groupby('a')['a'].transform('count')\ndf\n\nOut[41]:\n\n   a freq\n0  a    2\n1  b    3\n2  s    2\n3  s    2\n4  b    3\n5  a    2\n6  b    3\n\n[7 rows x 2 columns]\n"}, {"idx": "webquery-test-13", "doc": "Python date string to date object", "code": "strptimestrptime&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; datetime.datetime.strptime('24052010', \"%d%m%Y\").date()\ndatetime.date(2010, 5, 24)\n"}, {"idx": "webquery-test-14", "doc": "What does numpy.random.seed(0) do?", "code": "np.random.seed(0)&gt;&gt;&gt; numpy.random.seed(0) ; numpy.random.rand(4)\narray([ 0.55,  0.72,  0.6 ,  0.54])\n&gt;&gt;&gt; numpy.random.seed(0) ; numpy.random.rand(4)\narray([ 0.55,  0.72,  0.6 ,  0.54])\n&gt;&gt;&gt; numpy.random.rand(4)\narray([ 0.42,  0.65,  0.44,  0.89])\n&gt;&gt;&gt; numpy.random.rand(4)\narray([ 0.96,  0.38,  0.79,  0.53])\nnumpy.random.seed()numpy.random.seed()"}, {"idx": "webquery-test-1", "doc": "How to clear the interpreter console?", "code": "&gt;&gt;&gt; import os\n&gt;&gt;&gt; clear = lambda: os.system('cls')\n&gt;&gt;&gt; clear()\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; clear = lambda: os.system('clear')\n&gt;&gt;&gt; clear()\n"}, {"idx": "webquery-test-2", "doc": "How to add to the PYTHONPATH in Windows, so it finds my modules/packages?", "code": "My Computer &gt; Properties &gt; Advanced System Settings &gt; Environment Variables &gt;PythonPathPythonPath"}, {"idx": "webquery-test-3", "doc": "How to remove axis, legends, and white padding", "code": "axis('off')axis('off')axis('off')bbox_inches=0bbox_inches=0from numpy import random\nimport matplotlib.pyplot as plt\n\ndata = random.random((5,5))\nimg = plt.imshow(data, interpolation='nearest')\nimg.set_cmap('hot')\nplt.axis('off')\nplt.savefig(\"test.png\", bbox_inches='tight')\n"}, {"idx": "webquery-test-4", "doc": "How can I find all matches to a regular expression in Python?", "code": "re.findallre.findallre.findall(pattern, string)re.finditer(pattern, string)re.finditer(pattern, string)re.findall( r'all (.*?) are', 'all cats are smarter than dogs, all dogs are dumber than cats')\n# Output: ['cats', 'dogs']\n\n[x.group() for x in re.finditer( r'all (.*?) are', 'all cats are smarter than dogs, all dogs are dumber than cats')]\n# Output: ['all cats are', 'all dogs are']\n"}, {"idx": "webquery-test-5", "doc": "How to get current time in python and break up into year, month, day, hour, minute?", "code": "datetimeimport datetime\nnow = datetime.datetime.now()\nprint(now.year, now.month, now.day, now.hour, now.minute, now.second)\n# 2015 5 6 8 53 40\ndatetime"}, {"idx": "webquery-test-6", "doc": "How do I get a Cron like scheduler in Python?", "code": "import schedule\nimport time\n\ndef job():\n    print(\"I'm working...\")\n\nschedule.every(10).minutes.do(job)\nschedule.every().hour.do(job)\nschedule.every().day.at(\"10:30\").do(job)\n\nwhile 1:\n    schedule.run_pending()\n    time.sleep(1)\n"}, {"idx": "webquery-test-7", "doc": "What's the best practice using a settings file in Python?", "code": "truck = dict(\n    color = 'blue',\n    brand = 'ford',\n)\ncity = 'new york'\ncabriolet = dict(\n    color = 'black',\n    engine = dict(\n        cylinders = 8,\n        placement = 'mid',\n    ),\n    doors = 2,\n)\nimport config\nprint(config.truck['color'])  \n"}, {"idx": "webquery-test-8", "doc": "Remove xticks in a matplotlib plot?", "code": "plt.tick_paramsax.tick_paramsax.tick_paramsfrom matplotlib import pyplot as plt\nplt.plot(range(10))\nplt.tick_params(\n    axis='x',          # changes apply to the x-axis\n    which='both',      # both major and minor ticks are affected\n    bottom=False,      # ticks along the bottom edge are off\n    top=False,         # ticks along the top edge are off\n    labelbottom=False) # labels along the bottom edge are off\nplt.show()\nplt.savefig('plot')\nplt.clf()\n"}, {"idx": "webquery-test-9", "doc": "Passing a dictionary to a function as keyword parameters", "code": "d = dict(p1=1, p2=2)\ndef f2(p1,p2):\n    print p1, p2\nf2(**d)\n"}, {"idx": "webquery-test-10", "doc": "Splitting on first occurrence", "code": "str.split([<i>sep</i>[, <i>maxsplit</i>]])str.split([<i>sep</i>[, <i>maxsplit</i>]])s.split('mango', 1)[1]\n"}, {"idx": "webquery-test-11", "doc": "Python nonlocal statement / keyword", "code": "nonlocalx = 0\ndef outer():\n    x = 1\n    def inner():\n        x = 2\n        print(\"inner:\", x)\n\n    inner()\n    print(\"outer:\", x)\n\nouter()\nprint(\"global:\", x)\n\n# inner: 2\n# outer: 1\n# global: 0\nnonlocalnonlocalnonlocalnonlocalnonlocalx = 0\ndef outer():\n    x = 1\n    def inner():\n        nonlocal x\n        x = 2\n        print(\"inner:\", x)\n\n    inner()\n    print(\"outer:\", x)\n\nouter()\nprint(\"global:\", x)\n\n# inner: 2\n# outer: 2\n# global: 0\nglobalglobalx = 0\ndef outer():\n    x = 1\n    def inner():\n        global x\n        x = 2\n        print(\"inner:\", x)\n        \n    inner()\n    print(\"outer:\", x)\n\nouter()\nprint(\"global:\", x)\n\n# inner: 2\n# outer: 1\n# global: 2\n"}, {"idx": "webquery-test-12", "doc": "How do I detect the Python version at runtime?", "code": "sys.versionsys.versionimport sys\nif sys.version_info[0] &lt; 3:\n    raise Exception(\"Must be using Python 3\")\nsys.version_info[0]sys.version_info[0]sys.version_infosys.version_info"}, {"idx": "webquery-test-13", "doc": "How can I check the syntax of Python script without executing it?", "code": "python -m py_compile script.py\n"}, {"idx": "webquery-test-14", "doc": "How to change the figure size of a seaborn axes or figure level plot", "code": "rcrcrcimport seaborn as sns\n\nsns.set(rc={'figure.figsize':(11.7,8.27)})\nfigure.figsizefigure.figsizefrom matplotlib import rcParams\n\n# figure size in inches\nrcParams['figure.figsize'] = 11.7,8.27\n"}, {"idx": "webquery-test-1", "doc": "How do I get list of methods in a Python class?", "code": "optparse.OptionParser&gt;&gt;&gt; from optparse import OptionParser\n&gt;&gt;&gt; import inspect\n#python2\n&gt;&gt;&gt; inspect.getmembers(OptionParser, predicate=inspect.ismethod)\n[([('__init__', &lt;unbound method OptionParser.__init__&gt;),\n...\n ('add_option', &lt;unbound method OptionParser.add_option&gt;),\n ('add_option_group', &lt;unbound method OptionParser.add_option_group&gt;),\n ('add_options', &lt;unbound method OptionParser.add_options&gt;),\n ('check_values', &lt;unbound method OptionParser.check_values&gt;),\n ('destroy', &lt;unbound method OptionParser.destroy&gt;),\n ('disable_interspersed_args',\n  &lt;unbound method OptionParser.disable_interspersed_args&gt;),\n ('enable_interspersed_args',\n  &lt;unbound method OptionParser.enable_interspersed_args&gt;),\n ('error', &lt;unbound method OptionParser.error&gt;),\n ('exit', &lt;unbound method OptionParser.exit&gt;),\n ('expand_prog_name', &lt;unbound method OptionParser.expand_prog_name&gt;),\n ...\n ]\n# python3\n&gt;&gt;&gt; inspect.getmembers(OptionParser, predicate=inspect.isfunction)\n...\ngetmembersgetmembers&gt;&gt;&gt; parser = OptionParser()\n&gt;&gt;&gt; inspect.getmembers(parser, predicate=inspect.ismethod)\n...\n"}, {"idx": "webquery-test-2", "doc": "Create Pandas DataFrame from a string", "code": "StringIO.StringIOStringIO.StringIOStringIO.StringIOimport sys\nif sys.version_info[0] &lt; 3: \n    from StringIO import StringIO\nelse:\n    from io import StringIO\n\nimport pandas as pd\n\nTESTDATA = StringIO(\"\"\"col1;col2;col3\n    1;4.4;99\n    2;4.5;200\n    3;4.7;65\n    4;3.2;140\n    \"\"\")\n\ndf = pd.read_csv(TESTDATA, sep=\";\")\n"}, {"idx": "webquery-test-3", "doc": "How to install python3 version of package via pip on Ubuntu?", "code": "python3-pippython3-pippython3-pippython3-pippython3-pipwgetpython3-setuptoolspython3-setuptoolspython3-setuptoolspython3-setuptoolspython3-setuptoolspython3-setuptools"}, {"idx": "webquery-test-4", "doc": "Converting Python dict to kwargs?", "code": "func(**{'type':'Event'})\nfunc(type='Event')\n"}, {"idx": "webquery-test-5", "doc": "Convert DataFrame column type from string to datetime", "code": "to_datetimedf['col'] = pd.to_datetime(df['col'])\ndayfirstIn [11]: pd.to_datetime(pd.Series(['05/23/2005']))\nOut[11]:\n0   2005-05-23 00:00:00\ndtype: datetime64[ns]\nIn [12]: pd.to_datetime(pd.Series(['05/23/2005']), format=\"%m/%d/%Y\")\nOut[12]:\n0   2005-05-23\ndtype: datetime64[ns]\n"}, {"idx": "webquery-test-6", "doc": "django order_by query set, ascending and descending", "code": "Reserved.objects.filter(client=client_id).order_by('-check_in')\n--"}, {"idx": "webquery-test-7", "doc": "How to print to console in pytest?", "code": "py.testdef test_good():\n    for i in range(1000):\n        print(i)\n\ndef test_bad():\n    print('this should fail!')\n    assert False\n&gt;&gt;&gt; py.test tmp.py\n============================= test session starts ==============================\nplatform darwin -- Python 2.7.6 -- py-1.4.20 -- pytest-2.5.2\nplugins: cache, cov, pep8, xdist\ncollected 2 items\n\ntmp.py .F\n\n=================================== FAILURES ===================================\n___________________________________ test_bad ___________________________________\n\n    def test_bad():\n        print('this should fail!')\n&gt;       assert False\nE       assert False\n\ntmp.py:7: AssertionError\n------------------------------- Captured stdout --------------------------------\nthis should fail!\n====================== 1 failed, 1 passed in 0.04 seconds ======================\nCaptured stdoutprintprintprint&gt;&gt;&gt; py.test tmp.py -s\n============================= test session starts ==============================\nplatform darwin -- Python 2.7.6 -- py-1.4.20 -- pytest-2.5.2\nplugins: cache, cov, pep8, xdist\ncollected 2 items\n\ntmp.py 0\n1\n2\n3\n... and so on ...\n997\n998\n999\n.this should fail!\nF\n\n=================================== FAILURES ===================================\n___________________________________ test_bad ___________________________________\n\n    def test_bad():\n        print('this should fail!')\n&gt;       assert False\nE       assert False\n\ntmp.py:7: AssertionError\n====================== 1 failed, 1 passed in 0.02 seconds ======================\n"}, {"idx": "webquery-test-8", "doc": "Can't subtract offset-naive and offset-aware datetimes", "code": "naive = dt.replace(tzinfo=None)\n"}, {"idx": "webquery-test-9", "doc": "How to sort a dataFrame in python pandas by two or more columns?", "code": "sortsortsortdf.sort_values(['a', 'b'], ascending=[True, False])\nsortdf.sort(['a', 'b'], ascending=[True, False])\nIn [11]: df1 = pd.DataFrame(np.random.randint(1, 5, (10,2)), columns=['a','b'])\n\nIn [12]: df1.sort(['a', 'b'], ascending=[True, False])\nOut[12]:\n   a  b\n2  1  4\n7  1  3\n1  1  2\n3  1  2\n4  3  2\n6  4  4\n0  4  3\n9  4  3\n5  4  1\n8  4  1\ndf1 = df1.sort(['a', 'b'], ascending=[True, False])\ndf1.sort(['a', 'b'], ascending=[True, False], inplace=True)\n"}, {"idx": "webquery-test-10", "doc": "How do I run all Python unit tests in a directory?", "code": "__init__.pypython -m unittest discover &lt;test_directory&gt;\n# or\npython -m unittest discover -s &lt;directory&gt; -p '*_test.py'\n"}, {"idx": "webquery-test-11", "doc": "Get lengths of a list in a jinja2 template", "code": "&lt;span&gt;You have {{products|length}} products&lt;/span&gt;\n{% if products|length &gt; 1 %}\nlengthlength{{products|count}}{{products|count}}"}, {"idx": "webquery-test-12", "doc": "What is an alternative to execfile in Python 3?", "code": "execfile(\"./filename\") \nexec(open(\"./filename\").read())\n"}, {"idx": "webquery-test-13", "doc": "Python list vs. array \u2013 when to use?", "code": "floatfloatarray.arrayarray.arrayarray.arrayarray.arrayarray.arrayarray.arrayarray.arrayarray.array"}, {"idx": "webquery-test-14", "doc": "Does Python support short-circuiting?", "code": "andand"}, {"idx": "webquery-test-15", "doc": "Find the similarity metric between two strings", "code": "from difflib import SequenceMatcher\n\ndef similar(a, b):\n    return SequenceMatcher(None, a, b).ratio()\n&gt;&gt;&gt; similar(\"Apple\",\"Appel\")\n0.8\n&gt;&gt;&gt; similar(\"Apple\",\"Mango\")\n0.0\n"}, {"idx": "webquery-test-1", "doc": "Split by comma and strip whitespace in Python", "code": "formy_string = \"blah, lots  ,  of ,  spaces, here \"\nresult = [x.strip() for x in my_string.split(',')]\n# result is [\"blah\", \"lots\", \"of\", \"spaces\", \"here\"]\n"}, {"idx": "webquery-test-2", "doc": "How to replace multiple substrings of a string?", "code": "import re\n\nrep = {\"condition1\": \"\", \"condition2\": \"text\"} # define desired replacements here\n\n# use these three lines to do the replacement\nrep = dict((re.escape(k), v) for k, v in rep.iteritems()) \n#Python 3 renamed dict.iteritems to dict.items so use rep.items() for latest versions\npattern = re.compile(\"|\".join(rep.keys()))\ntext = pattern.sub(lambda m: rep[re.escape(m.group(0))], text)\n&gt;&gt;&gt; pattern.sub(lambda m: rep[re.escape(m.group(0))], \"(condition1) and --condition2--\")\n'() and --text--'\n"}, {"idx": "webquery-test-3", "doc": "Convert Pandas Column to DateTime", "code": "to_datetimeraw_data['Mycol'] =  pd.to_datetime(raw_data['Mycol'], format='%d%b%Y:%H:%M:%S.%f')\n"}, {"idx": "webquery-test-4", "doc": "Which is the preferred way to concatenate a string in Python?", "code": "+++a = a + b:\n0.11338996887207031\na += b:\n0.11040496826171875\na += b:\n0.10780501365661621\na.append(b):\n0.1123361587524414\na += b:\n0.41823482513427734\na.append(b):\n0.010656118392944336\na.join()a.join(a):\n0.43739795684814453\na += b:\n0.165287017822\na.append(b):\n0.0132720470428\na.join(a):\n0.114929914474\n+++"}, {"idx": "webquery-test-5", "doc": "Get the row(s) which have the max value in groups using groupby", "code": "In [1]: df\nOut[1]:\n    Sp  Mt Value  count\n0  MM1  S1     a      3\n1  MM1  S1     n      2\n2  MM1  S3    cb      5\n3  MM2  S3    mk      8\n4  MM2  S4    bg     10\n5  MM2  S4   dgd      1\n6  MM4  S2    rd      2\n7  MM4  S2    cb      2\n8  MM4  S2   uyi      7\n\nIn [2]: df.groupby(['Mt'], sort=False)['count'].max()\nOut[2]:\nMt\nS1     3\nS3     8\nS4    10\nS2     7\nName: count\nIn [3]: idx = df.groupby(['Mt'])['count'].transform(max) == df['count']\n\nIn [4]: df[idx]\nOut[4]:\n    Sp  Mt Value  count\n0  MM1  S1     a      3\n3  MM2  S3    mk      8\n4  MM2  S4    bg     10\n8  MM4  S2   uyi      7\nIn [5]: df['count_max'] = df.groupby(['Mt'])['count'].transform(max)\n\nIn [6]: df\nOut[6]:\n    Sp  Mt Value  count  count_max\n0  MM1  S1     a      3          3\n1  MM1  S1     n      2          3\n2  MM1  S3    cb      5          8\n3  MM2  S3    mk      8          8\n4  MM2  S4    bg     10         10\n5  MM2  S4   dgd      1         10\n6  MM4  S2    rd      2          7\n7  MM4  S2    cb      2          7\n8  MM4  S2   uyi      7          7\n"}, {"idx": "webquery-test-6", "doc": "Download file from web in Python 3", "code": "readreadimport urllib.request\n...\nurl = 'http://example.com/'\nresponse = urllib.request.urlopen(url)\ndata = response.read()      # a `bytes` object\ntext = data.decode('utf-8') # a `str`; this step can't be used if data is binary\nurllib.request.urlretrieveimport urllib.request\n...\n# Download the file from `url` and save it locally under `file_name`:\nurllib.request.urlretrieve(url, file_name)\nimport urllib.request\n...\n# Download the file from `url`, save it in a temporary directory and get the\n# path to it (e.g. '/tmp/tmpb48zma.txt') in the `file_name` variable:\nfile_name, headers = urllib.request.urlretrieve(url)\nurlretrieveurllib.request.urlopenurllib.request.urlopenimport urllib.request\nimport shutil\n...\n# Download the file from `url` and save it locally under `file_name`:\nwith urllib.request.urlopen(url) as response, open(file_name, 'wb') as out_file:\n    shutil.copyfileobj(response, out_file)\nbytesimport urllib.request\n...\n# Download the file from `url` and save it locally under `file_name`:\nwith urllib.request.urlopen(url) as response, open(file_name, 'wb') as out_file:\n    data = response.read() # a `bytes` object\n    out_file.write(data)\n.gzimport urllib.request\nimport gzip\n...\n# Read the first 64 bytes of the file inside the .gz archive located at `url`\nurl = 'http://example.com/something.gz'\nwith urllib.request.urlopen(url) as response:\n    with gzip.GzipFile(fileobj=response) as uncompressed:\n        file_header = uncompressed.read(64) # a `bytes` object\n        # Or do anything shown above using `uncompressed` instead of `response`.\n"}, {"idx": "webquery-test-7", "doc": "Flattening a shallow list in Python", "code": "&gt;&gt;&gt; list_of_menuitems = [['image00', 'image01'], ['image10'], []]\n&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; chain = itertools.chain(*list_of_menuitems)\n&gt;&gt;&gt; print(list(chain))\n['image00', 'image01', 'image10']\nQuerySetchainchainitertools.chain.from_iterableitertools.chain.from_iterable"}, {"idx": "webquery-test-8", "doc": "What are the differences between numpy arrays and matrices? Which one should I use?", "code": "a*bimport numpy as np\n\na = np.mat('4 3; 2 1')\nb = np.mat('1 2; 3 4')\nprint(a)\n# [[4 3]\n#  [2 1]]\nprint(b)\n# [[1 2]\n#  [3 4]]\nprint(a*b)\n# [[13 20]\n#  [ 5  8]]\n@import numpy as np\n\na = np.array([[4, 3], [2, 1]])\nb = np.array([[1, 2], [3, 4]])\nprint(a@b)\n# [[13 20]\n#  [ 5  8]]\n.T.T.T@@@@c = np.array([[4, 3], [2, 1]])\nd = np.array([[1, 2], [3, 4]])\nprint(c*d)\n# [[4 6]\n#  [6 4]]\nnp.dotnp.dotprint(np.dot(c,d))\n# [[13 20]\n#  [ 5  8]]\n**print(a**2)\n# [[22 15]\n#  [10  7]]\nprint(c**2)\n# [[16  9]\n#  [ 4  1]]\naaaaanp.ravelnp.asmatrixnp.asmatrixarraysarrays"}, {"idx": "webquery-test-9", "doc": "Normalize columns of a dataframe", "code": "normalized_df=(df-df.mean())/df.std()\nnormalized_df=(df-df.min())/(df.max()-df.min())\n"}, {"idx": "webquery-test-10", "doc": "Determine if Python is running inside virtualenv", "code": "sys.prefix == sys.base_prefixsys.prefix == sys.base_prefixsys.prefix == sys.base_prefixvenvvenvvenvvenvvenvvenvvenvimport sys\n\ndef get_base_prefix_compat():\n    \"\"\"Get base/real prefix, or sys.prefix if there is none.\"\"\"\n    return getattr(sys, \"base_prefix\", None) or getattr(sys, \"real_prefix\", None) or sys.prefix\n\ndef in_virtualenv():\n    return get_base_prefix_compat() != sys.prefix\nvirtualenvvirtualenvvirtualenvVIRTUAL_ENVVIRTUAL_ENVVIRTUAL_ENVVIRTUAL_ENVVIRTUAL_ENVVIRTUAL_ENV"}, {"idx": "webquery-test-11", "doc": "How can I filter a Django query with a list of values?", "code": "Blog.objects.filter(pk__in=[1, 4, 7])\n"}, {"idx": "webquery-test-12", "doc": "Extract subset of key-value pairs from dictionary?", "code": "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))\n{k: bigdict[k] for k in ('l', 'm', 'n')}\nbigdictbigdict{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}\n{k: bigdict[k] for k in bigdict.keys() &amp; {'l', 'm', 'n'}}\n"}, {"idx": "webquery-test-13", "doc": "How do I specify new lines in a string in order to write multiple lines to a file?", "code": "\\n\\n\\nos.linesepos.linesep"}, {"idx": "webquery-test-14", "doc": "Simple Digit Recognition OCR in OpenCV-Python", "code": "letter_recognition.datathis SOFthis SOFkey press manuallykey press manuallytrain.pngimport sys\n\nimport numpy as np\nimport cv2\n\nim = cv2.imread('pitrain.png')\nim3 = im.copy()\n\ngray = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)\nblur = cv2.GaussianBlur(gray,(5,5),0)\nthresh = cv2.adaptiveThreshold(blur,255,1,1,11,2)\n\n#################      Now finding Contours         ###################\n\ncontours,hierarchy = cv2.findContours(thresh,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)\n\nsamples =  np.empty((0,100))\nresponses = []\nkeys = [i for i in range(48,58)]\n\nfor cnt in contours:\n    if cv2.contourArea(cnt)&gt;50:\n        [x,y,w,h] = cv2.boundingRect(cnt)\n        \n        if  h&gt;28:\n            cv2.rectangle(im,(x,y),(x+w,y+h),(0,0,255),2)\n            roi = thresh[y:y+h,x:x+w]\n            roismall = cv2.resize(roi,(10,10))\n            cv2.imshow('norm',im)\n            key = cv2.waitKey(0)\n\n            if key == 27:  # (escape to quit)\n                sys.exit()\n            elif key in keys:\n                responses.append(int(chr(key)))\n                sample = roismall.reshape((1,100))\n                samples = np.append(samples,sample,0)\n\nresponses = np.array(responses,np.float32)\nresponses = responses.reshape((responses.size,1))\nprint \"training complete\"\n\nnp.savetxt('generalsamples.data',samples)\nnp.savetxt('generalresponses.data',responses)\n.txtimport cv2\nimport numpy as np\n\n#######   training part    ############### \nsamples = np.loadtxt('generalsamples.data',np.float32)\nresponses = np.loadtxt('generalresponses.data',np.float32)\nresponses = responses.reshape((responses.size,1))\n\nmodel = cv2.KNearest()\nmodel.train(samples,responses)\n\n############################# testing part  #########################\n\nim = cv2.imread('pi.png')\nout = np.zeros(im.shape,np.uint8)\ngray = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)\nthresh = cv2.adaptiveThreshold(gray,255,1,1,11,2)\n\ncontours,hierarchy = cv2.findContours(thresh,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)\n\nfor cnt in contours:\n    if cv2.contourArea(cnt)&gt;50:\n        [x,y,w,h] = cv2.boundingRect(cnt)\n        if  h&gt;28:\n            cv2.rectangle(im,(x,y),(x+w,y+h),(0,255,0),2)\n            roi = thresh[y:y+h,x:x+w]\n            roismall = cv2.resize(roi,(10,10))\n            roismall = roismall.reshape((1,100))\n            roismall = np.float32(roismall)\n            retval, results, neigh_resp, dists = model.find_nearest(roismall, k = 1)\n            string = str(int((results[0][0])))\n            cv2.putText(out,string,(x,y+h),0,1,(0,255,0))\n\ncv2.imshow('im',im)\ncv2.imshow('out',out)\ncv2.waitKey(0)\n"}, {"idx": "webquery-test-15", "doc": "How to tell if tensorflow is using gpu acceleration from inside python shell?", "code": "print(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))\nsess = tf.Session(config=tf.ConfigProto(log_device_placement=True))\n"}, {"idx": "webquery-test-16", "doc": "How to draw vertical lines on a given plot", "code": "plt.axvlineimport matplotlib.pyplot as plt\n\nplt.axvline(x=0.22058956)\nplt.axvline(x=0.33088437)\nplt.axvline(x=2.20589566)\nxcoords = [0.22058956, 0.33088437, 2.20589566]\nfor xc in xcoords:\n    plt.axvline(x=xc)\ncolorcolorcolorcolorcolorcolorcolorcolorcolor"}, {"idx": "webquery-test-17", "doc": "How to see the raw SQL queries Django is running?", "code": "django.db.connection.queriesfrom django.db import connection\nprint(connection.queries)\nqueryprint(MyModel.objects.filter(name=\"my name\").query)\nreset_queriesreset_queriesfrom django.db import reset_queries\n\nreset_queries()\nprint(connection.queries)\n&gt;&gt;&gt; []\n"}, {"idx": "webquery-test-18", "doc": "How do I create an empty array and then append to it in NumPy?", "code": "&gt;&gt;&gt; import numpy as np\n\n&gt;&gt;&gt; a = np.zeros(shape=(3, 2))\n&gt;&gt;&gt; a\narray([[ 0.,  0.],\n       [ 0.,  0.],\n       [ 0.,  0.]])\n\n&gt;&gt;&gt; a[0] = [1, 2]\n&gt;&gt;&gt; a[1] = [3, 4]\n&gt;&gt;&gt; a[2] = [5, 6]\n\n&gt;&gt;&gt; a\narray([[ 1.,  2.],\n       [ 3.,  4.],\n       [ 5.,  6.]])\n"}, {"idx": "webquery-test-1", "doc": "How to use the pass statement", "code": "class MyClass(object):\n    def meth_a(self):\n        pass\n\n    def meth_b(self):\n        print \"I'm meth_b\"\npassIndentationError: expected an indented block\npass"}, {"idx": "webquery-test-2", "doc": "Python list sort in descending order", "code": "sorted(timestamps, reverse=True)\ntimestamps.sort(reverse=True)\n"}, {"idx": "webquery-test-3", "doc": "Why do many examples use `fig, ax = plt.subplots()` in Matplotlib/pyplot/python", "code": "plt.subplots()plt.subplots()plt.subplots()plt.subplots()plt.subplots()plt.subplots()fig, ax = plt.subplots()\nfig = plt.figure()\nax = fig.add_subplot(111)\n"}, {"idx": "webquery-test-4", "doc": "Convert Django Model object to dict with all of the fields intact", "code": "instance.__dict__instance.__dict__\n{'_foreign_key_cache': &lt;OtherModel: OtherModel object&gt;,\n '_state': &lt;django.db.models.base.ModelState at 0x7ff0993f6908&gt;,\n 'auto_now_add': datetime.datetime(2018, 12, 20, 21, 34, 29, 494827, tzinfo=&lt;UTC&gt;),\n 'foreign_key_id': 2,\n 'id': 1,\n 'normal_value': 1,\n 'readonly_value': 2}\nmany_to_manymany_to_manymodel_to_dictfrom django.forms.models import model_to_dict\nmodel_to_dict(instance)\n{'foreign_key': 2,\n 'id': 1,\n 'many_to_many': [&lt;OtherModel: OtherModel object&gt;],\n 'normal_value': 1}\nmany_to_manymodel_to_dict(..., fields=...)from django.forms.models import model_to_dict\nmodel_to_dict(instance, fields=[field.name for field in instance._meta.fields])\n{'foreign_key': 2, 'id': 1, 'normal_value': 1}\nmodel_to_dictquery_set.values()SomeModel.objects.filter(id=instance.id).values()[0]\n{'auto_now_add': datetime.datetime(2018, 12, 20, 21, 34, 29, 494827, tzinfo=&lt;UTC&gt;),\n 'foreign_key_id': 2,\n 'id': 1,\n 'normal_value': 1,\n 'readonly_value': 2}\ninstance.__dict__instance.__dict__instance.__dict__model_to_dictfrom itertools import chain\n\ndef to_dict(instance):\n    opts = instance._meta\n    data = {}\n    for f in chain(opts.concrete_fields, opts.private_fields):\n        data[f.name] = f.value_from_object(instance)\n    for f in opts.many_to_many:\n        data[f.name] = [i.id for i in f.value_from_object(instance)]\n    return data\nto_dict(instance){'auto_now_add': datetime.datetime(2018, 12, 20, 21, 34, 29, 494827, tzinfo=&lt;UTC&gt;),\n 'foreign_key': 2,\n 'id': 1,\n 'many_to_many': [2],\n 'normal_value': 1,\n 'readonly_value': 2}\nfrom rest_framework import serializers\nclass SomeModelSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = SomeModel\n        fields = \"__all__\"\n\nSomeModelSerializer(instance).data\n{'auto_now_add': '2018-12-20T21:34:29.494827Z',\n 'foreign_key': 2,\n 'id': 1,\n 'many_to_many': [2],\n 'normal_value': 1,\n 'readonly_value': 2}\nfrom django.db import models\nfrom itertools import chain\n\nclass PrintableModel(models.Model):\n    def __repr__(self):\n        return str(self.to_dict())\n\n    def to_dict(instance):\n        opts = instance._meta\n        data = {}\n        for f in chain(opts.concrete_fields, opts.private_fields):\n            data[f.name] = f.value_from_object(instance)\n        for f in opts.many_to_many:\n            data[f.name] = [i.id for i in f.value_from_object(instance)]\n        return data\n\n    class Meta:\n        abstract = True\nclass OtherModel(PrintableModel): pass\n\nclass SomeModel(PrintableModel):\n    normal_value = models.IntegerField()\n    readonly_value = models.IntegerField(editable=False)\n    auto_now_add = models.DateTimeField(auto_now_add=True)\n    foreign_key = models.ForeignKey(OtherModel, related_name=\"ref1\")\n    many_to_many = models.ManyToManyField(OtherModel, related_name=\"ref2\")\nSomeModel.objects.first(){'auto_now_add': datetime.datetime(2018, 12, 20, 21, 34, 29, 494827, tzinfo=&lt;UTC&gt;),\n 'foreign_key': 2,\n 'id': 1,\n 'many_to_many': [2],\n 'normal_value': 1,\n 'readonly_value': 2}\n"}, {"idx": "webquery-test-5", "doc": "Convert datetime object to a String of date only in Python", "code": "import datetime\nt = datetime.datetime(2012, 2, 23, 0, 0)\nt.strftime('%m/%d/%Y')\n'02/23/2012'\n"}, {"idx": "webquery-test-6", "doc": "Permanently add a directory to PYTHONPATH?", "code": "~/.bashrcexport PYTHONPATH=\"${PYTHONPATH}:/my/other/path\"\n"}, {"idx": "webquery-test-7", "doc": "What is the difference between 'SAME' and 'VALID' padding in tf.nn.max_pool of tensorflow?", "code": "\"VALID\"\"VALID\"\"VALID\"\"VALID\"\"VALID\"\"VALID\"\"SAME\"\"SAME\""}, {"idx": "webquery-test-8", "doc": "UnicodeDecodeError, invalid continuation byte", "code": "pandas.read_csvlatin-1pd.read_csv('ml-100k/u.item', sep='|', names=m_cols , encoding='latin-1')\n"}, {"idx": "webquery-test-9", "doc": "Threading pool similar to the multiprocessing Pool?", "code": "multiprocessingfrom multiprocessing.pool import ThreadPool\nmultiprocessing.dummy"}, {"idx": "webquery-test-10", "doc": "How do I convert a PIL Image into a NumPy array?", "code": "putdata()&gt;&gt;&gt; pic.putdata(a)\nTraceback (most recent call last):\n  File \"...blablabla.../PIL/Image.py\", line 1185, in putdata\n    self.im.putdata(data, scale, offset)\nSystemError: new style getargs format but argument is not a tuple\nputdata&gt;&gt;&gt; data = list(tuple(pixel) for pixel in pix)\n&gt;&gt;&gt; pic.putdata(data)\n&gt;&gt;&gt; pix = numpy.array(pic)\npic.putdata(pix)pic.putdata(pix)"}, {"idx": "webquery-test-11", "doc": "How do I check if PyTorch is using the GPU?", "code": "&gt;&gt;&gt; import torch\n\n&gt;&gt;&gt; torch.cuda.is_available()\nTrue\n\n&gt;&gt;&gt; torch.cuda.device_count()\n1\n\n&gt;&gt;&gt; torch.cuda.current_device()\n0\n\n&gt;&gt;&gt; torch.cuda.device(0)\n&lt;torch.cuda.device at 0x7efce0b03be0&gt;\n\n&gt;&gt;&gt; torch.cuda.get_device_name(0)\n'GeForce GTX 950M'\nDevice 0Device 0"}, {"idx": "webquery-test-12", "doc": "Error \"(unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \\UXXXXXXXX escape\"", "code": "rpandas.read_csv(r\"C:\\Users\\DeePak\\Desktop\\myac.csv\")\npandas.read_csv(\"C:/Users/DeePak/Desktop/myac.csv\")\npandas.read_csv(\"C:\\\\Users\\\\DeePak\\\\Desktop\\\\myac.csv\")\n"}, {"idx": "webquery-test-13", "doc": "Run a Python script from another Python script, passing in arguments", "code": "os.systemos.system(\"script2.py 1\")\nexecfileexecfile"}, {"idx": "webquery-test-14", "doc": "Remove pandas rows with duplicate indices", "code": "df3 = df3[~df3.index.duplicated(keep='first')]\n.drop_duplicates&gt;&gt;&gt; %timeit df3.reset_index().drop_duplicates(subset='index', keep='first').set_index('index')\n1000 loops, best of 3: 1.54 ms per loop\n\n&gt;&gt;&gt; %timeit df3.groupby(df3.index).first()\n1000 loops, best of 3: 580 \u00b5s per loop\n\n&gt;&gt;&gt; %timeit df3[~df3.index.duplicated(keep='first')]\n1000 loops, best of 3: 307 \u00b5s per loop\n'last'MultiIndex&gt;&gt;&gt; %timeit df1.groupby(level=df1.index.names).last()\n1000 loops, best of 3: 771 \u00b5s per loop\n\n&gt;&gt;&gt; %timeit df1[~df1.index.duplicated(keep='last')]\n1000 loops, best of 3: 365 \u00b5s per loop\n"}, {"idx": "webquery-test-15", "doc": "How to add pandas data to an existing csv file?", "code": "to_csvdf.to_csv('my_csv.csv', mode='a', header=False)\noutput_path='my_csv.csv'\ndf.to_csv(output_path, mode='a', header=not os.path.exists(output_path))\n"}, {"idx": "webquery-test-16", "doc": "How to take the first N items from a generator or list?", "code": "top5 = array[:5]\narray[start:stop:step]array[start:stop:step]array[start:stop:step]array[start:stop:step]import itertools\ntop5 = itertools.islice(my_list, 5) # grab the first five elements\nitertools.islice()itertools.islice()itertools.islice()"}, {"idx": "webquery-test-17", "doc": "JSON datetime between Python and JavaScript", "code": "date_handler = lambda obj: (\n    obj.isoformat()\n    if isinstance(obj, (datetime.datetime, datetime.date))\n    else None\n)\njson.dumps(datetime.datetime.now(), default=date_handler)\n'\"2010-04-20T20:08:21.634121\"'\ndef handler(obj):\n    if hasattr(obj, 'isoformat'):\n        return obj.isoformat()\n    elif isinstance(obj, ...):\n        return ...\n    else:\n        raise TypeError, 'Object of type %s with value of %s is not JSON serializable' % (type(obj), repr(obj))\n"}, {"idx": "webquery-test-18", "doc": "pandas: filter rows of DataFrame with operator chaining", "code": "In [96]: df\nOut[96]:\n   A  B  C  D\na  1  4  9  1\nb  4  5  0  2\nc  5  5  1  0\nd  1  3  9  6\n\nIn [99]: df[(df.A == 1) &amp; (df.D == 6)]\nOut[99]:\n   A  B  C  D\nd  1  3  9  6\nIn [90]: def mask(df, key, value):\n   ....:     return df[df[key] == value]\n   ....:\n\nIn [92]: pandas.DataFrame.mask = mask\n\nIn [93]: df = pandas.DataFrame(np.random.randint(0, 10, (4,4)), index=list('abcd'), columns=list('ABCD'))\n\nIn [95]: df.ix['d','A'] = df.ix['a', 'A']\n\nIn [96]: df\nOut[96]:\n   A  B  C  D\na  1  4  9  1\nb  4  5  0  2\nc  5  5  1  0\nd  1  3  9  6\n\nIn [97]: df.mask('A', 1)\nOut[97]:\n   A  B  C  D\na  1  4  9  1\nd  1  3  9  6\n\nIn [98]: df.mask('A', 1).mask('D', 6)\nOut[98]:\n   A  B  C  D\nd  1  3  9  6\n"}, {"idx": "webquery-test-19", "doc": "How to perform OR condition in django queryset?", "code": "from django.db.models import Q\nUser.objects.filter(Q(income__gte=5000) | Q(income__isnull=True))\n"}, {"idx": "webquery-test-1", "doc": "What is the difference between flatten and ravel functions in numpy?", "code": "flattenflattenflatten"}, {"idx": "webquery-test-2", "doc": "time.sleep -- sleeps thread or process?", "code": "floatsleep()import time\nfrom threading import Thread\n\nclass worker(Thread):\n    def run(self):\n        for x in xrange(0,11):\n            print x\n            time.sleep(1)\n\nclass waiter(Thread):\n    def run(self):\n        for x in xrange(100,103):\n            print x\n            time.sleep(5)\n\ndef run():\n    worker().start()\n    waiter().start()\n&gt;&gt;&gt; thread_test.run()\n0\n100\n&gt;&gt;&gt; 1\n2\n3\n4\n5\n101\n6\n7\n8\n9\n10\n102\n"}, {"idx": "webquery-test-3", "doc": "How to dump a dict to a JSON file?", "code": "import json\nwith open('result.json', 'w') as fp:\n    json.dump(sample, fp)\nresult.jsonresult.jsonsamplesample"}, {"idx": "webquery-test-4", "doc": "How do I disable the security certificate check in Python requests", "code": "requestsrequestsrequestsrequestsrequestsimport warnings\nimport contextlib\n\nimport requests\nfrom urllib3.exceptions import InsecureRequestWarning\n\nold_merge_environment_settings = requests.Session.merge_environment_settings\n\n@contextlib.contextmanager\ndef no_ssl_verification():\n    opened_adapters = set()\n\n    def merge_environment_settings(self, url, proxies, stream, verify, cert):\n        # Verification happens only once per connection so we need to close\n        # all the opened adapters once we're done. Otherwise, the effects of\n        # verify=False persist beyond the end of this context manager.\n        opened_adapters.add(self.get_adapter(url))\n\n        settings = old_merge_environment_settings(self, url, proxies, stream, verify, cert)\n        settings['verify'] = False\n\n        return settings\n\n    requests.Session.merge_environment_settings = merge_environment_settings\n\n    try:\n        with warnings.catch_warnings():\n            warnings.simplefilter('ignore', InsecureRequestWarning)\n            yield\n    finally:\n        requests.Session.merge_environment_settings = old_merge_environment_settings\n\n        for adapter in opened_adapters:\n            try:\n                adapter.close()\n            except:\n                pass\nwith no_ssl_verification():\n    requests.get('https://wrong.host.badssl.example/')\n    print('It works')\n\n    requests.get('https://wrong.host.badssl.example/', verify=True)\n    print('Even if you try to force it to')\n\nrequests.get('https://wrong.host.badssl.example/', verify=False)\nprint('It resets back')\n\nsession = requests.Session()\nsession.verify = True\n\nwith no_ssl_verification():\n    session.get('https://wrong.host.badssl.example/', verify=True)\n    print('Works even here')\n\ntry:\n    requests.get('https://wrong.host.badssl.example/')\nexcept requests.exceptions.SSLError:\n    print('It breaks')\n\ntry:\n    session.get('https://wrong.host.badssl.example/')\nexcept requests.exceptions.SSLError:\n    print('It breaks here again')\n&gt;&gt;&gt; import requests\n&gt;&gt;&gt; session = requests.Session()\n&gt;&gt;&gt; session.get('https://wrong.host.badssl.example/', verify=False)\n/usr/local/lib/python3.7/site-packages/urllib3/connectionpool.py:857: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings\n  InsecureRequestWarning)\n&lt;Response [200]&gt;\n&gt;&gt;&gt; session.get('https://wrong.host.badssl.example/', verify=True)\n/usr/local/lib/python3.7/site-packages/urllib3/connectionpool.py:857: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings\n  InsecureRequestWarning)\n&lt;Response [200]&gt;\n"}, {"idx": "webquery-test-5", "doc": "Why does datetime.datetime.utcnow() not contain timezone information?", "code": "datetimedatetimedatetimedatetime.nowdatetime.nowdatetime.nowdatetime.nowdatetime.utcnow()datetime.utcnow()datetime.utcnow()datetime.utcnow()&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; datetime.datetime.now(datetime.timezone.utc)\ndatetime.datetime(2014, 7, 10, 2, 43, 55, 230107, tzinfo=datetime.timezone.utc)\n"}, {"idx": "webquery-test-6", "doc": "Reference requirements.txt for the install_requires kwarg in setuptools setup.py file", "code": "requirements.txtrequirements.txtinstall_requiresinstall_requiresrequirements.txtrequirements.txtrequirements.txtrequirements.txtrequirements.txtsetup.pysetup.py"}, {"idx": "webquery-test-7", "doc": "Redirect stdout to a file in Python?", "code": "sys.stdout# for python3\nimport sys\nwith open('file', 'w') as sys.stdout:\n    print('test')\n$ python3 foo.py &gt; file\n"}, {"idx": "webquery-test-8", "doc": "Converting Epoch time into the datetime", "code": "import time\n\ntime.strftime('%Y-%m-%d %H:%M:%S', time.localtime(1347517370))\nimport time\n\nmy_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(1347517370))\n\nprint(my_time)\n"}, {"idx": "webquery-test-9", "doc": "How can I display full (non-truncated) dataframe information in HTML when converting from Pandas dataframe to HTML?", "code": "display.max_colwidthdisplay.max_colwidthdisplay.max_colwidthpd.set_option('display.max_colwidth', None)\nset_optiondisplay.max_colwidth"}, {"idx": "webquery-test-10", "doc": "How to overload __init__ method based on argument type?", "code": "&gt;&gt;&gt; class MyData:\n...     def __init__(self, data):\n...         \"Initialize MyData from a sequence\"\n...         self.data = data\n...     \n...     @classmethod\n...     def fromfilename(cls, filename):\n...         \"Initialize MyData from a file\"\n...         data = open(filename).readlines()\n...         return cls(data)\n...     \n...     @classmethod\n...     def fromdict(cls, datadict):\n...         \"Initialize MyData from a dict's items\"\n...         return cls(datadict.items())\n... \n&gt;&gt;&gt; MyData([1, 2, 3]).data\n[1, 2, 3]\n&gt;&gt;&gt; MyData.fromfilename(\"/tmp/foobar\").data\n['foo\\n', 'bar\\n', 'baz\\n']\n&gt;&gt;&gt; MyData.fromdict({\"spam\": \"ham\"}).data\n[('spam', 'ham')]\nisinstance(x, basestring)"}, {"idx": "webquery-test-11", "doc": "How do I get the picture size with PIL?", "code": "from PIL import Image\n\nim = Image.open('whatever.png')\nwidth, height = im.size\n"}, {"idx": "webquery-test-12", "doc": "How to terminate a python subprocess launched with shell=True", "code": "import os\nimport signal\nimport subprocess\n\n# The os.setsid() is passed in the argument preexec_fn so\n# it's run after the fork() and before  exec() to run the shell.\npro = subprocess.Popen(cmd, stdout=subprocess.PIPE, \n                       shell=True, preexec_fn=os.setsid) \n\nos.killpg(os.getpgid(pro.pid), signal.SIGTERM)  # Send the signal to all the process groups\n"}, {"idx": "webquery-test-13", "doc": "Pylint, PyChecker or PyFlakes?", "code": "#!/usr/local/bin/python\n# by Daniel Rosengren modified by e-satis\n\nimport sys, time\nstdout = sys.stdout\n\nBAILOUT = 16\nMAX_ITERATIONS = 1000\n\nclass Iterator(object) :\n\n    def __init__(self):\n\n        print 'Rendering...'\n        for y in xrange(-39, 39):\n            stdout.write('\\n')\n            for x in xrange(-39, 39):\n                if self.mandelbrot(x/40.0, y/40.0) :\n                    stdout.write(' ')\n                else:\n                    stdout.write('*')\n\n\n    def mandelbrot(self, x, y):\n        cr = y - 0.5\n        ci = x\n        zi = 0.0\n        zr = 0.0\n\n        for i in xrange(MAX_ITERATIONS) :\n            temp = zr * zi\n            zr2 = zr * zr\n            zi2 = zi * zi\n            zr = zr2 - zi2 + cr\n            zi = temp + temp + ci\n\n            if zi2 + zr2 &gt; BAILOUT:\n                return i\n\n        return 0\n\nt = time.time()\nIterator()\nprint '\\nPython Elapsed %.02f' % (time.time() - t)\nPyCheckerPyCheckerPyCheckerPyLint#!/usr/local/bin/python\n# by Daniel Rosengren, modified by e-satis\n\"\"\"\nModule doctring\n\"\"\"\n\n\nimport time\nfrom sys import stdout\n\nBAILOUT = 16\nMAX_ITERATIONS = 1000\n\ndef mandelbrot(dim_1, dim_2):\n    \"\"\"\n    function doc string\n    \"\"\"\n    cr1 = dim_1 - 0.5\n    ci1 = dim_2\n    zi1 = 0.0\n    zr1 = 0.0\n\n    for i in xrange(MAX_ITERATIONS) :\n        temp = zr1 * zi1\n        zr2 = zr1 * zr1\n        zi2 = zi1 * zi1\n        zr1 = zr2 - zi2 + cr1\n        zi1 = temp + temp + ci1\n\n        if zi2 + zr2 &gt; BAILOUT:\n            return i\n\n    return 0\n\ndef execute() :\n    \"\"\"\n    func doc string\n    \"\"\"\n    print 'Rendering...'\n    for dim_1 in xrange(-39, 39):\n        stdout.write('\\n')\n        for dim_2 in xrange(-39, 39):\n            if mandelbrot(dim_1/40.0, dim_2/40.0) :\n                stdout.write(' ')\n            else:\n                stdout.write('*')\n\n\nSTART_TIME = time.time()\nexecute()\nprint '\\nPython Elapsed %.02f' % (time.time() - START_TIME)\npep8./python_mandelbrot.py:4:11: E401 multiple imports on one line\n./python_mandelbrot.py:10:1: E302 expected 2 blank lines, found 1\n./python_mandelbrot.py:10:23: E203 whitespace before ':'\n./python_mandelbrot.py:15:80: E501 line too long (108 characters)\n./python_mandelbrot.py:23:1: W291 trailing whitespace\n./python_mandelbrot.py:41:5: E301 expected 1 blank line, found 3\n************* Module python_mandelbrot\nC: 15: Line too long (108/80)\nC: 61: Line too long (85/80)\nC:  1: Missing docstring\nC:  5: Invalid name \"stdout\" (should match (([A-Z_][A-Z0-9_]*)|(__.*__))$)\nC: 10:Iterator: Missing docstring\nC: 15:Iterator.__init__: Invalid name \"y\" (should match [a-z_][a-z0-9_]{2,30}$)\nC: 17:Iterator.__init__: Invalid name \"x\" (should match [a-z_][a-z0-9_]{2,30}$)\n\n[...] and a very long report with useful stats like :\n\nDuplication\n-----------\n\n+-------------------------+------+---------+-----------+\n|                         |now   |previous |difference |\n+=========================+======+=========+===========+\n|nb duplicated lines      |0     |0        |=          |\n+-------------------------+------+---------+-----------+\n|percent duplicated lines |0.000 |0.000    |=          |\n+-------------------------+------+---------+-----------+\n"}, {"idx": "webquery-test-14", "doc": "How to make inline plots in Jupyter Notebook larger?", "code": "matplotlib.rcParams['figure.figsize'] = [width, height]\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [10, 5]\n"}, {"idx": "webquery-test-15", "doc": "Assign output of os.system to a variable and prevent it from being displayed on the screen", "code": "popenos.popen('cat /etc/services').read()\nsubprocessimport subprocess\n\nproc = subprocess.Popen([\"cat\", \"/etc/services\"], stdout=subprocess.PIPE, shell=True)\n(out, err) = proc.communicate()\nprint(\"program output:\", out)\n"}, {"idx": "webquery-test-1", "doc": "How can I convert a character to a integer in Python, and viceversa?", "code": "chr()chr()&gt;&gt;&gt; chr(97)\n'a'\n&gt;&gt;&gt; ord('a')\n97\n"}, {"idx": "webquery-test-2", "doc": "\"Unicode Error \"unicodeescape\" codec can't decode bytes... Cannot open text files in Python 3", "code": "\"C:\\Users\\Eric\\Desktop\\beeline.txt\"\n\\U\\U\\U\"C:\\\\Users\\\\Eric\\\\Desktop\\\\beeline.txt\"\nrr\"C:\\Users\\Eric\\Desktop\\beeline.txt\"\n"}, {"idx": "webquery-test-3", "doc": "Can a variable number of arguments be passed to a function?", "code": "*argsdef manyArgs(*arg):\n  print \"I was called with\", len(arg), \"arguments:\", arg\n\n&gt;&gt;&gt; manyArgs(1)\nI was called with 1 arguments: (1,)\n&gt;&gt;&gt; manyArgs(1, 2, 3)\nI was called with 3 arguments: (1, 2, 3)\n"}, {"idx": "webquery-test-4", "doc": "How can I specify the function type in my type hints?", "code": "typing.Callablefrom typing import Callable\n\ndef my_function(func: Callable):\nCallableCallableCallableCallableCallabledef sum(a: int, b: int) -&gt; int: return a+b\nCallable[[int, int], int]\nCallable[[ParamType1, ParamType2, .., ParamTypeN], ReturnType]\n"}, {"idx": "webquery-test-5", "doc": "NumPy array is not JSON serializable", "code": "import numpy as np\nimport codecs, json \n\na = np.arange(10).reshape(2,5) # a 2 by 5 array\nb = a.tolist() # nested lists with same data, indices\nfile_path = \"/path.json\" ## your path variable\njson.dump(b, codecs.open(file_path, 'w', encoding='utf-8'), \n          separators=(',', ':'), \n          sort_keys=True, \n          indent=4) ### this saves the array in .json format\nobj_text = codecs.open(file_path, 'r', encoding='utf-8').read()\nb_new = json.loads(obj_text)\na_new = np.array(b_new)\n"}, {"idx": "webquery-test-6", "doc": "How can I make one python file run another?", "code": "import fileimport fileimport fileimport fileimport fileimport fileimport file"}, {"idx": "webquery-test-7", "doc": "Store output of subprocess.Popen call in a string", "code": "PopenPopenfrom subprocess import check_output\nout = check_output([\"ntpq\", \"-p\"])\ncommunicateimport subprocess\np = subprocess.Popen([\"ntpq\", \"-p\"], stdout=subprocess.PIPE)\nout, err = p.communicate()\nout\"ntpq -p\"\"ntpq -p\"\"ntpq -p\""}, {"idx": "webquery-test-8", "doc": "Convert NumPy array to Python list", "code": "tolist()&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; np.array([[1,2,3],[4,5,6]]).tolist()\n[[1, 2, 3], [4, 5, 6]]\n"}, {"idx": "webquery-test-9", "doc": "Understanding Keras LSTMs", "code": "features=2(N,5,2)        [     Step1      Step2      Step3      Step4      Step5\nTank A:    [[Pa1,Ta1], [Pa2,Ta2], [Pa3,Ta3], [Pa4,Ta4], [Pa5,Ta5]],\nTank B:    [[Pb1,Tb1], [Pb2,Tb2], [Pb3,Tb3], [Pb4,Tb4], [Pb5,Tb5]],\n  ....\nTank N:    [[Pn1,Tn1], [Pn2,Tn2], [Pn3,Tn3], [Pn4,Tn4], [Pn5,Tn5]],\n        ]\n        [     Step1    Step2    Step3    Step4    Step5\nWindow  A:  [[P1,T1], [P2,T2], [P3,T3], [P4,T4], [P5,T5]],\nWindow  B:  [[P2,T2], [P3,T3], [P4,T4], [P5,T5], [P6,T6]],\nWindow  C:  [[P3,T3], [P4,T4], [P5,T5], [P6,T6], [P7,T7]],\n  ....\n        ]\nreturn_sequences=Trueoutputs = LSTM(units, return_sequences=True)(inputs)\n\n#output_shape -&gt; (batch_size, steps, units)\nreturn_sequences=Falseoutputs = LSTM(units)(inputs)\n\n#output_shape -&gt; (batch_size, units) --&gt; steps were discarded, only the last was returned\nstateful=Truestateful=Trueoutputs = RepeatVector(steps)(inputs) #where inputs is (batch,features)\noutputs = LSTM(units,return_sequences=True)(outputs)\n\n#output_shape -&gt; (batch_size, steps, units)\nstateful=Truestateful=Falsestateful=Falsestateful=Truestateful=Truestateful=True                   BATCH 1                           BATCH 2\n        [     Step1      Step2        |    [    Step3      Step4      Step5\nTank A:    [[Pa1,Ta1], [Pa2,Ta2],     |       [Pa3,Ta3], [Pa4,Ta4], [Pa5,Ta5]],\nTank B:    [[Pb1,Tb1], [Pb2,Tb2],     |       [Pb3,Tb3], [Pb4,Tb4], [Pb5,Tb5]],\n  ....                                |\nTank N:    [[Pn1,Tn1], [Pn2,Tn2],     |       [Pn3,Tn3], [Pn4,Tn4], [Pn5,Tn5]],\n        ]                                  ]\nshuffle=Falseinput_shape=(None,features)stateful=Truestateful=Truestateful=Trueoutputs = LSTM(units=features, \n               stateful=True, \n               return_sequences=True, #just to keep a nice output shape even with length 1\n               input_shape=(None,features))(inputs) \n    #units = features because we want to use the outputs as inputs\n    #None because we want variable length\n\n#output_shape -&gt; (batch_size, steps, units) \ninput_data = someDataWithShape((batch, 1, features))\n\n#important, we're starting new sequences, not continuing old ones:\nmodel.reset_states()\n\noutput_sequence = []\nlast_step = input_data\nfor i in steps_to_predict:\n\n    new_step = model.predict(last_step)\n    output_sequence.append(new_step)\n    last_step = new_step\n\n #end of the sequences\n model.reset_states()\noutputs = LSTM(units=features, \n               stateful=True, \n               return_sequences=True, \n               input_shape=(None,features))(inputs) \n    #units = features because we want to use the outputs as inputs\n    #None because we want variable length\n\n#output_shape -&gt; (batch_size, steps, units) \ntotalSequences = someSequencesShaped((batch, steps, features))\n    #batch size is usually 1 in these cases (often you have only one Tank in the example)\n\nX = totalSequences[:,:-1] #the entire known sequence, except the last step\nY = totalSequences[:,1:] #one step ahead of X\n\n#loop for resetting states at the start/end of the sequences:\nfor epoch in range(epochs):\n    model.reset_states()\n    model.train_on_batch(X,Y)\nmodel.reset_states() #starting a new sequence\npredicted = model.predict(totalSequences)\nfirstNewStep = predicted[:,-1:] #the last step of the predictions is the first future step\noutput_sequence = [firstNewStep]\nlast_step = firstNewStep\nfor i in steps_to_predict:\n\n    new_step = model.predict(last_step)\n    output_sequence.append(new_step)\n    last_step = new_step\n\n #end of the sequences\n model.reset_states()\ninputs = Input((steps,features))\n\n#a few many to many layers:\noutputs = LSTM(hidden1,return_sequences=True)(inputs)\noutputs = LSTM(hidden2,return_sequences=True)(outputs)    \n\n#many to one layer:\noutputs = LSTM(hidden3)(outputs)\n\nencoder = Model(inputs,outputs)\ninputs = Input((hidden3,))\n\n#repeat to make one to many:\noutputs = RepeatVector(steps)(inputs)\n\n#a few many to many layers:\noutputs = LSTM(hidden4,return_sequences=True)(outputs)\n\n#last layer\noutputs = LSTM(features,return_sequences=True)(outputs)\n\ndecoder = Model(inputs,outputs)\ninputs = Input((steps,features))\noutputs = encoder(inputs)\noutputs = decoder(outputs)\n\nautoencoder = Model(inputs,outputs)\nfit(X,X)stateful=True"}, {"idx": "webquery-test-10", "doc": "How do you find the first key in a dictionary?", "code": "my_dict = {'foo': 'bar', 'spam': 'eggs'}\nnext(iter(my_dict)) # outputs 'foo'\n"}, {"idx": "webquery-test-11", "doc": "How do I delete items from a dictionary while iterating over it?", "code": "&gt;&gt;&gt; mydict\n{'four': 4, 'three': 3, 'one': 1}\n\n&gt;&gt;&gt; for k in list(mydict.keys()):\n...     if mydict[k] == 3:\n...         del mydict[k]\n\n&gt;&gt;&gt; mydict\n{'four': 4, 'one': 1}\nRuntimeErrormydict.keys()mydict.keys()mydict.keys()&gt;&gt;&gt; mydict = {'one': 1, 'two': 2, 'three': 3, 'four': 4}\n\n&gt;&gt;&gt; for k, v in mydict.iteritems():\n...    if k == 'two':\n...        del mydict[k]\n\n------------------------------------------------------------\nTraceback (most recent call last):\n  File \"&lt;ipython console&gt;\", line 1, in &lt;module&gt;\nRuntimeError: dictionary changed size during iteration\nkeys()&gt;&gt;&gt; for k in mydict.keys():\n...    if k == 'two':\n...        del mydict[k]\n\n&gt;&gt;&gt; mydict\n{'four': 4, 'three': 3, 'one': 1}\nitems()&gt;&gt;&gt; for k, v in mydict.items():\n...     if v == 3:\n...         del mydict[k]\n\n&gt;&gt;&gt; mydict\n{'four': 4, 'one': 1}\n"}, {"idx": "webquery-test-12", "doc": "Does reading an entire file leave the file handle open?", "code": "filefilewith open('Path/to/file', 'r') as content_file:\n    content = content_file.read()\nfile.__exit__()file.__exit__()file.__exit__()file.__exit__()file.__exit__()"}, {"idx": "webquery-test-13", "doc": "Cannot find module cv2 when using OpenCV", "code": "conda update anaconda-navigator  \nconda update navigator-updater  \npip install opencv-python\nconda install -c https://conda.binstar.org/menpo opencv\npip install opencv-python\nconda install opencv \nconda install -c conda-forge opencv\n"}, {"idx": "webquery-test-14", "doc": "'too many values to unpack', iterating over a dict. key=>string, value=>list", "code": "items()for field, possible_values in fields.items():\n    print(field, possible_values)\niteritems()for field, possible_values in fields.iteritems():\n    print field, possible_values\nitems()iteritems()"}, {"idx": "webquery-test-15", "doc": "Breaking out of nested loops", "code": "for x in xrange(10):\n    for y in xrange(10):\n        print x*y\n        if x*y &gt; 50:\n            break\n    else:\n        continue  # only executed if the inner loop did NOT break\n    break  # only executed if the inner loop DID break\nfor x in xrange(10):\n    for y in xrange(10):\n        for z in xrange(10):\n            print x,y,z\n            if x*y*z == 30:\n                break\n        else:\n            continue\n        break\n    else:\n        continue\n    break\n"}, {"idx": "webquery-test-16", "doc": "How can I get a list of all classes within current module in Python?", "code": "import sys\ncurrent_module = sys.modules[__name__]\nimport sys, inspect\ndef print_classes():\n    for name, obj in inspect.getmembers(sys.modules[__name__]):\n        if inspect.isclass(obj):\n            print(obj)\nclsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)\ninspect.getmembers()"}, {"idx": "webquery-test-17", "doc": "Can \"list_display\" in a Django ModelAdmin display attributes of ForeignKey fields?", "code": "class UserAdmin(admin.ModelAdmin):\n    list_display = (..., 'get_author')\n    \n    def get_author(self, obj):\n        return obj.book.author\n    get_author.short_description = 'Author'\n    get_author.admin_order_field = 'book__author'\ndisplay()class UserAdmin(admin.ModelAdmin):\n    list_display = (..., 'get_author')\n    \n    @display(ordering='book__author', description='Author')\n    def get_author(self, obj):\n        return obj.book.author\n"}, {"idx": "webquery-test-18", "doc": "Cost of len() function", "code": "setset"}, {"idx": "webquery-test-19", "doc": "What's the difference between `raw_input()` and `input()` in Python 3?", "code": "raw_input()raw_input()raw_input()raw_input()raw_input()raw_input()raw_input()"}, {"idx": "webquery-test-1", "doc": "In Python, if I return inside a \"with\" block, will the file still close?", "code": "finallyfinallywithwith locked(myLock):\n    # Code here executes with myLock held.  The lock is\n    # guaranteed to be released when the block is left (even\n    # if via return or by an uncaught exception).\nopen()open()open()"}, {"idx": "webquery-test-2", "doc": "Django Model() vs Model.objects.create()", "code": "create()"}, {"idx": "webquery-test-3", "doc": "How to convert 'binary string' to normal string in Python3?", "code": "&gt;&gt;&gt; b'a string'.decode('ascii')\n'a string'\n&gt;&gt;&gt; 'a string'.encode('ascii')\nb'a string'\n"}, {"idx": "webquery-test-4", "doc": "How to install PIL with pip on Mac OS?", "code": "pip install Pillow\npython3 -m pip install Pillow\n"}, {"idx": "webquery-test-5", "doc": "Accessing dict keys like an attribute?", "code": "AttrDictclass AttrDict(dict):\n    def __init__(self, *args, **kwargs):\n        super(AttrDict, self).__init__(*args, **kwargs)\n        self.__dict__ = self\n.keys().keys().keys().keys().keys().keys()__dict____dict____dict____dict____dict____dict____dict__d = AttrDict()\nd.update({'items':[\"jacket\", \"necktie\", \"trousers\"]})\nfor k, v in d.items():    # TypeError: 'list' object is not callable\n    print \"Never reached!\"\n"}, {"idx": "webquery-test-6", "doc": "Python dictionary: are keys() and values() always the same order?", "code": "items()items()items()items()items()items()"}, {"idx": "webquery-test-7", "doc": "Python subprocess/Popen with a modified environment", "code": "os.environ.copy()import subprocess, os\nmy_env = os.environ.copy()\nmy_env[\"PATH\"] = \"/usr/sbin:/sbin:\" + my_env[\"PATH\"]\nsubprocess.Popen(my_command, env=my_env)\n"}, {"idx": "webquery-test-8", "doc": "TypeError: Missing 1 required positional argument: 'self'", "code": "p = Pump()\np.getPumps()\n&gt;&gt;&gt; class TestClass:\n        def __init__(self):\n            print(\"in init\")\n        def testFunc(self):\n            print(\"in Test Func\")\n\n\n&gt;&gt;&gt; testInstance = TestClass()\nin init\n&gt;&gt;&gt; testInstance.testFunc()\nin Test Func\n"}, {"idx": "webquery-test-9", "doc": "Why return NotImplemented instead of raising NotImplementedError", "code": "__lt__()__lt__()NotImplementedNotImplementedNotImplementedNotImplementedNotImplementedNotImplementedNotImplementedNotImplementedNotImplementedNotImplemented"}, {"idx": "webquery-test-10", "doc": "Python strftime - date without leading 0?", "code": "%%Y/%-m/%-d##"}, {"idx": "webquery-test-11", "doc": "\"UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.\" when plotting figure with pyplot on Pycharm", "code": "tktkintersudo apt-get install python3-tk\npipmatplotlibTkAggTkAggTkAggTkAggTkAggmatplotlibmatplotlib"}, {"idx": "webquery-test-1", "doc": "How to find list intersection?", "code": "&gt;&gt;&gt; a = [1,2,3,4,5]\n&gt;&gt;&gt; b = [1,3,5,6]\n&gt;&gt;&gt; list(set(a) &amp; set(b))\n[1, 3, 5]\n"}, {"idx": "webquery-test-2", "doc": "python: how to identify if a variable is an array or a scalar", "code": "&gt;&gt;&gt; import collections.abc\n&gt;&gt;&gt; isinstance([0, 10, 20, 30], collections.abc.Sequence)\nTrue\n&gt;&gt;&gt; isinstance(50, collections.abc.Sequence)\nFalse\nisinstanceisinstancenot isinstance(x, (str, unicode))numpy&gt;&gt;&gt; import collections.abc\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; isinstance((1, 2, 3), collections.abc.Sequence)\nTrue\n&gt;&gt;&gt; isinstance(np.array([1, 2, 3]), collections.abc.Sequence)\nFalse\n&gt;&gt;&gt; hasattr(np.array([1, 2, 3]), \"__len__\")\nTrue\n&gt;&gt;&gt; hasattr([1, 2, 3], \"__len__\")\nTrue\n&gt;&gt;&gt; hasattr((1, 2, 3), \"__len__\")\nTrue\nisinstanceisinstance&gt;&gt;&gt; hasattr({\"a\": 1}, \"__len__\")\nTrue\n&gt;&gt;&gt; from numpy.distutils.misc_util import is_sequence\n&gt;&gt;&gt; is_sequence({\"a\": 1})\nTrue\n&gt;&gt;&gt; isinstance({\"a\": 1}, collections.abc.Sequence)\nFalse\nisinstance&gt;&gt;&gt; isinstance(np.array([1, 2, 3]), (collections.abc.Sequence, np.ndarray))\nTrue\n&gt;&gt;&gt; isinstance([1, 2, 3], (collections.abc.Sequence, np.ndarray))\nTrue\n"}, {"idx": "webquery-test-3", "doc": "Pandas 'count(distinct)' equivalent", "code": "table.groupby('YEARMONTH').CLIENTCODE.nunique()\nIn [2]: table\nOut[2]: \n   CLIENTCODE  YEARMONTH\n0           1     201301\n1           1     201301\n2           2     201301\n3           1     201302\n4           2     201302\n5           2     201302\n6           3     201302\n\nIn [3]: table.groupby('YEARMONTH').CLIENTCODE.nunique()\nOut[3]: \nYEARMONTH\n201301       2\n201302       3\n"}, {"idx": "webquery-test-4", "doc": "How can I percent-encode URL parameters in Python?", "code": "urllib.quote(string[, safe])\n''&gt;&gt;&gt; urllib.quote('/test')\n'/test'\n&gt;&gt;&gt; urllib.quote('/test', safe='')\n'%2Ftest'\n&gt;&gt;&gt; query = urllib.quote(u\"M\u00fcller\".encode('utf8'))\n&gt;&gt;&gt; print urllib.unquote(query).decode('utf8')\nM\u00fcller\nquotequote&gt;&gt;&gt; import urllib.parse\n&gt;&gt;&gt; print(urllib.parse.quote(\"M\u00fcller\".encode('utf8')))\nM%C3%BCller\n&gt;&gt;&gt; print(urllib.parse.unquote(\"M%C3%BCller\"))\nM\u00fcller\n"}, {"idx": "webquery-test-5", "doc": "Python locale error: unsupported locale setting", "code": "export LC_ALL=\"en_US.UTF-8\"\nexport LC_CTYPE=\"en_US.UTF-8\"\nsudo dpkg-reconfigure locales\n.UTF-8.UTF-8.UTF-8"}, {"idx": "webquery-test-6", "doc": "Find first sequence item that matches a criterion", "code": "next(obj for obj in objs if obj.val == 5)\n[i for i in xrange(100000) if i == 1000][0]\n\nnext(i for i in xrange(100000) if i == 1000)\n"}, {"idx": "webquery-test-7", "doc": "Else clause on Python while statement", "code": "elseelseelseif condition:\n    handle_true()\nelse:\n    handle_false()\nwhile condition:\n    handle_true()\nelse:\n    # condition is false now, handle and go on with the rest of the program\n    handle_false()\nwhile value &lt; threshold:\n    if not process_acceptable_value(value):\n        # something went wrong, exit the loop; don't pass go, don't collect 200\n        break\n    value = update(value)\nelse:\n    # value &gt;= threshold; pass go, collect 200\n    handle_threshold_reached()\n"}, {"idx": "webquery-test-8", "doc": "How to invert the x or y axis", "code": "plt.gca().invert_xaxis()\nplt.gca().invert_yaxis()\n"}, {"idx": "webquery-test-9", "doc": "multiprocessing.Pool: When to use apply, apply_async or map?", "code": "applyapply(f,args,kwargs)\napplyf(*args,**kwargs)\nmultiprocessing.PoolPool.applyPool.applyPool.applyPool.apply_asyncPool.apply_asyncPool.apply_asyncPool.apply_asyncPool.apply_asyncPool.apply_asyncPool.apply_asyncPool.applyPool.applyPool.applyimport multiprocessing as mp\nimport time\n\ndef foo_pool(x):\n    time.sleep(2)\n    return x*x\n\nresult_list = []\ndef log_result(result):\n    # This is called whenever foo_pool(i) returns a result.\n    # result_list is modified only by the main process, not the pool workers.\n    result_list.append(result)\n\ndef apply_async_with_callback():\n    pool = mp.Pool()\n    for i in range(10):\n        pool.apply_async(foo_pool, args = (i, ), callback = log_result)\n    pool.close()\n    pool.join()\n    print(result_list)\n\nif __name__ == '__main__':\n    apply_async_with_callback()\n[1, 0, 4, 9, 25, 16, 49, 36, 81, 64]\npool.mappool.mapPool.applyPool.applyPool.applyPool.apply_asyncPool.apply_asyncPool.apply_asyncPool.mapPool.map"}, {"idx": "webquery-test-10", "doc": "Pandas index column title or name", "code": "nameIn [7]: df.index.name\nOut[7]: 'Index Title'\n\nIn [8]: df.index.name = 'foo'\n\nIn [9]: df.index.name\nOut[9]: 'foo'\n\nIn [10]: df\nOut[10]: \n         Column 1\nfoo              \nApples          1\nOranges         2\nPuppies         3\nDucks           4\n"}, {"idx": "webquery-test-11", "doc": "How do I define a function with optional arguments?", "code": "*args*args*args*argsdef myfunc(a,b, *args, **kwargs):\n   for ar in args:\n      print ar\nmyfunc(a,b,c,d,e,f)\nc,d,e,fkwargsdef myfunc(a,b, *args, **kwargs):\n      c = kwargs.get('c', None)\n      d = kwargs.get('d', None)\n      #etc\nmyfunc(a,b, c='nick', d='dog', ...)\nkwargskwargs"}, {"idx": "webquery-test-12", "doc": "How to check whether a file is empty or not", "code": "&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.stat(\"file\").st_size == 0\nTrue\n"}, {"idx": "webquery-test-13", "doc": "Concatenating two one-dimensional NumPy arrays", "code": "np.concatenate([a, b])\nnumpy.concatenate((a1, a2, ...), axis=0)b"}, {"idx": "webquery-test-14", "doc": "Is it bad to have my virtualenv directory inside my git repository?", "code": "pip freezepip freeze"}, {"idx": "webquery-test-15", "doc": "Named tuple and default values for optional keyword arguments", "code": "&gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; fields = ('val', 'left', 'right')\n&gt;&gt;&gt; Node = namedtuple('Node', fields, defaults=(None,) * len(fields))\n&gt;&gt;&gt; Node()\nNode(val=None, left=None, right=None)\n&gt;&gt;&gt; from dataclasses import dataclass\n&gt;&gt;&gt; from typing import Any\n&gt;&gt;&gt; @dataclass\n... class Node:\n...     val: Any = None\n...     left: 'Node' = None\n...     right: 'Node' = None\n&gt;&gt;&gt; Node()\nNode(val=None, left=None, right=None)\nNode.__new__.__defaults__&gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; Node = namedtuple('Node', 'val left right')\n&gt;&gt;&gt; Node.__new__.__defaults__ = (None,) * len(Node._fields)\n&gt;&gt;&gt; Node()\nNode(val=None, left=None, right=None)\nNode.__new__.func_defaults&gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; Node = namedtuple('Node', 'val left right')\n&gt;&gt;&gt; Node.__new__.func_defaults = (None,) * len(Node._fields)\n&gt;&gt;&gt; Node()\nNode(val=None, left=None, right=None)\n&gt;&gt;&gt; Node.__new__.__defaults__ = (1,2)\n&gt;&gt;&gt; Node()\nTraceback (most recent call last):\n  ...\nTypeError: __new__() missing 1 required positional argument: 'val'\n&gt;&gt;&gt; Node(3)\nNode(val=3, left=1, right=2)\nNoneimport collections\ndef namedtuple_with_defaults(typename, field_names, default_values=()):\n    T = collections.namedtuple(typename, field_names)\n    T.__new__.__defaults__ = (None,) * len(T._fields)\n    if isinstance(default_values, collections.Mapping):\n        prototype = T(**default_values)\n    else:\n        prototype = T(*default_values)\n    T.__new__.__defaults__ = tuple(prototype)\n    return T\n&gt;&gt;&gt; Node = namedtuple_with_defaults('Node', 'val left right')\n&gt;&gt;&gt; Node()\nNode(val=None, left=None, right=None)\n&gt;&gt;&gt; Node = namedtuple_with_defaults('Node', 'val left right', [1, 2, 3])\n&gt;&gt;&gt; Node()\nNode(val=1, left=2, right=3)\n&gt;&gt;&gt; Node = namedtuple_with_defaults('Node', 'val left right', {'right':7})\n&gt;&gt;&gt; Node()\nNode(val=None, left=None, right=7)\n&gt;&gt;&gt; Node(4)\nNode(val=4, left=None, right=7)\n"}, {"idx": "webquery-test-16", "doc": "How to find which version of TensorFlow is installed in my system?", "code": "python -c 'import tensorflow as tf; print(tf.__version__)'  # for Python 2\npython3 -c 'import tensorflow as tf; print(tf.__version__)'  # for Python 3\npythonpythonpythonpythonpip list | grep tensorflowpip list | grep tensorflowpython -c 'import tensorflow as tf; print(tf.__version__)'  # for both Python 2 and Python 3\npip list | grep tensorflowvirtualenv$ python -c 'import tensorflow as tf; print(tf.__version__)'\n0.9.0\n\n$ pip list | grep tensorflow\ntensorflow (0.9.0)\n"}, {"idx": "webquery-test-1", "doc": "How to start a background process in Python?", "code": "subprocessimport subprocess\nsubprocess.Popen([\"rm\",\"-r\",\"some.file\"])\nrm -r some.filerm -r some.filerm -r some.fileimport subprocess\nls_output=subprocess.Popen([\"sleep\", \"30\"])\nls_output.communicate()  # Will block for 30 seconds\n"}, {"idx": "webquery-test-2", "doc": "What's the scope of a variable initialized in an if statement?", "code": "ifififfor"}, {"idx": "webquery-test-3", "doc": "Actual meaning of 'shell=True' in subprocess", "code": "SHELLILSILSILSshell=False"}, {"idx": "webquery-test-4", "doc": "Using Pip to install packages to Anaconda Environment", "code": "conda create -n venv_nameconda create -n venv_nameconda create -n venv_nameconda create -n venv_nameconda create -n venv_nameconda create -n venv_name"}, {"idx": "webquery-test-5", "doc": "Print multiple arguments in Python", "code": "%print(\"Total score for %s is %s\" % (name, score))\n('this',)print(\"Total score for %(n)s is %(s)s\" % {'n': name, 's': score})\nprint(\"Total score for {} is {}\".format(name, score))\nprint(\"Total score for {} is {}\".format(name, score))\nprint(\"Total score for {} is {}\".format(name, score))\nprint(\"Total score for {} is {}\".format(name, score))\nprint(\"Total score for\", name, \"is\", score)\nprint(\"Total score for\", name, \"is\", score)\nprint(\"Total score for\", name, \"is\", score)\nprint(\"Total score for\", name, \"is\", score)\nprint(\"Total score for\", name, \"is\", score)\nprint(\"Total score for\", name, \"is\", score)\nprint(\"Total score for\", name, \"is\", score)\nprint(\"Total score for\", name, \"is\", score)\nprint(\"Total score for\", name, \"is\", score)\n"}, {"idx": "webquery-test-6", "doc": "Measuring elapsed time with the Time module", "code": "start_time = time.time()\n# your code\nelapsed_time = time.time() - start_time\nimport time\nfrom functools import wraps\n\nPROF_DATA = {}\n\ndef profile(fn):\n    @wraps(fn)\n    def with_profiling(*args, **kwargs):\n        start_time = time.time()\n\n        ret = fn(*args, **kwargs)\n\n        elapsed_time = time.time() - start_time\n\n        if fn.__name__ not in PROF_DATA:\n            PROF_DATA[fn.__name__] = [0, []]\n        PROF_DATA[fn.__name__][0] += 1\n        PROF_DATA[fn.__name__][1].append(elapsed_time)\n\n        return ret\n\n    return with_profiling\n\ndef print_prof_data():\n    for fname, data in PROF_DATA.items():\n        max_time = max(data[1])\n        avg_time = sum(data[1]) / len(data[1])\n        print \"Function %s called %d times. \" % (fname, data[0]),\n        print 'Execution time max: %.3f, average: %.3f' % (max_time, avg_time)\n\ndef clear_prof_data():\n    global PROF_DATA\n    PROF_DATA = {}\n@profile\ndef your_function(...):\n    ...\n"}, {"idx": "webquery-test-7", "doc": "How to convert SQLAlchemy row object to a Python dict?", "code": "__dict__for u in session.query(User).all():\n    print u.__dict__\n"}, {"idx": "webquery-test-8", "doc": "pandas get rows which are NOT in other dataframe", "code": "df1df1df1df1 = pd.DataFrame(data = {'col1' : [1, 2, 3, 4, 5, 3], \n                           'col2' : [10, 11, 12, 13, 14, 10]}) \ndf2 = pd.DataFrame(data = {'col1' : [1, 2, 3],\n                           'col2' : [10, 11, 12]})\n\ndf1\n\n   col1  col2\n0     1    10\n1     2    11\n2     3    12\n3     4    13\n4     5    14\n5     3    10\n\ndf2\n\n   col1  col2\n0     1    10\n1     2    11\n2     3    12\ndf2df2df2df2df_all = df1.merge(df2.drop_duplicates(), on=['col1','col2'], \n                   how='left', indicator=True)\ndf_all\n\n   col1  col2     _merge\n0     1    10       both\n1     2    11       both\n2     3    12       both\n3     4    13  left_only\n4     5    14  left_only\n5     3    10  left_only\ndf_all['_merge'] == 'left_only'\n\n0    False\n1    False\n2    False\n3     True\n4     True\n5     True\nName: _merge, dtype: bool\ndf2common = df1.merge(df2,on=['col1','col2'])\n(~df1.col1.isin(common.col1))&amp;(~df1.col2.isin(common.col2))\n0    False\n1    False\n2    False\n3     True\n4     True\n5    False\ndtype: bool\ndf1.isin(df2.to_dict('l')).all(1)\n"}, {"idx": "webquery-test-9", "doc": "Is it possible only to declare a variable without assigning any value in Python?", "code": "var = None\nNone"}, {"idx": "webquery-test-10", "doc": "How can I convert each item in the list to string, for the purpose of joining them?", "code": "str(...),print(','.join(str(x) for x in list_of_ints))\n"}, {"idx": "webquery-test-11", "doc": "What does asterisk * mean in Python?", "code": "*identifier*identifier# Excess keyword argument (python 2) example:\ndef foo(a, b, c, **args):\n    print \"a = %s\" % (a,)\n    print \"b = %s\" % (b,)\n    print \"c = %s\" % (c,)\n    print args\n\nfoo(a=\"testa\", d=\"excess\", c=\"testc\", b=\"testb\", k=\"another_excess\")\na, b, ca, b, ca, b, ca, b, ca = testa\nb = testb\nc = testc\n{'k': 'another_excess', 'd': 'excess'}\n# Excess positional argument (python 2) example:\ndef foo(a, b, c, *args):\n    print \"a = %s\" % (a,)\n    print \"b = %s\" % (b,)\n    print \"c = %s\" % (c,)\n    print args\n\nfoo(\"testa\", \"testb\", \"testc\", \"excess\", \"another_excess\")\n*argsa = testa\nb = testb\nc = testc\n('excess', 'another_excess')\ndef foo(a,b,c,**args):\n    print \"a=%s\" % (a,)\n    print \"b=%s\" % (b,)\n    print \"c=%s\" % (c,)\n    print \"args=%s\" % (args,)\n\nargdict = dict(a=\"testa\", b=\"testb\", c=\"testc\", excessarg=\"string\")\nfoo(**argdict)\na=testa\nb=testb\nc=testc\nargs={'excessarg': 'string'}\ndef foo(a,b,c,*args):\n    print \"a=%s\" % (a,)\n    print \"b=%s\" % (b,)\n    print \"c=%s\" % (c,)\n    print \"args=%s\" % (args,)\n\nargtuple = (\"testa\",\"testb\",\"testc\",\"excess\")\nfoo(*argtuple)\na=testa\nb=testb\nc=testc\nargs=('excess',)\n"}, {"idx": "webquery-test-12", "doc": "How can I call a function within a class?", "code": "selfdef isNear(self, p):\n    self.distToPoint(p)\n    ...\n"}, {"idx": "webquery-test-13", "doc": "Difference in boto3 between resource, client, and session?", "code": "import boto3\n\nclient = boto3.client('s3')\n\nresponse = client.list_objects_v2(Bucket='mybucket')\n\nfor content in response['Contents']:\n    obj_dict = client.get_object(Bucket='mybucket', Key=content['Key'])\n    print(content['Key'], obj_dict['LastModified'])\ncalling list_objects_v2()import boto3\n\ns3 = boto3.resource('s3')\n\nbucket = s3.Bucket('mybucket')\n\nfor obj in bucket.objects.all():\n    print(obj.key, obj.last_modified)\nResourceResource"}, {"idx": "webquery-test-14", "doc": "Django datetime issues (default=datetime.now())", "code": "datetime.now()date = models.DateTimeField(auto_now_add=True, blank=True)\ndate = models.DateTimeField(default=datetime.now, blank=True)\ndatetime.nowdatetime.now"}, {"idx": "webquery-test-15", "doc": "What's the best way to generate a UML diagram from Python source code?", "code": "pyreverse -o png -p yourpackage .\n."}, {"idx": "webquery-test-16", "doc": "How to retry after exception?", "code": "while Truewhile Truewhile Truefor i in range(0,100):\n    while True:\n        try:\n            # do stuff\n        except SomeSpecificException:\n            continue\n        break\n"}, {"idx": "webquery-test-17", "doc": "Getting list of parameter names inside python function", "code": "inspect&gt;&gt;&gt; func = lambda x, y: (x, y)\n&gt;&gt;&gt; \n&gt;&gt;&gt; func.__code__.co_argcount\n2\n&gt;&gt;&gt; func.__code__.co_varnames\n('x', 'y')\n&gt;&gt;&gt;\n&gt;&gt;&gt; def func2(x,y=3):\n...  print(func2.__code__.co_varnames)\n...  pass # Other things\n... \n&gt;&gt;&gt; func2(3,3)\n('x', 'y')\n&gt;&gt;&gt; \n&gt;&gt;&gt; func2.__defaults__\n(3,)\nfunc_codefunc_codefunc_codefunc_code"}, {"idx": "webquery-test-1", "doc": "How to empty a list?", "code": "del lst[:]\nlst1 = [1, 2, 3]\nlst2 = lst1\ndel lst1[:]\nprint(lst2)\nlst[:] = []\nlst = []lst = []"}, {"idx": "webquery-test-2", "doc": "SQLAlchemy IN clause", "code": "session.query(MyUserClass).filter(MyUserClass.id.in_((123,456))).all()\nsession.execute(\n    select(\n        [MyUserTable.c.id, MyUserTable.c.name], \n        MyUserTable.c.id.in_((123, 456))\n    )\n).fetchall()\nselect()select()select()select()"}, {"idx": "webquery-test-3", "doc": "How do I get user IP address in Django?", "code": "def get_client_ip(request):\n    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')\n    if x_forwarded_for:\n        ip = x_forwarded_for.split(',')[0]\n    else:\n        ip = request.META.get('REMOTE_ADDR')\n    return ip\nmod_rpafX-Forwarded-Forget_client_ip(request)\n"}, {"idx": "webquery-test-4", "doc": "Matplotlib different size subplots", "code": "subplotssubplotssubplotssubplotsimport numpy as np\nimport matplotlib.pyplot as plt \n\n# generate some data\nx = np.arange(0, 10, 0.2)\ny = np.sin(x)\n\n# plot it\nf, (a0, a1) = plt.subplots(1, 2, gridspec_kw={'width_ratios': [3, 1]})\na0.plot(x, y)\na1.plot(y, x)\n\nf.tight_layout()\nf.savefig('grid_figure.pdf')\n# plot it\nf, (a0, a1, a2) = plt.subplots(3, 1, gridspec_kw={'height_ratios': [1, 1, 3]})\n\na0.plot(x, y)\na1.plot(x, y)\na2.plot(x, y)\n\nf.tight_layout()\n"}, {"idx": "webquery-test-5", "doc": "When I catch an exception, how do I get the type, file, and line number?", "code": "import sys, os\n\ntry:\n    raise NotImplementedError(\"No error\")\nexcept Exception as e:\n    exc_type, exc_obj, exc_tb = sys.exc_info()\n    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]\n    print(exc_type, fname, exc_tb.tb_lineno)\n"}, {"idx": "webquery-test-6", "doc": "Reverse colormap in matplotlib", "code": "_r"}, {"idx": "webquery-test-7", "doc": "Pandas read in table without headers", "code": "header=Noneheader=Nonedf = pd.read_csv(file_path, header=None, usecols=[3,6])\n"}, {"idx": "webquery-test-8", "doc": "How do I put a variable\u2019s value inside a string (interpolate it into the string)?", "code": "plot.savefig(f'hanning{num}.pdf')\nstr.format()plot.savefig('hanning{0}.pdf'.format(num))\nplot.savefig('hanning' + str(num) + '.pdf')\nplot.savefig('hanning%s.pdf' % num)\nplot.savefig('hanning%(num)s.pdf' % locals())\nstring.Templateplot.savefig(string.Template('hanning${num}.pdf').substitute(locals()))\n"}, {"idx": "webquery-test-9", "doc": "Find object in list that has attribute equal to some value (that meets any condition)", "code": "next((x for x in test_list if x.value == value), None)\nNonefor x in test_list:\n    if x.value == value:\n        print(\"i found it!\")\n        break\nfor x in test_list:\n    if x.value == value:\n        print(\"i found it!\")\n        break\nelse:\n    x = None\nNoneNoneNone"}, {"idx": "webquery-test-10", "doc": "Why doesn't list have safe \"get\" method like dictionary?", "code": ".get.get.get.getdef safe_list_get (l, idx, default):\n  try:\n    return l[idx]\n  except IndexError:\n    return default\n__builtins__.list__builtins__.list__builtins__.list__builtins__.list"}, {"idx": "webquery-test-11", "doc": "Loop backwards using indices", "code": "range(100,-1,-1)"}, {"idx": "webquery-test-12", "doc": "How to prevent tensorflow from allocating the totality of a GPU memory?", "code": "tf.Sessiontf.Sessiontf.Session# Assume that you have 12GB of GPU memory and want to allocate ~4GB:\ngpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.333)\n\nsess = tf.Session(config=tf.ConfigProto(gpu_options=gpu_options))\nper_process_gpu_memory_fraction"}, {"idx": "webquery-test-13", "doc": "What are some common uses for Python decorators?", "code": "def time_dec(func):\n\n  def wrapper(*arg):\n      t = time.clock()\n      res = func(*arg)\n      print func.func_name, time.clock()-t\n      return res\n\n  return wrapper\n\n\n@time_dec\ndef myFunction(n):\n    ...\n"}, {"idx": "webquery-test-14", "doc": "A weighted version of random.choice", "code": "choicefrom numpy.random import choice\ndraw = choice(list_of_candidates, number_of_items_to_pick,\n              p=probability_distribution)\nprobability_distributionprobability_distributionprobability_distribution"}, {"idx": "webquery-test-15", "doc": "Convert 2D float array to 2D int array in NumPy", "code": "astype&gt;&gt;&gt; x = np.array([[1.0, 2.3], [1.3, 2.9]])\n&gt;&gt;&gt; x\narray([[ 1. ,  2.3],\n       [ 1.3,  2.9]])\n&gt;&gt;&gt; x.astype(int)\narray([[1, 2],\n       [1, 2]])\n"}, {"idx": "webquery-test-16", "doc": "How do I Pandas group-by to get sum?", "code": "GroupBy.sumdf.groupby(['Fruit','Name']).sum()\n\nOut[31]: \n               Number\nFruit   Name         \nApples  Bob        16\n        Mike        9\n        Steve      10\nGrapes  Bob        35\n        Tom        87\n        Tony       15\nOranges Bob        67\n        Mike       57\n        Tom        15\n        Tony        1\ndf.groupby(['Name', 'Fruit'])['Number'].sum()"}, {"idx": "webquery-test-1", "doc": "Find string between two substrings", "code": "import re\n\ns = 'asdf=5;iwantthis123jasd'\nresult = re.search('asdf=5;(.*)123jasd', s)\nprint(result.group(1))\n"}, {"idx": "webquery-test-2", "doc": "Running a single test from unittest.TestCase via the command line", "code": "python testMyCase.py MyCase.testItIsHot\n"}, {"idx": "webquery-test-3", "doc": "How to check if a string contains an element from a list in Python", "code": "anyif any(ext in url_string for ext in extensionsToCheck):\n    print(url_string)\n"}, {"idx": "webquery-test-4", "doc": "How to get only the last part of a path in Python?", "code": "os.path.normpathos.path.normpath&gt;&gt;&gt; os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))\n'folderD'\nbasenamebasename"}, {"idx": "webquery-test-5", "doc": "Get column index from column name in python pandas", "code": ".get_loc()In [45]: df = DataFrame({\"pear\": [1,2,3], \"apple\": [2,3,4], \"orange\": [3,4,5]})\n\nIn [46]: df.columns\nOut[46]: Index([apple, orange, pear], dtype=object)\n\nIn [47]: df.columns.get_loc(\"pear\")\nOut[47]: 2\ndf[\"pear\"]df[\"pear\"]df[\"pear\"]"}, {"idx": "webquery-test-6", "doc": "Is there a Python equivalent to Ruby's string interpolation?", "code": "name = \"Spongebob Squarepants\"\nprint(f\"Who lives in a Pineapple under the sea? {name}.\")\nname = \"Spongebob Squarepants\"\nprint(\"Who lives in a Pineapple under the sea? %(name)s.\" % locals())\n%%%.format()name = \"Spongebob Squarepants\"\nprint(\"Who lives in a Pineapple under the sea? {name!s}.\".format(**locals()))\nstring.Templatetmpl = string.Template(\"Who lives in a Pineapple under the sea? $name.\")\nprint(tmpl.substitute(name=\"Spongebob Squarepants\"))\n"}, {"idx": "webquery-test-7", "doc": "How to use filter, map, and reduce in Python 3", "code": "map()map()map()map()map()reduce()reduce()reduce()"}, {"idx": "webquery-test-8", "doc": "Pandas: drop a level from a multi-level column index?", "code": "MultiIndex.droplevel&gt;&gt;&gt; cols = pd.MultiIndex.from_tuples([(\"a\", \"b\"), (\"a\", \"c\")])\n&gt;&gt;&gt; df = pd.DataFrame([[1,2], [3,4]], columns=cols)\n&gt;&gt;&gt; df\n   a   \n   b  c\n0  1  2\n1  3  4\n\n[2 rows x 2 columns]\n&gt;&gt;&gt; df.columns = df.columns.droplevel()\n&gt;&gt;&gt; df\n   b  c\n0  1  2\n1  3  4\n\n[2 rows x 2 columns]\n"}, {"idx": "webquery-test-9", "doc": "Lazy Method for Reading Big File in Python?", "code": "yielddef read_in_chunks(file_object, chunk_size=1024):\n    \"\"\"Lazy function (generator) to read a file piece by piece.\n    Default chunk size: 1k.\"\"\"\n    while True:\n        data = file_object.read(chunk_size)\n        if not data:\n            break\n        yield data\n\n\nwith open('really_big_file.dat') as f:\n    for piece in read_in_chunks(f):\n        process_data(piece)\niterf = open('really_big_file.dat')\ndef read1k():\n    return f.read(1024)\n\nfor piece in iter(read1k, ''):\n    process_data(piece)\nfor line in open('really_big_file.dat'):\n    process_data(line)\n"}, {"idx": "webquery-test-10", "doc": "Pythonic way to combine for-loop and if-statement", "code": "gen = (x for x in xyz if x not in a)\n\nfor x in gen:\n    print(x)\n"}, {"idx": "webquery-test-11", "doc": "Is there a difference between continue and pass in a for loop in Python?", "code": "passpasspasspasspass&gt;&gt;&gt; a = [0, 1, 2]\n&gt;&gt;&gt; for element in a:\n...     if not element:\n...         pass\n...     print(element)\n... \n0\n1\n2\n&gt;&gt;&gt; for element in a:\n...     if not element:\n...         continue\n...     print(element)\n... \n1\n2\n"}, {"idx": "webquery-test-12", "doc": "Print in one line dynamically", "code": "print itemprint item,print item,print(item, sep=' ', end='', flush=True)"}, {"idx": "webquery-test-13", "doc": "How to execute a file within the Python interpreter?", "code": "python someFile.py\npython someFile.py\npython someFile.py\n"}, {"idx": "webquery-test-14", "doc": "How to pip install a package with min and max version range?", "code": "$ pip install \"package&gt;=0.2,&lt;0.3\"\npip"}, {"idx": "webquery-test-15", "doc": "All combinations of a list of lists", "code": "itertools.product&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; a = [[1,2,3],[4,5,6],[7,8,9,10]]\n&gt;&gt;&gt; list(itertools.product(*a))\n[(1, 4, 7), (1, 4, 8), (1, 4, 9), (1, 4, 10), (1, 5, 7), (1, 5, 8), (1, 5, 9), (1, 5, 10), (1, 6, 7), (1, 6, 8), (1, 6, 9), (1, 6, 10), (2, 4, 7), (2, 4, 8), (2, 4, 9), (2, 4, 10), (2, 5, 7), (2, 5, 8), (2, 5, 9), (2, 5, 10), (2, 6, 7), (2, 6, 8), (2, 6, 9), (2, 6, 10), (3, 4, 7), (3, 4, 8), (3, 4, 9), (3, 4, 10), (3, 5, 7), (3, 5, 8), (3, 5, 9), (3, 5, 10), (3, 6, 7), (3, 6, 8), (3, 6, 9), (3, 6, 10)]\n"}, {"idx": "webquery-test-16", "doc": "Keep only date part when using pandas.to_datetime", "code": "0.15.00.15.0df['just_date'] = df['dates'].dt.date\ndatetime.datedatetime.datedatetime.datedatetime.datedf['normalised_date'] = df['dates'].dt.normalize()\ndtypedtypedtype.dt.dt"}, {"idx": "webquery-test-17", "doc": "Is __init__.py not required for packages in Python 3.3+", "code": "__init__.py__init__.py__init__.pygoogle_pubsub/              &lt;- Package 1\n    google/                 &lt;- Namespace package (there is no __init__.py)\n        cloud/              &lt;- Namespace package (there is no __init__.py)\n            pubsub/         &lt;- Regular package (with __init__.py)\n                __init__.py &lt;- Required to make the package a regular package\n                foo.py\n\ngoogle_storage/             &lt;- Package 2\n    google/                 &lt;- Namespace package (there is no __init__.py)\n        cloud/              &lt;- Namespace package (there is no __init__.py)\n            storage/        &lt;- Regular package (with __init__.py)\n                __init__.py &lt;- Required to make the package a regular package\n                bar.py\ngoogle_pubsubgoogle_pubsubgoogle_pubsubgoogle_pubsubgoogle_pubsub__init__py__init__py__init__py__init__py__init__py__init__pysys.pathsys.pathsys.path__init__.py__init__.py__init__.py__init__.py__init__.py"}, {"idx": "webquery-test-18", "doc": "How to split a list based on a condition?", "code": "good, bad = [], []\nfor x in mylist:\n    (bad, good)[x in goodvals].append(x)\n"}, {"idx": "webquery-test-19", "doc": "Add list to set", "code": "set.update()set.update()&gt;&gt;&gt; a = set('abc')\n&gt;&gt;&gt; a\n{'a', 'b', 'c'}\n\n&gt;&gt;&gt; xs = ['d', 'e']\n&gt;&gt;&gt; a.update(xs)\n&gt;&gt;&gt; a\n{'e', 'b', 'c', 'd', 'a'}\n\n&gt;&gt;&gt; xs = ['f', 'g']\n&gt;&gt;&gt; a |= set(xs)\n&gt;&gt;&gt; a\n{'e', 'b', 'f', 'c', 'd', 'g', 'a'}\n&gt;&gt;&gt; a = {('a', 'b', 'c')}\n\n&gt;&gt;&gt; xs = ['d', 'e']\n&gt;&gt;&gt; a.add(tuple(xs))\n&gt;&gt;&gt; a\n{('a', 'b', 'c'), ('d', 'e')}\n"}, {"idx": "webquery-test-1", "doc": "How do I check which version of NumPy I'm using?", "code": "import numpy\nnumpy.version.version\n"}, {"idx": "webquery-test-2", "doc": "ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()", "code": "aaaa &amp; b\n(a &amp; b).any()\n(a &amp; b).all()\naaaaTrueTrueTrueTrueTrueValueErrorValueErrorValueErrorValueError"}, {"idx": "webquery-test-3", "doc": "Auto reloading python Flask app upon code changes", "code": "flask runflask runflask run$ flask --app main.py --debug run\n--app--app--app--app$ flask run --help\nFLASK_APPFLASK_APP$ export FLASK_APP=main.py\n$ export FLASK_ENV=development\n$ flask run\nFLASK_APPFLASK_APP"}, {"idx": "webquery-test-4", "doc": "List of zeros in python", "code": "#add code here to figure out the number of 0's you need, naming the variable n.\nlistofzeros = [0] * n\nreturn listofzerosdef zerolistmaker(n):\n    listofzeros = [0] * n\n    return listofzeros\n&gt;&gt;&gt; zerolistmaker(4)\n[0, 0, 0, 0]\n&gt;&gt;&gt; zerolistmaker(5)\n[0, 0, 0, 0, 0]\n&gt;&gt;&gt; zerolistmaker(15)\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n&gt;&gt;&gt; \n"}, {"idx": "webquery-test-5", "doc": "Python function global variables?", "code": "globalglobal someVar\nsomeVar = 55\n"}, {"idx": "webquery-test-6", "doc": "What is the right way to treat Python argparse.Namespace() as a dictionary?", "code": "&gt;&gt;&gt; import argparse\n&gt;&gt;&gt; args = argparse.Namespace()\n&gt;&gt;&gt; args.foo = 1\n&gt;&gt;&gt; args.bar = [1,2,3]\n&gt;&gt;&gt; d = vars(args)\n&gt;&gt;&gt; d\n{'foo': 1, 'bar': [1, 2, 3]}\n&gt;&gt;&gt; d['baz'] = 'store me'\n&gt;&gt;&gt; args.baz\n'store me'\n"}, {"idx": "webquery-test-7", "doc": "`from ... import` vs `import .`", "code": "from urllib import request\n# access request directly.\nmine = request()\n\nimport urllib.request\n# used as urllib.request\nmine = urllib.request()\nfrom os import open as open_\n# lets you use os.open without destroying the \n# built in open() which returns file handles.\n"}, {"idx": "webquery-test-8", "doc": "Using Pandas to pd.read_excel() for multiple worksheets of the same workbook", "code": "pd.ExcelFilexls = pd.ExcelFile('path_to_file.xls')\ndf1 = pd.read_excel(xls, 'Sheet1')\ndf2 = pd.read_excel(xls, 'Sheet2')\nExcelFile()sheet_namesheet_namesheet_namesheet_nameNoneNone"}, {"idx": "webquery-test-9", "doc": "How can I mock requests and the response?", "code": "import requests\nimport unittest\nfrom unittest import mock\n\n# This is the class we want to test\nclass MyGreatClass:\n    def fetch_json(self, url):\n        response = requests.get(url)\n        return response.json()\n\n# This method will be used by the mock to replace requests.get\ndef mocked_requests_get(*args, **kwargs):\n    class MockResponse:\n        def __init__(self, json_data, status_code):\n            self.json_data = json_data\n            self.status_code = status_code\n\n        def json(self):\n            return self.json_data\n\n    if args[0] == 'http://someurl.com/test.json':\n        return MockResponse({\"key1\": \"value1\"}, 200)\n    elif args[0] == 'http://someotherurl.com/anothertest.json':\n        return MockResponse({\"key2\": \"value2\"}, 200)\n\n    return MockResponse(None, 404)\n\n# Our test case class\nclass MyGreatClassTestCase(unittest.TestCase):\n\n    # We patch 'requests.get' with our own method. The mock object is passed in to our test case method.\n    @mock.patch('requests.get', side_effect=mocked_requests_get)\n    def test_fetch(self, mock_get):\n        # Assert requests.get calls\n        mgc = MyGreatClass()\n        json_data = mgc.fetch_json('http://someurl.com/test.json')\n        self.assertEqual(json_data, {\"key1\": \"value1\"})\n        json_data = mgc.fetch_json('http://someotherurl.com/anothertest.json')\n        self.assertEqual(json_data, {\"key2\": \"value2\"})\n        json_data = mgc.fetch_json('http://nonexistenturl.com/cantfindme.json')\n        self.assertIsNone(json_data)\n\n        # We can even assert that our mocked method was called with the right parameters\n        self.assertIn(mock.call('http://someurl.com/test.json'), mock_get.call_args_list)\n        self.assertIn(mock.call('http://someotherurl.com/anothertest.json'), mock_get.call_args_list)\n\n        self.assertEqual(len(mock_get.call_args_list), 3)\n\nif __name__ == '__main__':\n    unittest.main()\nMyGreatClassMyGreatClassMyGreatClassimport unittest\nfrom unittest import mock\nfrom my.great.package import MyGreatClass\n\n# This method will be used by the mock to replace requests.get\ndef mocked_requests_get(*args, **kwargs):\n    # Same as above\n\n\nclass MyGreatClassTestCase(unittest.TestCase):\n\n    # Now we must patch 'my.great.package.requests.get'\n    @mock.patch('my.great.package.requests.get', side_effect=mocked_requests_get)\n    def test_fetch(self, mock_get):\n        # Same as above\n\nif __name__ == '__main__':\n    unittest.main()\n"}, {"idx": "webquery-test-10", "doc": "Search and replace a line in a file in Python", "code": "import fileinput\n\nfor line in fileinput.input(\"test.txt\", inplace=True):\n    print('{} {}'.format(fileinput.filelineno(), line), end='') # for Python 3\n    # print \"%d: %s\" % (fileinput.filelineno(), line), # for Python 2\nprintfileinputfileinputfileinputfileinput"}, {"idx": "webquery-test-11", "doc": "Pandas Replace NaN with blank/empty string", "code": "df = df.fillna('')\n''inplacedf.fillna('', inplace=True)\ndf.column1 = df.column1.fillna('')\ndf['column1']df['column1']"}, {"idx": "webquery-test-12", "doc": "How to delete an item in a list if it exists?", "code": "ininif thing in some_list: some_list.remove(thing)\nremoveremoveremoveremovewhile thing in some_list: some_list.remove(thing)    \ntry:\n    some_list.remove(thing)\nexcept ValueError:\n    pass # or scream: thing not in some_list!\nexcept AttributeError:\n    call_security(\"some_list not quacking like a list!\")\nwhile True:\n    try:\n        some_list.remove(thing)\n    except ValueError:\n        break\nwith suppress(ValueError, AttributeError):\n    some_list.remove(thing)\nwith suppress(ValueError):\n    while True:\n        some_list.remove(thing)\nlambdalambdalambdalambdalambdais_not_thing = lambda x: x is not thing\ncleaned_list = filter(is_not_thing, some_list)\nbool(item) == Falsebool(item) == Falsecleaned_list = filter(None, some_list)\nfilter(function, iterable)filter(function, iterable)filter(function, iterable)filter(function, iterable)filter(function, iterable)filter(function, iterable)filter(function, iterable)filter(function, iterable)filter(function, iterable)filter(function, iterable)filter(function, iterable)map()map()cleaned_list = [ x for x in some_list if x is not thing ]\nfor item in (x for x in some_list if x is not thing):\n    do_your_thing_with(item)\n!=!="}, {"idx": "webquery-test-13", "doc": "Why are scripting languages (e.g. Perl, Python, and Ruby) not suitable as shell languages?", "code": "123123123123COMMAND.COMCOMMAND.COMCOMMAND.COM123123Action-ObjectAction-ObjectAction-ObjectAction-ObjectAction-ObjectAction-ObjectAction-ObjectAction-ObjectAction-Object"}, {"idx": "webquery-test-14", "doc": "How do I filter query objects by date range in Django?", "code": "Sample.objects.filter(date__range=[\"2011-01-01\", \"2011-01-31\"])\nSample.objects.filter(date__year='2011', \n                      date__month='01')\nspecified range ends"}, {"idx": "webquery-test-15", "doc": "How do I get the object if it exists, or None if it does not exist in Django?", "code": "try:\n    go = SomeModel.objects.get(foo='bar')\nexcept SomeModel.DoesNotExist:\n    go = None\nsafe_getsafe_get"}, {"idx": "webquery-test-16", "doc": "NumPy array initialization (fill with identical values)", "code": "np.full()np.full()np.full()&gt;&gt;&gt; np.full((3, 5), 7)\narray([[ 7.,  7.,  7.,  7.,  7.],\n       [ 7.,  7.,  7.,  7.,  7.],\n       [ 7.,  7.,  7.,  7.,  7.]])\n\n&gt;&gt;&gt; np.full((3, 5), 7, dtype=int)\narray([[7, 7, 7, 7, 7],\n       [7, 7, 7, 7, 7],\n       [7, 7, 7, 7, 7]])\n"}, {"idx": "webquery-test-1", "doc": "Test if executable exists in Python?", "code": "distutils.spawn.find_executableimport distutils.spawn\ndistutils.spawn.find_executable(\"notepad.exe\")\nshutil.which()"}, {"idx": "webquery-test-2", "doc": "How do I look inside a Python object?", "code": "type()type()type()type()type()type()type()type()type()type()"}, {"idx": "webquery-test-3", "doc": "How to change plot background color?", "code": "set_facecolor(color)set_facecolor(color)fig, ax = plt.subplots(nrows=1, ncols=1)\nfig, ax = plt.subplots(nrows=1, ncols=1)\nfig, ax = plt.subplots(nrows=1, ncols=1)\nset_facecolorax.set_facecolor('xkcd:salmon')\nax.set_facecolor((1.0, 0.47, 0.42))\n[0, 1][0, 1][0, 1][0, 1][0, 1][0, 1][0, 1][0, 1][0, 1][0, 1][0, 1][0, 1]"}, {"idx": "webquery-test-4", "doc": "Most efficient way to reverse a numpy array", "code": "reversed_arr = arr[::-1]\narrarrarrarrarrarr = np.array(some_sequence)\nreversed_arr = arr[::-1]\n\ndo_something(arr)\nlook_at(reversed_arr)\ndo_something_else(arr)\nlook_at(reversed_arr)\n"}, {"idx": "webquery-test-5", "doc": "What is the difference between ndarray and array in NumPy?", "code": "numpy.arraynumpy.arraynumpy.ndarraynumpy.ndarrayarrayarrayarrayarray"}, {"idx": "webquery-test-6", "doc": "How do I update Anaconda?", "code": "rootrootconda update --all\nconda update -n base condaconda update -n base condaconda update -n base condabasebasebasebasebaseconda update -n dspyr --all\nastroidastroidconda update astroid astropy\ncustombaseconda create -n myspecialenv -c bioconda -c conda-forge python=3.5 pandas beautifulsoup seaborn nltk\npippippipbasebaseconda create -n myenv --clone base\nconda update -n myenv --all\n"}, {"idx": "webquery-test-7", "doc": "Frequency counts for unique values in a NumPy array", "code": "numpy.uniquenumpy.uniqueimport numpy as np\n\nx = np.array([1,1,1,2,2,2,5,25,1,1])\nunique, counts = np.unique(x, return_counts=True)\n\n&gt;&gt;&gt; print(np.asarray((unique, counts)).T)\n [[ 1  5]\n  [ 2  3]\n  [ 5  1]\n  [25  1]]\nscipy.stats.itemfreqIn [4]: x = np.random.random_integers(0,100,1e6)\n\nIn [5]: %timeit unique, counts = np.unique(x, return_counts=True)\n10 loops, best of 3: 31.5 ms per loop\n\nIn [6]: %timeit scipy.stats.itemfreq(x)\n10 loops, best of 3: 170 ms per loop\n"}, {"idx": "webquery-test-8", "doc": "Django auto_now and auto_now_add", "code": "auto_nowauto_nowauto_nowauto_nowauto_nowauto_nowauto_nowauto_nowauto_nowauto_nowauto_nowsave()from django.utils import timezone\n\nclass User(models.Model):\n    created     = models.DateTimeField(editable=False)\n    modified    = models.DateTimeField()\n\n    def save(self, *args, **kwargs):\n        ''' On save, update timestamps '''\n        if not self.id:\n            self.created = timezone.now()\n        self.modified = timezone.now()\n        return super(User, self).save(*args, **kwargs)\nsave()django.utils.timezone.now()django.utils.timezone.now()django.utils.timezone.now()django.utils.timezone.now()createdcreatedcreatedcreated"}, {"idx": "webquery-test-9", "doc": "Dropping infinite values from dataframes in pandas?", "code": "replace()df.replace([np.inf, -np.inf], np.nan, inplace=True)\ndropna()df.dropna(subset=[\"col1\", \"col2\"], how=\"all\", inplace=True)\n&gt;&gt;&gt; df = pd.DataFrame({\"col1\": [1, np.inf, -np.inf], \"col2\": [2, 3, np.nan]})\n&gt;&gt;&gt; df\n   col1  col2\n0   1.0   2.0\n1   inf   3.0\n2  -inf   NaN\n\n&gt;&gt;&gt; df.replace([np.inf, -np.inf], np.nan, inplace=True)\n&gt;&gt;&gt; df\n   col1  col2\n0   1.0   2.0\n1   NaN   3.0\n2   NaN   NaN\n\n&gt;&gt;&gt; df.dropna(subset=[\"col1\", \"col2\"], how=\"all\", inplace=True)\n&gt;&gt;&gt; df\n   col1  col2\n0   1.0   2.0\n1   NaN   3.0\nSeries"}, {"idx": "webquery-test-10", "doc": "How to use `subprocess` command with pipes", "code": "subprocesssubprocesspspsps = subprocess.Popen(('ps', '-A'), stdout=subprocess.PIPE)\noutput = subprocess.check_output(('grep', 'process_name'), stdin=ps.stdout)\nps.wait()\nsubprocess.check_output(('ps', '-A'))subprocess.check_output(('ps', '-A'))"}, {"idx": "webquery-test-11", "doc": "What is PEP8's E128: continuation line under-indented for visual indent?", "code": "urlpatterns = patterns('',\n                       url(r'^$', listing, name='investment-listing'))\nurlpatterns = patterns(\n    '',\n    url(r'^$', listing, name='investment-listing'),\n)\n\nurlpatterns = patterns(\n    '', url(r'^$', listing, name='investment-listing'))\n"}, {"idx": "webquery-test-12", "doc": "Detect and exclude outliers in a pandas DataFrame", "code": "df = pd.DataFrame(np.random.randn(100, 3))\n\nimport numpy as np\nfrom scipy import stats\ndf[(np.abs(stats.zscore(df)) &lt; 3).all(axis=1)]\nzscorezscorezscoredf[(np.abs(stats.zscore(df[0])) &lt; 3)]\n"}, {"idx": "webquery-test-13", "doc": "How to hide output of subprocess", "code": "import os\nimport subprocess\n\nretcode = subprocess.call(['echo', 'foo'], \n    stdout=subprocess.DEVNULL,\n    stderr=subprocess.STDOUT)\nFNULL = open(os.devnull, 'w')\nretcode = subprocess.call(['echo', 'foo'], \n    stdout=FNULL, \n    stderr=subprocess.STDOUT)\nretcode = os.system(\"echo 'foo' &amp;&gt; /dev/null\")\n"}, {"idx": "webquery-test-14", "doc": "Convert a timedelta to days, hours and minutes", "code": "datetime.timedeltadatetime.timedeltadatetime.timedeltadatetime.timedeltadef days_hours_minutes(td):\n    return td.days, td.seconds//3600, (td.seconds//60)%60\n"}, {"idx": "webquery-test-15", "doc": "How to drop a list of rows from Pandas dataframe?", "code": "In [65]: df\nOut[65]: \n       one  two\none      1    4\ntwo      2    3\nthree    3    2\nfour     4    1\n\n\nIn [66]: df.drop(df.index[[1,3]])\nOut[66]: \n       one  two\none      1    4\nthree    3    2\n"}, {"idx": "webquery-test-16", "doc": "super() raises \"TypeError: must be type, not classobj\" for new-style class", "code": "super()&gt;&gt;&gt; class OldStyle: pass\n&gt;&gt;&gt; instance = OldStyle()\n&gt;&gt;&gt; issubclass(instance.__class__, object)\nFalse\n&gt;&gt;&gt; isinstance(instance, object)\nTrue\n&gt;&gt;&gt; issubclass(OldStyle, object)  # OldStyle is not a new-style class\nFalse\n&gt;&gt;&gt; issubclass(int, object)  # int is a new-style class\nTrue\nOldStyle().__class__OldStyle().__class__OldStyle().__class__OldStyle().__class__OldStyle().__class__OldStyle().__class__OldStyle().__class__OldStyle().__class__OldStyle().__class__OldStyle().__class__OldStyle().__class__OldStyle().__class__OldStyle().__class__&gt;&gt;&gt; type(OldStyle)  # OldStyle creates objects but is not itself a type\nclassobj\n&gt;&gt;&gt; isinstance(OldStyle, type)\nFalse\n&gt;&gt;&gt; type(int)  # A new-style class is a type\ntype\n"}, {"idx": "webquery-test-17", "doc": "No acceptable C compiler found in $PATH when installing python", "code": "$PATH yum groupinstall \"Development Tools\"\n yum groupinstall \"Development Tools\"\n yum groupinstall \"Development Tools\"\n yum groupinstall \"Development Tools\"\n"}, {"idx": "webquery-test-18", "doc": "How do I copy an entire directory of files into an existing directory using Python?", "code": "from distutils.dir_util import copy_tree\ncopy_tree(\"/a/b/c\", \"/x/y/z\")\n"}, {"idx": "webquery-test-1", "doc": "Anaconda vs. miniconda", "code": "conda list2-4.4.0.1"}, {"idx": "webquery-test-2", "doc": "Add column to dataframe with constant value", "code": "df['Name']='abc'In [79]:\n\ndf\nOut[79]:\n         Date, Open, High,  Low,  Close\n0  01-01-2015,  565,  600,  400,    450\nIn [80]:\n\ndf['Name'] = 'abc'\ndf\nOut[80]:\n         Date, Open, High,  Low,  Close Name\n0  01-01-2015,  565,  600,  400,    450  abc\n"}, {"idx": "webquery-test-3", "doc": "how do I insert a column at a specific column index in pandas?", "code": "df.insert(loc, column, value)\ndf = pd.DataFrame({'B': [1, 2, 3], 'C': [4, 5, 6]})\n\ndf\nOut: \n   B  C\n0  1  4\n1  2  5\n2  3  6\n\nidx = 0\nnew_col = [7, 8, 9]  # can be a list, a Series, an array or a scalar   \ndf.insert(loc=idx, column='A', value=new_col)\n\ndf\nOut: \n   A  B  C\n0  7  1  4\n1  8  2  5\n2  9  3  6\n"}, {"idx": "webquery-test-4", "doc": "Transpose list of lists", "code": "# short circuits at shortest nested list if table is jagged:\nlist(map(list, zip(*l)))\n\n# discards no data if jagged and fills short nested lists with None\nlist(map(list, itertools.zip_longest(*l, fillvalue=None)))\nmap(list, zip(*l))\n[[1, 4, 7], [2, 5, 8], [3, 6, 9]]\nzip(*iterables)zip(*iterables)zip(*iterables)zip(*iterables)zip(*iterables)zip(*iterables)zip(*iterables)zip(*iterables)zip(*iterables)l = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]l = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]l = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}, {"idx": "webquery-test-5", "doc": "How do I save a trained model in PyTorch?", "code": "torch.save(the_model.state_dict(), PATH)\ntorch.save(the_model.state_dict(), PATH)\ntorch.save(the_model.state_dict(), PATH)\ntorch.save(the_model.state_dict(), PATH)\n"}, {"idx": "webquery-test-6", "doc": "How to load all modules in a folder?", "code": ".py.py.pyfrom os.path import dirname, basename, isfile, join\nimport glob\nmodules = glob.glob(join(dirname(__file__), \"*.py\"))\n__all__ = [ basename(f)[:-3] for f in modules if isfile(f) and not f.endswith('__init__.py')]\n"}, {"idx": "webquery-test-7", "doc": "Get loop count inside a for-loop", "code": "enumeratefor idx, item in enumerate(my_list):\n"}, {"idx": "webquery-test-8", "doc": "How do I convert a numpy array to (and display) an image?", "code": "from matplotlib import pyplot as plt\nplt.imshow(data, interpolation='nearest')\nplt.show()\n%matplotlib inline \npip install ipympl%matplotlib widget \n"}, {"idx": "webquery-test-9", "doc": "How do you generate dynamic (parameterized) unit tests in Python?", "code": "from parameterized import parameterized\n\nclass TestSequence(unittest.TestCase):\n    @parameterized.expand([\n        [\"foo\", \"a\", \"a\",],\n        [\"bar\", \"a\", \"b\"],\n        [\"lee\", \"b\", \"b\"],\n    ])\n    def test_sequence(self, name, a, b):\n        self.assertEqual(a,b)\ntest_sequence_0_foo (__main__.TestSequence) ... ok\ntest_sequence_1_bar (__main__.TestSequence) ... FAIL\ntest_sequence_2_lee (__main__.TestSequence) ... ok\n\n======================================================================\nFAIL: test_sequence_1_bar (__main__.TestSequence)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/site-packages/parameterized/parameterized.py\", line 233, in &lt;lambda&gt;\n    standalone_func = lambda *a: func(*(a + p.args), **p.kwargs)\n  File \"x.py\", line 12, in test_sequence\n    self.assertEqual(a,b)\nAssertionError: 'a' != 'b'\nimport unittest\n\nl = [[\"foo\", \"a\", \"a\",], [\"bar\", \"a\", \"b\"], [\"lee\", \"b\", \"b\"]]\n\nclass TestSequense(unittest.TestCase):\n    pass\n\ndef test_generator(a, b):\n    def test(self):\n        self.assertEqual(a,b)\n    return test\n\nif __name__ == '__main__':\n    for t in l:\n        test_name = 'test_%s' % t[0]\n        test = test_generator(t[1], t[2])\n        setattr(TestSequense, test_name, test)\n    unittest.main()\n"}, {"idx": "webquery-test-10", "doc": "Converting numpy dtypes to native python types", "code": "val.item()import numpy as np\n\n# for example, numpy.float32 -&gt; python float\nval = np.float32(0)\npyval = val.item()\nprint(type(pyval))         # &lt;class 'float'&gt;\n\n# and similar...\ntype(np.float64(0).item()) # &lt;class 'float'&gt;\ntype(np.uint32(0).item())  # &lt;class 'int'&gt;\ntype(np.int16(0).item())   # &lt;class 'int'&gt;\ntype(np.cfloat(0).item())  # &lt;class 'complex'&gt;\ntype(np.datetime64(0, 'D').item())  # &lt;class 'datetime.date'&gt;\ntype(np.datetime64('2001-01-01 00:00:00').item())  # &lt;class 'datetime.datetime'&gt;\ntype(np.timedelta64(0, 'D').item()) # &lt;class 'datetime.timedelta'&gt;\n...\nnp.asscalar(val)for name in dir(np):\n    obj = getattr(np, name)\n    if hasattr(obj, 'dtype'):\n        try:\n            if 'time' in name:\n                npn = obj(0, 'D')\n            else:\n                npn = obj(0)\n            nat = npn.item()\n            print('{0} ({1!r}) -&gt; {2}'.format(name, npn.dtype.char, type(nat)))\n        except:\n            pass\nclongdoubleclongdoubleclongdoubleclongdoubleclongdoubleclongdoubleclongdoubleclongdoubleclongdouble"}, {"idx": "webquery-test-11", "doc": "Python list subtraction operation", "code": "[item for item in x if item not in y]\n-class MyList(list):\n    def __init__(self, *args):\n        super(MyList, self).__init__(args)\n\n    def __sub__(self, other):\n        return self.__class__(*[item for item in self if item not in other])\nx = MyList(1, 2, 3, 4)\ny = MyList(2, 5, 2)\nz = x - y   \n"}, {"idx": "webquery-test-12", "doc": "Listing contents of a bucket with boto3", "code": "for my_bucket_object in my_bucket.objects.all():\n    print(my_bucket_object)\n"}, {"idx": "webquery-test-13", "doc": "How do I split a multi-line string into multiple lines?", "code": "inputString.splitlines()\nsplitlines()"}, {"idx": "webquery-test-1", "doc": "Check if two unordered lists are equal", "code": "setset(x) == set(y)\nsetsetset&gt;&gt;&gt; import collections\n&gt;&gt;&gt; compare = lambda x, y: collections.Counter(x) == collections.Counter(y)\n&gt;&gt;&gt; \n&gt;&gt;&gt; compare([1,2,3], [1,2,3,3])\nFalse\n&gt;&gt;&gt; compare([1,2,3], [1,2,3])\nTrue\n&gt;&gt;&gt; compare([1,2,3,3], [1,2,2,3])\nFalse\n&gt;&gt;&gt; \n"}, {"idx": "webquery-test-2", "doc": "Generate 'n' unique random numbers within a range", "code": "&gt;&gt;&gt; import random\n&gt;&gt;&gt; random.sample(range(1, 100), 3)\n[77, 52, 45]\nkkkkk&gt;&gt;&gt; try:\n...   random.sample(range(1, 2), 3)\n... except ValueError:\n...   print('Sample size exceeded population size.')\n... \nSample size exceeded population size\n"}, {"idx": "webquery-test-3", "doc": "How do I clone a Django model instance object and save it to the database?", "code": "obj = Foo.objects.get(pk=&lt;some_existing_pk&gt;)\nobj.pk = None\nobj.save()\n"}, {"idx": "webquery-test-4", "doc": "json.dumps vs flask.jsonify", "code": "jsonify()jsonify()jsonify()jsonify()jsonify()jsonify()"}, {"idx": "webquery-test-5", "doc": "Understanding the map function", "code": "mapmap(f, iterable)\n[f(x) for x in iterable]\nmap[(a, b) for a in iterable_a for b in iterable_b]\nresult = []\nfor a in iterable_a:\n    for b in iterable_b:\n        result.append((a, b))\n"}, {"idx": "webquery-test-6", "doc": "What are type hints in Python 3.5?", "code": "TypeErrorsTypeErrorsmypy # type: type # type: typetypingtypingtypingtypingmypy documentation# type: typetyping# Generic List, supports indexing.\nfrom typing import List\n\n# In this case, the type is easily inferred as type: int.\ni = 0\n\n# Even though the type can be inferred as of type list\n# there is no way to know the contents of this list.\n# By using type: List[str] we indicate we want to use a list of strings.\na = []  # type: List[str]\n\n# Appending an int to our list\n# is statically not correct.\na.append(i)\n\n# Appending a string is fine.\na.append(\"i\")\n\nprint(a)  # [0, 'i']\nprint(a)print(a)print(a)mypy(Python3)jimmi@jim: mypy typeHintsCode.py\ntypesInline.py:14: error: Argument 1 to \"append\" of \"list\" has incompatible type \"int\"; expected \"str\"\nstrstrstrstrstrstrstrstrparam_name : typeparam_name : typeparam_name : typeparam_name : typedef annotated(x: int, y: str) -&gt; bool:\n    return x &lt; y\nannotated.__annotations__{'y': &lt;class 'str'&gt;, 'return': &lt;class 'bool'&gt;, 'x': &lt;class 'int'&gt;}\nTypeErrorTypeError(Python3)jimmi@jim: mypy typeHintsCode.py\ntypeFunction.py: note: In function \"annotated\":\ntypeFunction.py:2: error: Unsupported operand types for &gt; (\"str\" and \"int\")\nannotated(20, 20)\n\n# mypy complains:\ntypeHintsCode.py:4: error: Argument 2 to \"annotated\" has incompatible type \"int\"; expected \"str\"\ntypingtyping.pyi.pyidef message(s):\n    print(s)\n\ndef alterContents(myIterable):\n    return [i for i in myIterable if i % 2 == 0]\n\ndef combine(messageFunc, itFunc):\n    messageFunc(\"Printing the Iterable\")\n    a = alterContents(range(1, 20))\n    return set(a)\nrandfunc.pyipasspass# Stub for randfucn.py\nfrom typing import Iterable, List, Set, Callable\n\ndef message(s: str) -&gt; None: pass\n\ndef alterContents(myIterable: Iterable[int])-&gt; List[int]: pass\n\ndef combine(\n    messageFunc: Callable[[str], Any],\n    itFunc: Callable[[Iterable[int]], List[int]]\n)-&gt; Set[int]: pass\ncombinemypytypeshedtypeshedtypeshedtypeshedclass Counter(Dict[_T, int], Generic[_T]):\n        @overload\n        def __init__(self) -&gt; None: ...\n        @overload\n        def __init__(self, Mapping: Mapping[_T, int]) -&gt; None: ...\n        @overload\n        def __init__(self, iterable: Iterable[_T]) -&gt; None: ...\n_T = TypeVar('_T')_T = TypeVar('_T')_T = TypeVar('_T')_T = TypeVar('_T')_T = TypeVar('_T')typingPEP 526PEP 526PEP 526"}, {"idx": "webquery-test-7", "doc": "Why isn't the 'global' keyword needed to access a global variable?", "code": "globaldef bob():\n    me = \"locally defined\"    # Defined only in local context\n    print(me)\n\nbob()\nprint(me)     # Asking for a global variable\nlocally defined\nTraceback (most recent call last):\n  File \"file.py\", line 9, in &lt;module&gt;\n    print(me)\nNameError: name 'me' is not defined\nglobaldef bob():\n    global me\n    me = \"locally defined\"   # Defined locally but declared as global\n    print(me)\n\nbob()\nprint(me)     # Asking for a global variable\nlocally defined\nlocally defined\nglobal"}, {"idx": "webquery-test-8", "doc": "Count unique values per groups with Pandas", "code": "nuniquedf = df.groupby('domain')['ID'].nunique()\n\nprint (df)\ndomain\n'facebook.com'    1\n'google.com'      1\n'twitter.com'     2\n'vk.com'          3\nName: ID, dtype: int64\nstripstripdf = df.ID.groupby([df.domain.str.strip(\"'\")]).nunique()\nprint (df)\ndomain\nfacebook.com    1\ngoogle.com      1\ntwitter.com     2\nvk.com          3\nName: ID, dtype: int64\ndf.groupby(df.domain.str.strip(\"'\"))['ID'].nunique()\ndf = df.groupby(by='domain', as_index=False).agg({'ID': pd.Series.nunique})\nprint(df)\n    domain  ID\n0       fb   1\n1      ggl   1\n2  twitter   2\n3       vk   3\nnunique()nunique()"}, {"idx": "webquery-test-9", "doc": "How do I use np.newaxis?", "code": "numpy.newaxisnp.newaxis# 1D array\nIn [7]: arr = np.arange(4)\nIn [8]: arr.shape\nOut[8]: (4,)\n\n# make it as row vector by inserting an axis along first dimension\nIn [9]: row_vec = arr[np.newaxis, :]     # arr[None, :]\nIn [10]: row_vec.shape\nOut[10]: (1, 4)\n\n# make it as column vector by inserting an axis along second dimension\nIn [11]: col_vec = arr[:, np.newaxis]     # arr[:, None]\nIn [12]: col_vec.shape\nOut[12]: (4, 1)\n x1 = np.array([1, 2, 3, 4, 5])\n x2 = np.array([5, 4, 3])\nValueErrorValueError: operands could not be broadcast together with shapes (5,) (3,)\nnp.newaxisIn [2]: x1_new = x1[:, np.newaxis]    # x1[:, None]\n# now, the shape of x1_new is (5, 1)\n# array([[1],\n#        [2],\n#        [3],\n#        [4],\n#        [5]])\nIn [3]: x1_new + x2\nOut[3]:\narray([[ 6,  5,  4],\n       [ 7,  6,  5],\n       [ 8,  7,  6],\n       [ 9,  8,  7],\n       [10,  9,  8]])\nx2In [6]: x2_new = x2[:, np.newaxis]    # x2[:, None]\nIn [7]: x2_new     # shape is (3, 1)\nOut[7]: \narray([[5],\n       [4],\n       [3]])\nIn [8]: x1 + x2_new\nOut[8]: \narray([[ 6,  7,  8,  9, 10],\n       [ 5,  6,  7,  8,  9],\n       [ 4,  5,  6,  7,  8]])\nnp.newaxisIn [124]: arr = np.arange(5*5).reshape(5,5)\n\nIn [125]: arr.shape\nOut[125]: (5, 5)\n\n# promoting 2D array to a 5D array\nIn [126]: arr_5D = arr[np.newaxis, ..., np.newaxis, np.newaxis]    # arr[None, ..., None, None]\n\nIn [127]: arr_5D.shape\nOut[127]: (1, 5, 5, 1, 1)\nnumpy.expand_dimsnumpy.expand_dims# adding new axes at 1st, 4th, and last dimension of the resulting array\nIn [131]: newaxes = (0, 3, -1)\nIn [132]: arr_5D = np.expand_dims(arr, axis=newaxes)\nIn [133]: arr_5D.shape\nOut[133]: (1, 5, 5, 1, 1)\nnewaxisnp.newaxisnp.newaxisnp.newaxisIn [13]: A = np.ones((3,4,5,6))\nIn [14]: B = np.ones((4,6))\nIn [15]: (A + B[:, np.newaxis, :]).shape     # B[:, None, :]\nOut[15]: (3, 4, 5, 6)\nBBNoneNoneIn [13]: np.newaxis is None\nOut[13]: True\n"}, {"idx": "webquery-test-10", "doc": "In Python, when to use a Dictionary, List or Set?", "code": "listlistlistlistdictdictdictsetsetsetsetsetsetsetsetsetsetsetsetsetset"}, {"idx": "webquery-test-11", "doc": "Install tkinter for Python", "code": "apt-get install python-tk"}, {"idx": "webquery-test-12", "doc": "How to sum all the values in a dictionary?", "code": "sum(d.values())\n"}, {"idx": "webquery-test-13", "doc": "How to concatenate two dictionaries to create a new one?", "code": "itemsitemsitemsitemsitemsitemsitemsitemsitems"}, {"idx": "webquery-test-14", "doc": "Argparse: Required arguments listed under \"optional arguments\"?", "code": "--parser = argparse.ArgumentParser(description='Foo')\nparser.add_argument('-o', '--output', help='Output file name', default='stdout')\nrequiredNamed = parser.add_argument_group('required named arguments')\nrequiredNamed.add_argument('-i', '--input', help='Input file name', required=True)\nparser.parse_args(['-h'])\nusage: [-h] [-o OUTPUT] -i INPUT\n\nFoo\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUTPUT, --output OUTPUT\n                        Output file name\n\nrequired named arguments:\n  -i INPUT, --input INPUT\n                        Input file name\n"}, {"idx": "webquery-test-15", "doc": "What does Python's eval() do? ", "code": "&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; eval('x + 1')\n2\n&gt;&gt;&gt; eval('x')\n1\n"}, {"idx": "webquery-test-16", "doc": "What is the purpose of \"pip install --user ...\"?", "code": "/usr/local/lib/python3.4--user"}, {"idx": "webquery-test-17", "doc": "How to initialize a dict with keys from a list and empty value in Python?", "code": "dict.fromkeys&gt;&gt;&gt; dict.fromkeys([1, 2, 3, 4])\n{1: None, 2: None, 3: None, 4: None}\ncollections.defaultdictNone&gt;&gt;&gt; x = dict.fromkeys([1, 2, 3, 4], [])\n&gt;&gt;&gt; x[1].append('test')\n&gt;&gt;&gt; x\n{1: ['test'], 2: ['test'], 3: ['test'], 4: ['test']}\n"}, {"idx": "webquery-test-18", "doc": "How do I pass a string into subprocess.Popen (using the stdin argument)?", "code": "Popen.communicate()    pipe = os.popen(cmd, 'w', bufsize)\n    # ==&gt;\n    pipe = Popen(cmd, shell=True, bufsize=bufsize, stdin=PIPE).stdin\nfrom subprocess import Popen, PIPE, STDOUT\n\np = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)    \ngrep_stdout = p.communicate(input=b'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]\nprint(grep_stdout.decode())\n# -&gt; four\n# -&gt; five\n# -&gt;\nencodingencoding#!/usr/bin/env python3\nfrom subprocess import run, PIPE\n\np = run(['grep', 'f'], stdout=PIPE,\n        input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n', encoding='ascii')\nprint(p.returncode)\n# -&gt; 0\nprint(p.stdout)\n# -&gt; four\n# -&gt; five\n# -&gt; \n"}, {"idx": "webquery-test-1", "doc": "correct way to define class variables in Python", "code": "__init____init____init__class MyClass:\n    static_elem = 123\n\n    def __init__(self):\n        self.object_elem = 456\n\nc1 = MyClass()\nc2 = MyClass()\n\n# Initial values of both elements\n&gt;&gt;&gt; print c1.static_elem, c1.object_elem \n123 456\n&gt;&gt;&gt; print c2.static_elem, c2.object_elem\n123 456\n\n# Nothing new so far ...\n\n# Let's try changing the static element\nMyClass.static_elem = 999\n\n&gt;&gt;&gt; print c1.static_elem, c1.object_elem\n999 456\n&gt;&gt;&gt; print c2.static_elem, c2.object_elem\n999 456\n\n# Now, let's try changing the object element\nc1.object_elem = 888\n\n&gt;&gt;&gt; print c1.static_elem, c1.object_elem\n999 888\n&gt;&gt;&gt; print c2.static_elem, c2.object_elem\n999 456\n"}, {"idx": "webquery-test-2", "doc": "Executing command line programs from within python", "code": "subprocesssubprocessimport subprocess\n#subprocess.check_output(['ls', '-l'])  # All that is technically needed...\nprint(subprocess.check_output(['ls', '-l']))\n"}, {"idx": "webquery-test-3", "doc": "Generating a PNG with matplotlib when DISPLAY is undefined", "code": "import matplotlib\n# Force matplotlib to not use any Xwindows backend.\nmatplotlib.use('Agg')\n"}, {"idx": "webquery-test-4", "doc": "Why isn't Python very good for functional programming?", "code": "list"}, {"idx": "webquery-test-5", "doc": "How do I determine what type of exception occurred?", "code": "try:\n    someFunction()\nexcept Exception as ex:\n    template = \"An exception of type {0} occurred. Arguments:\\n{1!r}\"\n    message = template.format(type(ex).__name__, ex.args)\n    print message\nmessagemessageexcept:except:except:except:except:import traceback\nprint traceback.format_exc()\nloggingimport logging\nlog = logging.getLogger()\nlog.exception(\"Message for you, sir!\")\npost_mortempost_mortemimport pdb\npdb.post_mortem()\n"}, {"idx": "webquery-test-6", "doc": "How do I check if a given Python string is a substring of another one?", "code": "in&gt;&gt;&gt; x = 'hello'\n&gt;&gt;&gt; y = 'll'\n&gt;&gt;&gt; y in x\nTrue\n"}, {"idx": "webquery-test-7", "doc": "What's the best way to parse command line arguments?", "code": "argparseimport argparse\n\n# Instantiate the parser\nparser = argparse.ArgumentParser(description='Optional app description')\n# Required positional argument\nparser.add_argument('pos_arg', type=int,\n                    help='A required integer positional argument')\n\n# Optional positional argument\nparser.add_argument('opt_pos_arg', type=int, nargs='?',\n                    help='An optional integer positional argument')\n\n# Optional argument\nparser.add_argument('--opt_arg', type=int,\n                    help='An optional integer argument')\n\n# Switch\nparser.add_argument('--switch', action='store_true',\n                    help='A boolean switch')\nargs = parser.parse_args()\nprint(\"Argument values:\")\nprint(args.pos_arg)\nprint(args.opt_pos_arg)\nprint(args.opt_arg)\nprint(args.switch)\nif args.pos_arg &gt; 10:\n    parser.error(\"pos_arg cannot be larger than 10\")\n$ ./app 1 2 --opt_arg 3 --switch\n\nArgument values:\n1\n2\n3\nTrue\n$ ./app foo 2 --opt_arg 3 --switch\nusage: convert [-h] [--opt_arg OPT_ARG] [--switch] pos_arg [opt_pos_arg]\napp: error: argument pos_arg: invalid int value: 'foo'\n\n$ ./app 11 2 --opt_arg 3\nArgument values:\n11\n2\n3\nFalse\nusage: app [-h] [--opt_arg OPT_ARG] [--switch] pos_arg [opt_pos_arg]\nconvert: error: pos_arg cannot be larger than 10\n$ ./app -h\n\nusage: app [-h] [--opt_arg OPT_ARG] [--switch] pos_arg [opt_pos_arg]\n\nOptional app description\n\npositional arguments:\n  pos_arg            A required integer positional argument\n  opt_pos_arg        An optional integer positional argument\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --opt_arg OPT_ARG  An optional integer argument\n  --switch           A boolean switch\n"}, {"idx": "webquery-test-8", "doc": "Split (explode) pandas dataframe string entry to separate rows", "code": "Series.explode()Series.explode()In [1]: df = pd.DataFrame({'A': [[0, 1, 2], 'foo', [], [3, 4]],\n   ...:                    'B': 1,\n   ...:                    'C': [['a', 'b', 'c'], np.nan, [], ['d', 'e']]})\n\nIn [2]: df\nOut[2]:\n           A  B          C\n0  [0, 1, 2]  1  [a, b, c]\n1        foo  1        NaN\n2         []  1         []\n3     [3, 4]  1     [d, e]\n\nIn [3]: df.explode('A')\nOut[3]:\n     A  B          C\n0    0  1  [a, b, c]\n0    1  1  [a, b, c]\n0    2  1  [a, b, c]\n1  foo  1        NaN\n2  NaN  1         []\n3    3  1     [d, e]\n3    4  1     [d, e]\nIn [4]: df.explode(['A', 'C'])\nOut[4]:\n     A  B    C\n0    0  1    a\n0    1  1    b\n0    2  1    c\n1  foo  1  NaN\n2  NaN  1  NaN\n3    3  1    d\n3    4  1    e\nnormalnormaldef explode(df, lst_cols, fill_value='', preserve_index=False):\n    # make sure `lst_cols` is list-alike\n    if (lst_cols is not None\n        and len(lst_cols) &gt; 0\n        and not isinstance(lst_cols, (list, tuple, np.ndarray, pd.Series))):\n        lst_cols = [lst_cols]\n    # all columns except `lst_cols`\n    idx_cols = df.columns.difference(lst_cols)\n    # calculate lengths of lists\n    lens = df[lst_cols[0]].str.len()\n    # preserve original index values    \n    idx = np.repeat(df.index.values, lens)\n    # create \"exploded\" DF\n    res = (pd.DataFrame({\n                col:np.repeat(df[col].values, lens)\n                for col in idx_cols},\n                index=idx)\n             .assign(**{col:np.concatenate(df.loc[lens&gt;0, col].values)\n                            for col in lst_cols}))\n    # append those rows that have empty lists\n    if (lens == 0).any():\n        # at least one list in cells is empty\n        res = (res.append(df.loc[lens==0, idx_cols], sort=False)\n                  .fillna(fill_value))\n    # revert the original index order\n    res = res.sort_index()\n    # reset index if requested\n    if not preserve_index:        \n        res = res.reset_index(drop=True)\n    return res\nlistlistIn [134]: df\nOut[134]:\n   aaa  myid        num          text\n0   10     1  [1, 2, 3]  [aa, bb, cc]\n1   11     2         []            []\n2   12     3     [1, 2]      [cc, dd]\n3   13     4         []            []\n\nIn [135]: explode(df, ['num','text'], fill_value='')\nOut[135]:\n   aaa  myid num text\n0   10     1   1   aa\n1   10     1   2   bb\n2   10     1   3   cc\n3   11     2\n4   12     3   1   cc\n5   12     3   2   dd\n6   13     4\nIn [136]: explode(df, ['num','text'], fill_value='', preserve_index=True)\nOut[136]:\n   aaa  myid num text\n0   10     1   1   aa\n0   10     1   2   bb\n0   10     1   3   cc\n1   11     2\n2   12     3   1   cc\n2   12     3   2   dd\n3   13     4\ndf = pd.DataFrame({\n 'aaa': {0: 10, 1: 11, 2: 12, 3: 13},\n 'myid': {0: 1, 1: 2, 2: 3, 3: 4},\n 'num': {0: [1, 2, 3], 1: [], 2: [1, 2], 3: []},\n 'text': {0: ['aa', 'bb', 'cc'], 1: [], 2: ['cc', 'dd'], 3: []}\n})\nIn [46]: df\nOut[46]:\n        var1  var2 var3\n0      a,b,c     1   XX\n1  d,e,f,x,y     2   ZZ\n\nIn [47]: explode(df.assign(var1=df.var1.str.split(',')), 'var1')\nOut[47]:\n  var1  var2 var3\n0    a     1   XX\n1    b     1   XX\n2    c     1   XX\n3    d     2   ZZ\n4    e     2   ZZ\n5    f     2   ZZ\n6    x     2   ZZ\n7    y     2   ZZ\nlistIn [48]: df.assign(var1=df.var1.str.split(','))\nOut[48]:\n              var1  var2 var3\n0        [a, b, c]     1   XX\n1  [d, e, f, x, y]     2   ZZ\nIn [177]: df\nOut[177]:\n        var1  var2 var3\n0      a,b,c     1   XX\n1  d,e,f,x,y     2   ZZ\nIn [178]: lst_col = 'var1' \n\nIn [179]: x = df.assign(**{lst_col:df[lst_col].str.split(',')})\n\nIn [180]: x\nOut[180]:\n              var1  var2 var3\n0        [a, b, c]     1   XX\n1  [d, e, f, x, y]     2   ZZ\nIn [181]: pd.DataFrame({\n     ...:     col:np.repeat(x[col].values, x[lst_col].str.len())\n     ...:     for col in x.columns.difference([lst_col])\n     ...: }).assign(**{lst_col:np.concatenate(x[lst_col].values)})[x.columns.tolist()]\n     ...:\nOut[181]:\n  var1  var2 var3\n0    a     1   XX\n1    b     1   XX\n2    c     1   XX\n3    d     2   ZZ\n4    e     2   ZZ\n5    f     2   ZZ\n6    x     2   ZZ\n7    y     2   ZZ\nIn [2]: df = pd.DataFrame(\n   ...:    [{'var1': 'a,b,c', 'var2': 1, 'var3': 'XX'},\n   ...:     {'var1': 'd,e,f,x,y', 'var2': 2, 'var3': 'ZZ'}]\n   ...: )\n\nIn [3]: df\nOut[3]:\n        var1  var2 var3\n0      a,b,c     1   XX\n1  d,e,f,x,y     2   ZZ\n\nIn [4]: (df.set_index(df.columns.drop('var1',1).tolist())\n   ...:    .var1.str.split(',', expand=True)\n   ...:    .stack()\n   ...:    .reset_index()\n   ...:    .rename(columns={0:'var1'})\n   ...:    .loc[:, df.columns]\n   ...: )\nOut[4]:\n  var1  var2 var3\n0    a     1   XX\n1    b     1   XX\n2    c     1   XX\n3    d     2   ZZ\n4    e     2   ZZ\n5    f     2   ZZ\n6    x     2   ZZ\n7    y     2   ZZ\n"}, {"idx": "webquery-test-9", "doc": "Django: Display Choice Value", "code": "get_FOO_display()(){{ person.get_gender_display }}\n"}, {"idx": "webquery-test-10", "doc": "Efficient way to rotate a list in python", "code": "collections.dequecollections.dequefrom collections import deque\nitems = deque([1, 2])\nitems.append(3)        # deque == [1, 2, 3]\nitems.rotate(1)        # The deque is now: [3, 1, 2]\nitems.rotate(-1)       # Returns deque to original state: [1, 2, 3]\nitem = items.popleft() # deque == [2, 3]\n"}, {"idx": "webquery-test-11", "doc": "Installing pip packages to $HOME folder", "code": "virtualenvvirtualenvvirtualenvvirtualenvpip install --user mercurial\nhghghguseruseruseruseruseruser"}, {"idx": "webquery-test-12", "doc": "How to split a dataframe string column into two columns?", "code": "df[['A', 'B']] = df['AB'].str.split(' ', 1, expand=True)\nexpand=Trueexpand=True.tolist().tolist()str.extract().str.split()&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; df = pd.DataFrame({'AB': ['A1-B1', 'A2-B2']})\n&gt;&gt;&gt; df\n\n      AB\n0  A1-B1\n1  A2-B2\n&gt;&gt;&gt; df['AB_split'] = df['AB'].str.split('-')\n&gt;&gt;&gt; df\n\n      AB  AB_split\n0  A1-B1  [A1, B1]\n1  A2-B2  [A2, B2]\n.str.split().str&gt;&gt;&gt; upper_lower_df = pd.DataFrame({\"U\": [\"A\", \"B\", \"C\"]})\n&gt;&gt;&gt; upper_lower_df\n\n   U\n0  A\n1  B\n2  C\n&gt;&gt;&gt; upper_lower_df[\"L\"] = upper_lower_df[\"U\"].str.lower()\n&gt;&gt;&gt; upper_lower_df\n\n   U  L\n0  A  a\n1  B  b\n2  C  c\n&gt;&gt;&gt; df['AB'].str[0]\n\n0    A\n1    A\nName: AB, dtype: object\n\n&gt;&gt;&gt; df['AB'].str[1]\n\n0    1\n1    2\nName: AB, dtype: object\n.str&gt;&gt;&gt; df['AB'].str.split('-', 1).str[0]\n\n0    A1\n1    A2\nName: AB, dtype: object\n\n&gt;&gt;&gt; df['AB'].str.split('-', 1).str[1]\n\n0    B1\n1    B2\nName: AB, dtype: object\n&gt;&gt;&gt; df['A'], df['B'] = df['AB'].str.split('-', 1).str\n&gt;&gt;&gt; df\n\n      AB  AB_split   A   B\n0  A1-B1  [A1, B1]  A1  B1\n1  A2-B2  [A2, B2]  A2  B2\n.str.split().str.split()&gt;&gt;&gt; df['AB'].str.split('-', 1, expand=True)\n\n    0   1\n0  A1  B1\n1  A2  B2\n&gt;&gt;&gt; df = df[['AB']]\n&gt;&gt;&gt; df\n\n      AB\n0  A1-B1\n1  A2-B2\n\n&gt;&gt;&gt; df.join(df['AB'].str.split('-', 1, expand=True).rename(columns={0:'A', 1:'B'}))\n\n      AB   A   B\n0  A1-B1  A1  B1\n1  A2-B2  A2  B2\nexpand=True&gt;&gt;&gt; df = pd.DataFrame({'AB': ['A1-B1', 'A2-B2', 'A3-B3-C3']})\n&gt;&gt;&gt; df\n         AB\n0     A1-B1\n1     A2-B2\n2  A3-B3-C3\n&gt;&gt;&gt; df['A'], df['B'], df['C'] = df['AB'].str.split('-')\nTraceback (most recent call last):\n  [...]    \nValueError: Length of values does not match length of index\n&gt;&gt;&gt; \nexpand=Trueexpand=True&gt;&gt;&gt; df.join(\n...     df['AB'].str.split('-', expand=True).rename(\n...         columns={0:'A', 1:'B', 2:'C'}\n...     )\n... )\n         AB   A   B     C\n0     A1-B1  A1  B1  None\n1     A2-B2  A2  B2  None\n2  A3-B3-C3  A3  B3    C3\n"}, {"idx": "webquery-test-13", "doc": "Convert columns to string in Pandas", "code": "total_rows['ColumnID'] = total_rows['ColumnID'].astype(str)\nto_jsonIn [11]: df = pd.DataFrame([['A', 2], ['A', 4], ['B', 6]])\n\nIn [12]: df.to_json()\nOut[12]: '{\"0\":{\"0\":\"A\",\"1\":\"A\",\"2\":\"B\"},\"1\":{\"0\":2,\"1\":4,\"2\":6}}'\n\nIn [13]: df[0].to_json()\nOut[13]: '{\"0\":\"A\",\"1\":\"A\",\"2\":\"B\"}'\n"}, {"idx": "webquery-test-14", "doc": "Selecting with complex criteria from pandas.DataFrame", "code": "&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; from random import randint\n&gt;&gt;&gt; df = pd.DataFrame({'A': [randint(1, 9) for x in range(10)],\n                   'B': [randint(1, 9)*10 for x in range(10)],\n                   'C': [randint(1, 9)*100 for x in range(10)]})\n&gt;&gt;&gt; df\n   A   B    C\n0  9  40  300\n1  9  70  700\n2  5  70  900\n3  8  80  900\n4  7  50  200\n5  9  30  900\n6  2  80  700\n7  2  80  400\n8  5  80  300\n9  7  70  800\n&gt;&gt;&gt; df[\"B\"] &gt; 50\n0    False\n1     True\n2     True\n3     True\n4    False\n5    False\n6     True\n7     True\n8     True\n9     True\nName: B\n&gt;&gt;&gt; (df[\"B\"] &gt; 50) &amp; (df[\"C\"] == 900)\n0    False\n1    False\n2     True\n3     True\n4    False\n5    False\n6    False\n7    False\n8    False\n9    False\n.loc&gt;&gt;&gt; df[\"A\"][(df[\"B\"] &gt; 50) &amp; (df[\"C\"] == 900)]\n2    5\n3    8\nName: A, dtype: int64\n.loc&gt;&gt;&gt; df.loc[(df[\"B\"] &gt; 50) &amp; (df[\"C\"] == 900), \"A\"]\n2    5\n3    8\nName: A, dtype: int64\n&gt;&gt;&gt; df.loc[(df[\"B\"] &gt; 50) &amp; (df[\"C\"] == 900), \"A\"].values\narray([5, 8], dtype=int64)\n&gt;&gt;&gt; df.loc[(df[\"B\"] &gt; 50) &amp; (df[\"C\"] == 900), \"A\"] *= 1000\n&gt;&gt;&gt; df\n      A   B    C\n0     9  40  300\n1     9  70  700\n2  5000  70  900\n3  8000  80  900\n4     7  50  200\n5     9  30  900\n6     2  80  700\n7     2  80  400\n8     5  80  300\n9     7  70  800\n== 900== 900== 900"}, {"idx": "webquery-test-15", "doc": "Update a dataframe in pandas while iterating row by row", "code": "df.atfor i, row in df.iterrows():\n    ifor_val = something\n    if &lt;condition&gt;:\n        ifor_val = something_else\n    df.at[i,'ifor'] = ifor_val\ndf.set_valuefor i, row in df.iterrows():\n    ifor_val = something\n    if &lt;condition&gt;:\n        ifor_val = something_else\n    df.set_value(i,'ifor',ifor_val)\ndf"}, {"idx": "webquery-test-16", "doc": "Python truncate a long string", "code": "info = (data[:75] + '..') if len(data) &gt; 75 else data\n"}, {"idx": "webquery-test-17", "doc": "Python 3: UnboundLocalError: local variable referenced before assignment", "code": "Var1Var1Var1Var1Var1Var1Var1global Var1, Var2\nVar1Var1nonlocal"}, {"idx": "webquery-test-18", "doc": "Apply pandas function to column to create multiple new columns?", "code": "zip&gt;&gt;&gt; df = pd.DataFrame([[i] for i in range(10)], columns=['num'])\n&gt;&gt;&gt; df\n    num\n0    0\n1    1\n2    2\n3    3\n4    4\n5    5\n6    6\n7    7\n8    8\n9    9\n\n&gt;&gt;&gt; def powers(x):\n&gt;&gt;&gt;     return x, x**2, x**3, x**4, x**5, x**6\n\n&gt;&gt;&gt; df['p1'], df['p2'], df['p3'], df['p4'], df['p5'], df['p6'] = \\\n&gt;&gt;&gt;     zip(*df['num'].map(powers))\n\n&gt;&gt;&gt; df\n        num     p1      p2      p3      p4      p5      p6\n0       0       0       0       0       0       0       0\n1       1       1       1       1       1       1       1\n2       2       2       4       8       16      32      64\n3       3       3       9       27      81      243     729\n4       4       4       16      64      256     1024    4096\n5       5       5       25      125     625     3125    15625\n6       6       6       36      216     1296    7776    46656\n7       7       7       49      343     2401    16807   117649\n8       8       8       64      512     4096    32768   262144\n9       9       9       81      729     6561    59049   531441\n"}, {"idx": "webquery-test-19", "doc": "Getting the exception value in Python", "code": "strtry:\n    some_method()\nexcept Exception as e:\n    s = str(e)\nargsargsstrstr"}, {"idx": "webquery-test-20", "doc": "How do you convert a time.struct_time object into a datetime object?", "code": "from datetime import datetime\nfrom time import mktime\n\ndt = datetime.fromtimestamp(mktime(struct))\n"}, {"idx": "webquery-test-1", "doc": "How do I get Flask to run on port 80?", "code": "if __name__ == '__main__':\n      app.run(host='0.0.0.0', port=80)\n"}, {"idx": "webquery-test-2", "doc": "Redirecting to URL in Flask", "code": "import os\nfrom flask import Flask,redirect\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return redirect(\"http://www.example.com\", code=302)\n\nif __name__ == '__main__':\n    # Bind to PORT if defined, otherwise default to 5000.\n    port = int(os.environ.get('PORT', 5000))\n    app.run(host='0.0.0.0', port=port)\ncode=302"}, {"idx": "webquery-test-3", "doc": "Convert Pandas column containing NaNs to dtype `int`", "code": "arrays.IntegerArrayarrays.IntegerArrayarrays.IntegerArrayarr = pd.array([1, 2, np.nan], dtype=pd.Int64Dtype())\npd.Series(arr)\n\n0      1\n1      2\n2    NaN\ndtype: Int64\ndf['myCol'] = df['myCol'].astype('Int64')\n"}, {"idx": "webquery-test-4", "doc": "In Python, how do you convert seconds since epoch to a `datetime` object?", "code": "datetime.datetime.fromtimestampdatetime.datetime.fromtimestamp&gt;&gt;&gt; datetime.datetime.fromtimestamp(1284286794)\ndatetime.datetime(2010, 9, 12, 11, 19, 54)\n&gt;&gt;&gt; datetime.datetime.utcfromtimestamp(1284286794)\ndatetime.datetime(2010, 9, 12, 10, 19, 54)\n"}, {"idx": "webquery-test-5", "doc": "How can I obtain the element-wise logical NOT of a pandas Series?", "code": "~sIn [7]: s = pd.Series([True, True, False, True])\n\nIn [8]: ~s\nOut[8]: \n0    False\n1    False\n2     True\n3    False\ndtype: bool\nIn [119]: s = pd.Series([True, True, False, True]*10000)\n\nIn [10]:  %timeit np.invert(s)\n10000 loops, best of 3: 91.8 \u00b5s per loop\n\nIn [11]: %timeit ~s\n10000 loops, best of 3: 73.5 \u00b5s per loop\n\nIn [12]: %timeit (-s)\n10000 loops, best of 3: 73.5 \u00b5s per loop\nnumpy.ndarraynumpy.ndarraynumpy.ndarraynumpy.ndarraynumpy.ndarraytimeit"}, {"idx": "webquery-test-6", "doc": "Check if a given key already exists in a dictionary and increment it", "code": "collections.defaultdictfrom collections import defaultdict\n\nmy_dict = defaultdict(int)\nmy_dict[key] += 1\ndictdictdictdictif key in my_dict:\n    my_dict[key] += 1\nelse:\n    my_dict[key] = 1\n"}, {"idx": "webquery-test-7", "doc": "How can I find the current OS in Python?", "code": "&gt;&gt;&gt; import platform\n&gt;&gt;&gt; platform.platform()\n'Linux-3.3.0-8.fc16.x86_64-x86_64-with-fedora-16-Verne'\nplatform&gt;&gt;&gt; platform.system()\n'Windows'\n&gt;&gt;&gt; platform.release()\n'XP'\n&gt;&gt;&gt; platform.version()\n'5.1.2600'\nimport platform\nimport sys\n\ndef linux_distribution():\n  try:\n    return platform.linux_distribution()\n  except:\n    return \"N/A\"\n\ndef dist():\n  try:\n    return platform.dist()\n  except:\n    return \"N/A\"\n\nprint(\"\"\"Python version: %s\ndist: %s\nlinux_distribution: %s\nsystem: %s\nmachine: %s\nplatform: %s\nuname: %s\nversion: %s\nmac_ver: %s\n\"\"\" % (\nsys.version.split('\\n'),\nstr(dist()),\nlinux_distribution(),\nplatform.system(),\nplatform.machine(),\nplatform.platform(),\nplatform.uname(),\nplatform.version(),\nplatform.mac_ver(),\n))\nPython version: ['2.6.4 (r264:75706, Aug  4 2010, 16:53:32) [C]']\ndist: ('', '', '')\nlinux_distribution: ('', '', '')\nsystem: SunOS\nmachine: sun4u\nplatform: SunOS-5.9-sun4u-sparc-32bit-ELF\nuname: ('SunOS', 'xxx', '5.9', 'Generic_122300-60', 'sun4u', 'sparc')\nversion: Generic_122300-60\nmac_ver: ('', ('', '', ''), '')\nPython version: ['2.7.16 (default, Dec 21 2020, 23:00:36) ', '[GCC Apple LLVM 12.0.0 (clang-1200.0.30.4) [+internal-os, ptrauth-isa=sign+stri'] \ndist: ('', '', '') \nlinux_distribution: ('', '', '') \nsystem: Darwin \nmachine: arm64 \nplatform: Darwin-20.3.0-arm64-arm-64bit \nuname: ('Darwin', 'Nautilus.local', '20.3.0', 'Darwin Kernel Version 20.3.0: Thu Jan 21 00:06:51 PST 2021; root:xnu-7195.81.3~1/RELEASE_ARM64_T8101', 'arm64', 'arm') \nversion: Darwin Kernel Version 20.3.0: Thu Jan 21 00:06:51 PST 2021; root:xnu-7195.81.3~1/RELEASE_ARM64_T8101 \nmac_ver: ('10.16', ('', '', ''), 'arm64')\n"}, {"idx": "webquery-test-8", "doc": "How to activate virtualenv in Linux?", "code": "cd$ virtualenv venv --distribute\nNew python executable in venv/bin/python\nInstalling distribute.........done.\nInstalling pip................done.\n$ source venv/bin/activate\n(venv)$ python\n"}, {"idx": "webquery-test-9", "doc": "Send HTML emails with Python", "code": "#! /usr/bin/python\n\nimport smtplib\n\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\n# me == my email address\n# you == recipient's email address\nme = \"my@email.com\"\nyou = \"your@email.com\"\n\n# Create message container - the correct MIME type is multipart/alternative.\nmsg = MIMEMultipart('alternative')\nmsg['Subject'] = \"Link\"\nmsg['From'] = me\nmsg['To'] = you\n\n# Create the body of the message (a plain-text and an HTML version).\ntext = \"Hi!\\nHow are you?\\nHere is the link you wanted:\\nhttp://www.python.org\"\nhtml = \"\"\"\\\n&lt;html&gt;\n  &lt;head&gt;&lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;Hi!&lt;br&gt;\n       How are you?&lt;br&gt;\n       Here is the &lt;a href=\"http://www.python.org\"&gt;link&lt;/a&gt; you wanted.\n    &lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n# Record the MIME types of both parts - text/plain and text/html.\npart1 = MIMEText(text, 'plain')\npart2 = MIMEText(html, 'html')\n\n# Attach parts into message container.\n# According to RFC 2046, the last part of a multipart message, in this case\n# the HTML message, is best and preferred.\nmsg.attach(part1)\nmsg.attach(part2)\n\n# Send the message via local SMTP server.\ns = smtplib.SMTP('localhost')\n# sendmail function takes 3 arguments: sender's address, recipient's address\n# and message to send - here it is sent as one string.\ns.sendmail(me, you, msg.as_string())\ns.quit()\n"}, {"idx": "webquery-test-10", "doc": "How to set a single, main title above all the subplots with Pyplot?", "code": "pyplot.suptitlepyplot.suptitleimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig=plt.figure()\ndata=np.arange(900).reshape((30,30))\nfor i in range(1,5):\n    ax=fig.add_subplot(2,2,i)        \n    ax.imshow(data)\n\nfig.suptitle('Main title') # or plt.suptitle('Main title')\nplt.show()\n"}, {"idx": "webquery-test-11", "doc": "Why doesn't Python have a sign function?", "code": "sign()cmp(x,0)copysign(x,y):\nReturn x with the sign of y.\ncopysigncopysigncopysigncopysigncopysign&gt;&gt;&gt; math.copysign(1, -4)\n-1.0\n&gt;&gt;&gt; math.copysign(1, 3)\n1.0\nsign&gt;&gt;&gt; sign = functools.partial(math.copysign, 1) # either of these\n&gt;&gt;&gt; sign = lambda x: math.copysign(1, x) # two will work\n&gt;&gt;&gt; sign(-4)\n-1.0\n&gt;&gt;&gt; sign(3)\n1.0\n&gt;&gt;&gt; sign(0)\n1.0\n&gt;&gt;&gt; sign(-0.0)\n-1.0\n&gt;&gt;&gt; sign(float('nan'))\n-1.0\ncopysigns = sign(a)\nb = b * s\nb = copysign(b, a)\ncmpcmpcmpcmpsignsignsignsign"}, {"idx": "webquery-test-12", "doc": "Convert array of indices to one-hot encoded array in NumPy", "code": "bbbbb&gt;&gt;&gt; a = np.array([1, 0, 3])\n&gt;&gt;&gt; b = np.zeros((a.size, a.max() + 1))\n&gt;&gt;&gt; b[np.arange(a.size), a] = 1\n\n&gt;&gt;&gt; b\narray([[ 0.,  1.,  0.,  0.],\n       [ 1.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  1.]])\n"}, {"idx": "webquery-test-13", "doc": "Python string.join(list) on object array rather than string array", "code": "', '.join([str(x) for x in list])  # list comprehension\n', '.join(str(x) for x in list)    # generator expression\n"}, {"idx": "webquery-test-14", "doc": "How do I profile memory usage in Python?", "code": "tracemallocfrom collections import Counter\nimport linecache\nimport os\nimport tracemalloc\n\ndef display_top(snapshot, key_type='lineno', limit=3):\n    snapshot = snapshot.filter_traces((\n        tracemalloc.Filter(False, \"&lt;frozen importlib._bootstrap&gt;\"),\n        tracemalloc.Filter(False, \"&lt;unknown&gt;\"),\n    ))\n    top_stats = snapshot.statistics(key_type)\n\n    print(\"Top %s lines\" % limit)\n    for index, stat in enumerate(top_stats[:limit], 1):\n        frame = stat.traceback[0]\n        # replace \"/path/to/module/file.py\" with \"module/file.py\"\n        filename = os.sep.join(frame.filename.split(os.sep)[-2:])\n        print(\"#%s: %s:%s: %.1f KiB\"\n              % (index, filename, frame.lineno, stat.size / 1024))\n        line = linecache.getline(frame.filename, frame.lineno).strip()\n        if line:\n            print('    %s' % line)\n\n    other = top_stats[limit:]\n    if other:\n        size = sum(stat.size for stat in other)\n        print(\"%s other: %.1f KiB\" % (len(other), size / 1024))\n    total = sum(stat.size for stat in top_stats)\n    print(\"Total allocated size: %.1f KiB\" % (total / 1024))\n\n\ntracemalloc.start()\n\ncounts = Counter()\nfname = '/usr/share/dict/american-english'\nwith open(fname) as words:\n    words = list(words)\n    for word in words:\n        prefix = word[:3]\n        counts[prefix] += 1\nprint('Top prefixes:', counts.most_common(3))\n\nsnapshot = tracemalloc.take_snapshot()\ndisplay_top(snapshot)\nTop prefixes: [('con', 1220), ('dis', 1002), ('pro', 809)]\nTop 3 lines\n#1: scratches/memory_test.py:37: 6527.1 KiB\n    words = list(words)\n#2: scratches/memory_test.py:39: 247.7 KiB\n    prefix = word[:3]\n#3: scratches/memory_test.py:40: 193.0 KiB\n    counts[prefix] += 1\n4 other: 4.3 KiB\nTotal allocated size: 6972.1 KiB\ncount_prefixes()count_prefixes()from collections import Counter\nimport linecache\nimport os\nimport tracemalloc\nfrom time import sleep\n\n\ndef count_prefixes():\n    sleep(2)  # Start up time.\n    counts = Counter()\n    fname = '/usr/share/dict/american-english'\n    with open(fname) as words:\n        words = list(words)\n        for word in words:\n            prefix = word[:3]\n            counts[prefix] += 1\n            sleep(0.0001)\n    most_common = counts.most_common(3)\n    sleep(3)  # Shut down time.\n    return most_common\n\n\ndef main():\n    tracemalloc.start()\n\n    most_common = count_prefixes()\n    print('Top prefixes:', most_common)\n\n    snapshot = tracemalloc.take_snapshot()\n    display_top(snapshot)\n\n\ndef display_top(snapshot, key_type='lineno', limit=3):\n    snapshot = snapshot.filter_traces((\n        tracemalloc.Filter(False, \"&lt;frozen importlib._bootstrap&gt;\"),\n        tracemalloc.Filter(False, \"&lt;unknown&gt;\"),\n    ))\n    top_stats = snapshot.statistics(key_type)\n\n    print(\"Top %s lines\" % limit)\n    for index, stat in enumerate(top_stats[:limit], 1):\n        frame = stat.traceback[0]\n        # replace \"/path/to/module/file.py\" with \"module/file.py\"\n        filename = os.sep.join(frame.filename.split(os.sep)[-2:])\n        print(\"#%s: %s:%s: %.1f KiB\"\n              % (index, filename, frame.lineno, stat.size / 1024))\n        line = linecache.getline(frame.filename, frame.lineno).strip()\n        if line:\n            print('    %s' % line)\n\n    other = top_stats[limit:]\n    if other:\n        size = sum(stat.size for stat in other)\n        print(\"%s other: %.1f KiB\" % (len(other), size / 1024))\n    total = sum(stat.size for stat in top_stats)\n    print(\"Total allocated size: %.1f KiB\" % (total / 1024))\n\n\nmain()\nTop prefixes: [('con', 1220), ('dis', 1002), ('pro', 809)]\nTop 3 lines\n#1: collections/__init__.py:537: 0.7 KiB\n    self.update(*args, **kwds)\n#2: collections/__init__.py:555: 0.6 KiB\n    return _heapq.nlargest(n, self.items(), key=_itemgetter(1))\n#3: python3.6/heapq.py:569: 0.5 KiB\n    result = [(key(elem), i, elem) for i, elem in zip(range(0, -n, -1), it)]\n10 other: 2.2 KiB\nTotal allocated size: 4.0 KiB\nfrom collections import Counter\nimport linecache\nimport os\nimport tracemalloc\nfrom datetime import datetime\nfrom queue import Queue, Empty\nfrom resource import getrusage, RUSAGE_SELF\nfrom threading import Thread\nfrom time import sleep\n\ndef memory_monitor(command_queue: Queue, poll_interval=1):\n    tracemalloc.start()\n    old_max = 0\n    snapshot = None\n    while True:\n        try:\n            command_queue.get(timeout=poll_interval)\n            if snapshot is not None:\n                print(datetime.now())\n                display_top(snapshot)\n\n            return\n        except Empty:\n            max_rss = getrusage(RUSAGE_SELF).ru_maxrss\n            if max_rss &gt; old_max:\n                old_max = max_rss\n                snapshot = tracemalloc.take_snapshot()\n                print(datetime.now(), 'max RSS', max_rss)\n\n\ndef count_prefixes():\n    sleep(2)  # Start up time.\n    counts = Counter()\n    fname = '/usr/share/dict/american-english'\n    with open(fname) as words:\n        words = list(words)\n        for word in words:\n            prefix = word[:3]\n            counts[prefix] += 1\n            sleep(0.0001)\n    most_common = counts.most_common(3)\n    sleep(3)  # Shut down time.\n    return most_common\n\n\ndef main():\n    queue = Queue()\n    poll_interval = 0.1\n    monitor_thread = Thread(target=memory_monitor, args=(queue, poll_interval))\n    monitor_thread.start()\n    try:\n        most_common = count_prefixes()\n        print('Top prefixes:', most_common)\n    finally:\n        queue.put('stop')\n        monitor_thread.join()\n\n\ndef display_top(snapshot, key_type='lineno', limit=3):\n    snapshot = snapshot.filter_traces((\n        tracemalloc.Filter(False, \"&lt;frozen importlib._bootstrap&gt;\"),\n        tracemalloc.Filter(False, \"&lt;unknown&gt;\"),\n    ))\n    top_stats = snapshot.statistics(key_type)\n\n    print(\"Top %s lines\" % limit)\n    for index, stat in enumerate(top_stats[:limit], 1):\n        frame = stat.traceback[0]\n        # replace \"/path/to/module/file.py\" with \"module/file.py\"\n        filename = os.sep.join(frame.filename.split(os.sep)[-2:])\n        print(\"#%s: %s:%s: %.1f KiB\"\n              % (index, filename, frame.lineno, stat.size / 1024))\n        line = linecache.getline(frame.filename, frame.lineno).strip()\n        if line:\n            print('    %s' % line)\n\n    other = top_stats[limit:]\n    if other:\n        size = sum(stat.size for stat in other)\n        print(\"%s other: %.1f KiB\" % (len(other), size / 1024))\n    total = sum(stat.size for stat in top_stats)\n    print(\"Total allocated size: %.1f KiB\" % (total / 1024))\n\n\nmain()\nresourceresource2018-05-29 10:34:34.441334 max RSS 10188\n2018-05-29 10:34:36.475707 max RSS 23588\n2018-05-29 10:34:36.616524 max RSS 38104\n2018-05-29 10:34:36.772978 max RSS 45924\n2018-05-29 10:34:36.929688 max RSS 46824\n2018-05-29 10:34:37.087554 max RSS 46852\nTop prefixes: [('con', 1220), ('dis', 1002), ('pro', 809)]\n2018-05-29 10:34:56.281262\nTop 3 lines\n#1: scratches/scratch.py:36: 6527.0 KiB\n    words = list(words)\n#2: scratches/scratch.py:38: 16.4 KiB\n    prefix = word[:3]\n#3: scratches/scratch.py:39: 10.1 KiB\n    counts[prefix] += 1\n19 other: 10.8 KiB\nTotal allocated size: 6564.3 KiB\n/proc/self/statm/proc/self/statm"}, {"idx": "webquery-test-15", "doc": "Better way to shuffle two numpy arrays in unison", "code": "def unison_shuffled_copies(a, b):\n    assert len(a) == len(b)\n    p = numpy.random.permutation(len(a))\n    return a[p], b[p]\n"}, {"idx": "webquery-test-1", "doc": "Python != operation vs \"is not\"", "code": "======isisisisisisis"}, {"idx": "webquery-test-2", "doc": "Can I add comments to a pip requirements file?", "code": "#pip"}, {"idx": "webquery-test-3", "doc": "Access multiple elements of list knowing their index", "code": "operator.itemgetterfrom operator import itemgetter \na = [-2, 1, 5, 3, 8, 5, 6]\nb = [1, 2, 5]\nprint(itemgetter(*b)(a))\n# Result:\n(1, 5, 5)\nimport numpy as np\na = np.array([-2, 1, 5, 3, 8, 5, 6])\nb = [1, 2, 5]\nprint(list(a[b]))\n# Result:\n[1, 5, 5]\n"}, {"idx": "webquery-test-4", "doc": "Virtualenv Command Not Found", "code": "pip install virtualenv\nsudo /usr/bin/easy_install virtualenv\n/usr/local/bin/PATHPATHPATH"}, {"idx": "webquery-test-5", "doc": "Extracting specific selected columns to new DataFrame as a copy", "code": "new = old[['A', 'C', 'D']].copy()\n.copy().copy()filternew = old.filter(['A','B','D'], axis=1)\ndropnew = old.drop('B', axis=1)\n"}, {"idx": "webquery-test-6", "doc": "What does '# noqa' mean in Python comments?", "code": "# noqa"}, {"idx": "webquery-test-7", "doc": "Python: One Try Multiple Except", "code": "try:\n   ...\nexcept FirstException:\n   handle_first_one()\n\nexcept SecondException:\n   handle_second_one()\n\nexcept (ThirdException, FourthException, FifthException) as e:\n   handle_either_of_3rd_4th_or_5th()\n\nexcept Exception:\n   handle_all_other_exceptions()\n"}, {"idx": "webquery-test-8", "doc": "How to search and replace text in a file?", "code": "# Read in the file\nwith open('file.txt', 'r') as file :\n  filedata = file.read()\n\n# Replace the target string\nfiledata = filedata.replace('ram', 'abcd')\n\n# Write the file out again\nwith open('file.txt', 'w') as file:\n  file.write(filedata)\n"}, {"idx": "webquery-test-9", "doc": "Recommendations of Python REST (web services) framework?", "code": "import web\nimport json\nfrom mimerender import mimerender\n\nrender_xml = lambda message: '&lt;message&gt;%s&lt;/message&gt;'%message\nrender_json = lambda **args: json.dumps(args)\nrender_html = lambda message: '&lt;html&gt;&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;'%message\nrender_txt = lambda message: message\n\nurls = (\n    '/(.*)', 'greet'\n)\napp = web.application(urls, globals())\n\nclass greet:\n    @mimerender(\n        default = 'html',\n        html = render_html,\n        xml  = render_xml,\n        json = render_json,\n        txt  = render_txt\n    )\n    def GET(self, name):\n        if not name: \n            name = 'world'\n        return {'message': 'Hello, ' + name + '!'}\n\nif __name__ == \"__main__\":\n    app.run()\n$ curl localhost:8080/x\n&lt;html&gt;&lt;body&gt;Hello, x!&lt;/body&gt;&lt;/html&gt;\n\n$ curl -H \"Accept: application/html\" localhost:8080/x\n&lt;html&gt;&lt;body&gt;Hello, x!&lt;/body&gt;&lt;/html&gt;\n\n$ curl -H \"Accept: application/xml\" localhost:8080/x\n&lt;message&gt;Hello, x!&lt;/message&gt;\n\n$ curl -H \"Accept: application/json\" localhost:8080/x\n{'message':'Hello, x!'}\n\n$ curl -H \"Accept: text/plain\" localhost:8080/x\nHello, x!\n"}, {"idx": "webquery-test-10", "doc": "Named colors in matplotlib", "code": "import matplotlib.pyplot as plt\nfrom matplotlib import colors as mcolors\n\n\ncolors = dict(mcolors.BASE_COLORS, **mcolors.CSS4_COLORS)\n\n# Sort colors by hue, saturation, value and name.\nby_hsv = sorted((tuple(mcolors.rgb_to_hsv(mcolors.to_rgba(color)[:3])), name)\n                for name, color in colors.items())\nsorted_names = [name for hsv, name in by_hsv]\n\nn = len(sorted_names)\nncols = 4\nnrows = n // ncols\n\nfig, ax = plt.subplots(figsize=(12, 10))\n\n# Get height and width\nX, Y = fig.get_dpi() * fig.get_size_inches()\nh = Y / (nrows + 1)\nw = X / ncols\n\nfor i, name in enumerate(sorted_names):\n    row = i % nrows\n    col = i // nrows\n    y = Y - (row * h) - h\n\n    xi_line = w * (col + 0.05)\n    xf_line = w * (col + 0.25)\n    xi_text = w * (col + 0.3)\n\n    ax.text(xi_text, y, name, fontsize=(h * 0.8),\n            horizontalalignment='left',\n            verticalalignment='center')\n\n    ax.hlines(y + h * 0.1, xi_line, xf_line,\n              color=colors[name], linewidth=(h * 0.8))\n\nax.set_xlim(0, X)\nax.set_ylim(0, Y)\nax.set_axis_off()\n\nfig.subplots_adjust(left=0, right=1,\n                    top=1, bottom=0,\n                    hspace=0, wspace=0)\nplt.show()\nplt.plot([1,2], lw=4, c='xkcd:baby poop green')\nplt.plot([1,2], lw=4, c='tab:green')\nplt.plot([1,2], lw=4, c='#8f9805')\n_color_data.py"}, {"idx": "webquery-test-11", "doc": "Normal arguments vs. keyword arguments", "code": "def my_function(arg1, arg2, **kwargs)\nkwargsdef my_function(**kwargs):\n    print str(kwargs)\n\nmy_function(a=12, b=\"abc\")\n\n{'a': 12, 'b': 'abc'}\n"}, {"idx": "webquery-test-12", "doc": "Disable Tensorflow debugging information", "code": "os.environimport os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \nimport tensorflow as tf\n0 = all messages are logged (default behavior)\n1 = INFO messages are not printed\n2 = INFO and WARNING messages are not printed\n3 = INFO, WARNING, and ERROR messages are not printed\n"}, {"idx": "webquery-test-13", "doc": "Why use argparse rather than optparse?", "code": "2.72.7argparse++argparse"}, {"idx": "webquery-test-14", "doc": "How do I update a Python package?", "code": "sudo pip install [package_name] --upgrade\nsudosudo pip3 install [package_name] --upgrade\n"}, {"idx": "webquery-test-15", "doc": "error UnicodeDecodeError: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte", "code": "bytesbytescontents = open(path).read()with open(path, 'rb') as f:\n  contents = f.read()\nbbbb"}, {"idx": "webquery-test-16", "doc": "How to check if a user is logged in (how to properly use user.is_authenticated)?", "code": "is_authenticatedif request.user.is_authenticated:\n    # do something if the user is authenticated\nis_authenticatedif request.user.is_authenticated():\n    # do something if the user is authenticated\n{% if user.is_authenticated %}\nUser"}, {"idx": "webquery-test-17", "doc": "Find row where values for column is maximal in a pandas DataFrame", "code": "idxmax&gt;&gt;&gt; import pandas\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; df = pandas.DataFrame(np.random.randn(5,3),columns=['A','B','C'])\n&gt;&gt;&gt; df\n          A         B         C\n0  1.232853 -1.979459 -0.573626\n1  0.140767  0.394940  1.068890\n2  0.742023  1.343977 -0.579745\n3  2.125299 -0.649328 -0.211692\n4 -0.187253  1.908618 -1.862934\n&gt;&gt;&gt; df['A'].idxmax()\n3\n&gt;&gt;&gt; df['B'].idxmax()\n4\n&gt;&gt;&gt; df['C'].idxmax()\n1\nnumpy.argmaxnumpy.argmaxnumpy.argmaxnumpy.argmaxnumpy.argmaxidxmax()idxmax()idxmax()idxmax()idxmax()idxmax()DataFrameIn [19]: dfrm\nOut[19]: \n          A         B         C\na  0.143693  0.653810  0.586007\nb  0.623582  0.312903  0.919076\nc  0.165438  0.889809  0.000967\nd  0.308245  0.787776  0.571195\ne  0.870068  0.935626  0.606911\nf  0.037602  0.855193  0.728495\ng  0.605366  0.338105  0.696460\nh  0.000000  0.090814  0.963927\ni  0.688343  0.188468  0.352213\ni  0.879000  0.105039  0.900260\n\nIn [20]: dfrm['A'].idxmax()\nOut[20]: 'i'\n\nIn [21]: dfrm.iloc[dfrm['A'].idxmax()]  # .ix instead of .iloc in older versions of pandas\nOut[21]: \n          A         B         C\ni  0.688343  0.188468  0.352213\ni  0.879000  0.105039  0.900260\nidxmaxidxmaxidxmax"}, {"idx": "webquery-test-18", "doc": "How to have one colorbar for all subplots", "code": "subplots_adjustimport numpy as np\nimport matplotlib.pyplot as plt\n\nfig, axes = plt.subplots(nrows=2, ncols=2)\nfor ax in axes.flat:\n    im = ax.imshow(np.random.random((10,10)), vmin=0, vmax=1)\n\nfig.subplots_adjust(right=0.8)\ncbar_ax = fig.add_axes([0.85, 0.15, 0.05, 0.7])\nfig.colorbar(im, cax=cbar_ax)\n\nplt.show()\nimimimim"}, {"idx": "webquery-test-1", "doc": "Retrieving the output of subprocess.call()", "code": "subprocess.check_outputimport subprocess\n\nprint subprocess.check_output([\"ping\", \"-c\", \"1\", \"8.8.8.8\"])\n-c-c"}, {"idx": "webquery-test-2", "doc": "How to remove specific elements in a numpy array", "code": "numpy.delete(a, index)\nimport numpy as np\n\na = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\nindex = [2, 3, 6]\n\nnew_a = np.delete(a, index)\n\nprint(new_a) #Prints `[1, 2, 5, 6, 8, 9]`\nnumpy.delete()numpy.delete()"}, {"idx": "webquery-test-3", "doc": "Escaping regex string", "code": "re.escape()redef simplistic_plural(word, text):\n    word_or_plural = re.escape(word) + 's?'\n    return re.match(word_or_plural, text)\n"}, {"idx": "webquery-test-4", "doc": "Inserting image into IPython notebook markdown", "code": "![alt text](imagename.png \"Title\")\n"}, {"idx": "webquery-test-5", "doc": "ImportError: No module named PIL", "code": "pip install Pillow\n"}, {"idx": "webquery-test-6", "doc": "How to get Linux console window width in Python", "code": "shutil&gt;&gt;&gt; import shutil\n&gt;&gt;&gt; shutil.get_terminal_size((80, 20))  # pass fallback\nos.terminal_size(columns=87, lines=23)  # returns a named-tuple\n"}, {"idx": "webquery-test-7", "doc": "How to select rows with one or more nulls from a pandas DataFrame without listing columns explicitly?", "code": "pandaspandaspandasisnullisnull&gt;&gt;&gt; df = pd.DataFrame([range(3), [0, np.NaN, 0], [0, 0, np.NaN], range(3), range(3)])\n&gt;&gt;&gt; df.isnull()\n       0      1      2\n0  False  False  False\n1  False   True  False\n2  False  False   True\n3  False  False  False\n4  False  False  False\n&gt;&gt;&gt; df.isnull().any(axis=1)\n0    False\n1     True\n2     True\n3    False\n4    False\ndtype: bool\n&gt;&gt;&gt; df[df.isnull().any(axis=1)]\n   0   1   2\n1  0 NaN   0\n2  0   0 NaN\npandasisnullIn [56]: df = pd.DataFrame([range(3), [0, np.NaN, 0], [0, 0, np.NaN], range(3), range(3)])\n\nIn [57]: df\nOut[57]: \n   0   1   2\n0  0   1   2\n1  0 NaN   0\n2  0   0 NaN\n3  0   1   2\n4  0   1   2\n\nIn [58]: pd.isnull(df)\nOut[58]: \n       0      1      2\n0  False  False  False\n1  False   True  False\n2  False  False   True\n3  False  False  False\n4  False  False  False\n\nIn [59]: pd.isnull(df).any(axis=1)\nOut[59]: \n0    False\n1     True\n2     True\n3    False\n4    False\nIn [60]: df[pd.isnull(df).any(axis=1)]\nOut[60]: \n   0   1   2\n1  0 NaN   0\n2  0   0 NaN\n"}, {"idx": "webquery-test-8", "doc": "Deleting folders in python recursively", "code": "shutil.rmtreeimport shutil\nshutil.rmtree('/path/to/your/dir/')\n"}, {"idx": "webquery-test-9", "doc": "How can I recover the return value of a function passed to multiprocessing.Process?", "code": "import multiprocessing\n\n\ndef worker(procnum, return_dict):\n    \"\"\"worker function\"\"\"\n    print(str(procnum) + \" represent!\")\n    return_dict[procnum] = procnum\n\n\nif __name__ == \"__main__\":\n    manager = multiprocessing.Manager()\n    return_dict = manager.dict()\n    jobs = []\n    for i in range(5):\n        p = multiprocessing.Process(target=worker, args=(i, return_dict))\n        jobs.append(p)\n        p.start()\n\n    for proc in jobs:\n        proc.join()\n    print(return_dict.values())\n"}, {"idx": "webquery-test-10", "doc": "How to find the installed pandas version", "code": "pandas.__version__In [76]: import pandas as pd\n\nIn [77]: pd.__version__\nOut[77]: '0.12.0-933-g281dc4e'\npd.show_versions()In [53]: pd.show_versions(as_json=False)\n\nINSTALLED VERSIONS\n------------------\ncommit: None\npython: 2.7.6.final.0\npython-bits: 64\nOS: Linux\nOS-release: 3.13.0-45-generic\nmachine: x86_64\nprocessor: x86_64\nbyteorder: little\nLC_ALL: None\nLANG: en_US.UTF-8\n\npandas: 0.15.2-113-g5531341\nnose: 1.3.1\nCython: 0.21.1\nnumpy: 1.8.2\nscipy: 0.14.0.dev-371b4ff\nstatsmodels: 0.6.0.dev-a738b4f\nIPython: 2.0.0-dev\nsphinx: 1.2.2\npatsy: 0.3.0\ndateutil: 1.5\npytz: 2012c\nbottleneck: None\ntables: 3.1.1\nnumexpr: 2.2.2\nmatplotlib: 1.4.2\nopenpyxl: None\nxlrd: 0.9.3\nxlwt: 0.7.5\nxlsxwriter: None\nlxml: 3.3.3\nbs4: 4.3.2\nhtml5lib: 0.999\nhttplib2: 0.8\napiclient: None\nrpy2: 2.5.5\nsqlalchemy: 0.9.8\npymysql: None\npsycopg2: 2.4.5 (dt dec mx pq3 ext)\n"}, {"idx": "webquery-test-11", "doc": "How to call a Python function from Node.js", "code": "const spawn = require(\"child_process\").spawn;\nconst pythonProcess = spawn('python',[\"path/to/script.py\", arg1, arg2, ...]);\nimport sysimport sysimport sysimport sysimport sysprint(dataToSendBack)\nsys.stdout.flush()\npythonProcess.stdout.on('data', (data) =&gt; {\n // Do something with the data returned from python script\n});\n"}, {"idx": "webquery-test-12", "doc": "pandas: merge (join) two data frames on multiple columns", "code": "new_df = pd.merge(A_df, B_df,  how='left', left_on=['A_c1','c2'], right_on = ['B_c1','c2'])\n"}, {"idx": "webquery-test-13", "doc": "How to get all values from python enum class?", "code": "[e.value for e in Color]\n"}, {"idx": "webquery-test-14", "doc": "When should I be using classes in Python?", "code": "dictclass Student(object):\n    def __init__(self, name, age, gender, level, grades=None):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.level = level\n        self.grades = grades or {}\n\n    def setGrade(self, course, grade):\n        self.grades[course] = grade\n\n    def getGrade(self, course):\n        return self.grades[course]\n\n    def getGPA(self):\n        return sum(self.grades.values())/len(self.grades)\n\n# Define some students\njohn = Student(\"John\", 12, \"male\", 6, {\"math\":3.3})\njane = Student(\"Jane\", 12, \"female\", 6, {\"math\":3.5})\n\n# Now we can get to the grades easily\nprint(john.getGPA())\nprint(jane.getGPA())\ndef calculateGPA(gradeDict):\n    return sum(gradeDict.values())/len(gradeDict)\n\nstudents = {}\n# We can set the keys to variables so we might minimize typos\nname, age, gender, level, grades = \"name\", \"age\", \"gender\", \"level\", \"grades\"\njohn, jane = \"john\", \"jane\"\nmath = \"math\"\nstudents[john] = {}\nstudents[john][age] = 12\nstudents[john][gender] = \"male\"\nstudents[john][level] = 6\nstudents[john][grades] = {math:3.3}\n\nstudents[jane] = {}\nstudents[jane][age] = 12\nstudents[jane][gender] = \"female\"\nstudents[jane][level] = 6\nstudents[jane][grades] = {math:3.5}\n\n# At this point, we need to remember who the students are and where the grades are stored. Not a huge deal, but avoided by OOP.\nprint(calculateGPA(students[john][grades]))\nprint(calculateGPA(students[jane][grades]))\n"}, {"idx": "webquery-test-1", "doc": "Failed to install Python Cryptography package with PIP and setup.py", "code": "C:\\&gt; \\path\\to\\vcvarsall.bat x86_amd64\nC:\\&gt; set LIB=C:\\OpenSSL-1.0.1f-64bit\\lib;%LIB%\nC:\\&gt; set INCLUDE=C:\\OpenSSL-1.0.1f-64bit\\include;%INCLUDE%\nC:\\&gt; pip install cryptography\nsudo apt-get install build-essential libssl-dev libffi-dev python-dev\nsudo yum install gcc libffi-devel python-devel OpenSSL-devel\npip install cryptography\n"}, {"idx": "webquery-test-2", "doc": "Simplify Chained Comparison", "code": "if start &lt;= x &lt;= end:\n"}, {"idx": "webquery-test-3", "doc": "TypeError: unhashable type: 'dict'", "code": "dictdictdict&gt;&gt;&gt; dict_key = {\"a\": \"b\"}\n&gt;&gt;&gt; some_dict[dict_key] = True\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unhashable type: 'dict'\n&gt;&gt;&gt; key = frozenset(dict_key.items())\nkeykeykey&gt;&gt;&gt; some_dict[key] = True\n&gt;&gt;&gt; some_dict\n{frozenset([('a', 'b')]): True}\n&gt;&gt;&gt; some_dict[dict_key]                     # Doesn't work\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unhashable type: 'dict'\n&gt;&gt;&gt; some_dict[frozenset(dict_key.items())]  # Works\nTrue\ndictdef freeze(d):\n    if isinstance(d, dict):\n        return frozenset((key, freeze(value)) for key, value in d.items())\n    elif isinstance(d, list):\n        return tuple(freeze(value) for value in d)\n    return d\n"}, {"idx": "webquery-test-4", "doc": "Difference between os.getenv and os.environ.get", "code": "os.environos.environos.environos.getenvos.getenvos.getenvos.getenvos.getenv"}, {"idx": "webquery-test-5", "doc": "Label encoding across multiple columns in scikit-learn", "code": "df.apply(LabelEncoder().fit_transform)\nOneHotEncoder().fit_transform(df)\nfrom collections import defaultdict\nd = defaultdict(LabelEncoder)\nLabelEncoder# Encoding the variable\nfit = df.apply(lambda x: d[x.name].fit_transform(x))\n\n# Inverse the encoded\nfit.apply(lambda x: d[x.name].inverse_transform(x))\n\n# Using the dictionary to label future data\ndf.apply(lambda x: d[x.name].transform(x))\nFlattenForEachFlattenForEachFlattenForEach(LabelEncoder(), then_unflatten=True).fit_transform(df)\nLabelEncoderLabelEncoder"}, {"idx": "webquery-test-6", "doc": "What is the easiest way to get current GMT time in Unix timestamp format?", "code": "import time\n\ntime.time()\n1369550494.884832\n"}, {"idx": "webquery-test-7", "doc": "Matplotlib (pyplot) savefig outputs blank image", "code": "T0 is not NoneT0 is not NoneT0 is not Noneplt.show()plt.savefig('tessstttyyy.png', dpi=100)plt.savefig('tessstttyyy.png', dpi=100)plt.savefig('tessstttyyy.png', dpi=100)plt.savefig('tessstttyyy.png', dpi=100)plt.savefig('tessstttyyy.png', dpi=100)plt.savefig('tessstttyyy.png', dpi=100)fig1 = plt.gcf()\nplt.show()\nplt.draw()\nfig1.savefig('tessstttyyy.png', dpi=100)\n"}, {"idx": "webquery-test-8", "doc": "Convert string date to timestamp in Python", "code": "&gt;&gt;&gt; import time\n&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; s = \"01/12/2011\"\n&gt;&gt;&gt; time.mktime(datetime.datetime.strptime(s, \"%d/%m/%Y\").timetuple())\n1322697600.0\n"}, {"idx": "webquery-test-9", "doc": "How to override the [] operator in Python?", "code": "__getitem__class MyClass:\n    def __getitem__(self, key):\n        return key * 2\n\nmyobj = MyClass()\nmyobj[3] #Output: 6\n__setitem__&gt;&gt;&gt; myobj[5] = 1\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: MyClass instance has no attribute '__setitem__'\n"}, {"idx": "webquery-test-10", "doc": "Raise warning in Python without interrupting program", "code": "import warnings\nwarnings.warn(\"Warning...........Message\")\n"}, {"idx": "webquery-test-11", "doc": "remove None value from a list without removing the 0 value", "code": "&gt;&gt;&gt; L = [0, 23, 234, 89, None, 0, 35, 9]\n&gt;&gt;&gt; [x for x in L if x is not None]\n[0, 23, 234, 89, 0, 35, 9]\nfilterfilter&gt;&gt;&gt; from operator import is_not\n&gt;&gt;&gt; from functools import partial\n&gt;&gt;&gt; L = [0, 23, 234, 89, None, 0, 35, 9]\n&gt;&gt;&gt; list(filter(partial(is_not, None), L))\n[0, 23, 234, 89, 0, 35, 9]\n"}, {"idx": "webquery-test-12", "doc": "What does .view() do in PyTorch?", "code": "view()view()aimport torch\na = torch.range(1, 16)\n4 x 4a = a.view(4, 4)\naaaax = self.pool(F.relu(self.conv2(x)))"}, {"idx": "webquery-test-13", "doc": "Calling parent class __init__ with multiple inheritance, what's the right way?", "code": "class Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\nclass Foo:\n    def __init__(self):\n        self.foo = 'foo'\n\nclass Bar:\n    def __init__(self, bar):\n        self.bar = bar\n"}, {"idx": "webquery-test-14", "doc": "List files ONLY in the current directory", "code": "os.listdiros.listdiros.listdirimport os\nfiles = [f for f in os.listdir('.') if os.path.isfile(f)]\nfor f in files:\n    # do something\nfiles = [f for f in os.listdir(somedir) if os.path.isfile(f)]\nfos.path.isfile(os.path.join(somedir, f))"}, {"idx": "webquery-test-15", "doc": "Split a Pandas column of lists into multiple columns", "code": "DataFrameDataFrameDataFrameimport pandas as pd\n\nd1 = {'teams': [['SF', 'NYG'],['SF', 'NYG'],['SF', 'NYG'],\n                ['SF', 'NYG'],['SF', 'NYG'],['SF', 'NYG'],['SF', 'NYG']]}\ndf2 = pd.DataFrame(d1)\nprint (df2)\n       teams\n0  [SF, NYG]\n1  [SF, NYG]\n2  [SF, NYG]\n3  [SF, NYG]\n4  [SF, NYG]\n5  [SF, NYG]\n6  [SF, NYG]\ndf2[['team1','team2']] = pd.DataFrame(df2.teams.tolist(), index= df2.index)\nprint (df2)\n       teams team1 team2\n0  [SF, NYG]    SF   NYG\n1  [SF, NYG]    SF   NYG\n2  [SF, NYG]    SF   NYG\n3  [SF, NYG]    SF   NYG\n4  [SF, NYG]    SF   NYG\n5  [SF, NYG]    SF   NYG\n6  [SF, NYG]    SF   NYG\nDataFramedf3 = pd.DataFrame(df2['teams'].to_list(), columns=['team1','team2'])\nprint (df3)\n  team1 team2\n0    SF   NYG\n1    SF   NYG\n2    SF   NYG\n3    SF   NYG\n4    SF   NYG\n5    SF   NYG\n6    SF   NYG\napply(pd.Series)#7k rows\ndf2 = pd.concat([df2]*1000).reset_index(drop=True)\n\nIn [121]: %timeit df2['teams'].apply(pd.Series)\n1.79 s \u00b1 52.5 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n\nIn [122]: %timeit pd.DataFrame(df2['teams'].to_list(), columns=['team1','team2'])\n1.63 ms \u00b1 54.3 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n"}, {"idx": "webquery-test-16", "doc": "Sending \"User-agent\" using Requests library in Python", "code": "user-agentUser-Agentimport requests\n\nurl = 'SOME URL'\n\nheaders = {\n    'User-Agent': 'My User Agent 1.0',\n    'From': 'youremail@domain.example'  # This is another valid field\n}\n\nresponse = requests.get(url, headers=headers)\nrequestsimport requests\n\nurl = 'SOME URL'\n\n# Get a copy of the default headers that requests would use\nheaders = requests.utils.default_headers()\n\n# Update the headers with your custom ones\n# You don't have to worry about case-sensitivity with\n# the dictionary keys, because default_headers uses a custom\n# CaseInsensitiveDict implementation within requests' source code.\nheaders.update(\n    {\n        'User-Agent': 'My User Agent 1.0',\n    }\n)\n\nresponse = requests.get(url, headers=headers)\n"}, {"idx": "webquery-test-17", "doc": "Best practices for adding .gitignore file for Python projects?", "code": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\nbin/\nbuild/\ndevelop-eggs/\ndist/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n# Rope\n.ropeproject\n\n# Django stuff:\n*.log\n*.pot\n\n# Sphinx documentation\ndocs/_build/\n"}, {"idx": "webquery-test-18", "doc": "How can I read large text files line by line, without loading them into memory?", "code": "forforwith open(\"log.txt\") as infile:\n    for line in infile:\n        print(line)\n"}, {"idx": "webquery-test-1", "doc": "BeautifulSoup getting href", "code": "find_allfind_allfind_all# Python2\nfrom BeautifulSoup import BeautifulSoup\n    \nhtml = '''&lt;a href=\"some_url\"&gt;next&lt;/a&gt;\n&lt;span class=\"class\"&gt;&lt;a href=\"another_url\"&gt;later&lt;/a&gt;&lt;/span&gt;'''\n    \nsoup = BeautifulSoup(html)\n    \nfor a in soup.find_all('a', href=True):\n    print \"Found the URL:\", a['href']\n\n# The output would be:\n# Found the URL: some_url\n# Found the URL: another_url\n# Python3\nfrom bs4 import BeautifulSoup\n\nhtml = '''&lt;a href=\"https://some_url.com\"&gt;next&lt;/a&gt;\n&lt;span class=\"class\"&gt;\n&lt;a href=\"https://some_other_url.com\"&gt;another_url&lt;/a&gt;&lt;/span&gt;'''\n\nsoup = BeautifulSoup(html)\n\nfor a in soup.find_all('a', href=True):\n    print(\"Found the URL:\", a['href'])\n\n# The output would be:\n# Found the URL: https://some_url.com\n# Found the URL: https://some_other_url.com\nfindAllfindAllhrefhrefhref_tags = soup.find_all(href=True)\n"}, {"idx": "webquery-test-2", "doc": "check if a key exists in a bucket in s3 using boto3", "code": "boto.s3.key.Keyboto.s3.key.Keyimport boto3\nimport botocore\n\ns3 = boto3.resource('s3')\n\ntry:\n    s3.Object('my-bucket', 'dootdoot.jpg').load()\nexcept botocore.exceptions.ClientError as e:\n    if e.response['Error']['Code'] == \"404\":\n        # The object does not exist.\n        ...\n    else:\n        # Something else has gone wrong.\n        raise\nelse:\n    # The object does exist.\n    ...\nload()load()load()load()"}, {"idx": "webquery-test-3", "doc": "Python Image Library fails with message \"decoder JPEG not available\" - PIL", "code": "pip uninstall PIL# install libjpeg-dev with apt\nsudo apt-get install libjpeg-dev\n# if you're on Ubuntu 14.04, also install this\nsudo apt-get install libjpeg8-dev\n\n# reinstall pillow\npip install --no-cache-dir -I pillow\nsudo ln -s /usr/lib/x86_64-linux-gnu/libjpeg.so /usr/lib\nsudo ln -s /usr/lib/x86_64-linux-gnu/libfreetype.so /usr/lib\nsudo ln -s /usr/lib/x86_64-linux-gnu/libz.so /usr/lib\nsudo ln -s /usr/lib/i386-linux-gnu/libjpeg.so /usr/lib/\nsudo ln -s /usr/lib/i386-linux-gnu/libfreetype.so.6 /usr/lib/\nsudo ln -s /usr/lib/i386-linux-gnu/libz.so /usr/lib/\npip install --no-cache-dir -I pillow\n--no-cache-dir"}, {"idx": "webquery-test-4", "doc": "Defining private module functions in python", "code": "#define private public#define private public#define private public"}, {"idx": "webquery-test-5", "doc": "Python Create unix timestamp five minutes in the future", "code": "calendar.timegmfuture = datetime.datetime.utcnow() + datetime.timedelta(minutes=5)\nreturn calendar.timegm(future.timetuple())\n%s%s"}, {"idx": "webquery-test-6", "doc": "How to print the value of a Tensor object in TensorFlow?", "code": "TensorTensorTensorTensortf.InteractiveSessiontf.InteractiveSessiontf.InteractiveSessiontf.InteractiveSessionwith tf.Session() as sess:  print(product.eval()) \nSessiontf.print()tf.compat.v1.Sessiontf.compat.v1.Sessiontf.printtf.get_static_value()"}, {"idx": "webquery-test-7", "doc": "Exit codes in Python", "code": "sys.exit()"}, {"idx": "webquery-test-8", "doc": "How to select a drop-down menu value with Selenium using Python?", "code": "SelectSelectfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import Select\n\ndriver = webdriver.Firefox()\ndriver.get('url')\n\nselect = Select(driver.find_element_by_id('fruits01'))\n\n# select by visible text\nselect.select_by_visible_text('Banana')\n\n# select by value \nselect.select_by_value('1')\n"}, {"idx": "webquery-test-9", "doc": "How do I check if I'm running on Windows in Python?", "code": "os.nameos.nameimport os\n\nif os.name == 'nt':\n     ...\nos.namesys.platformsys.platform"}, {"idx": "webquery-test-10", "doc": "How to change dataframe column names in PySpark?", "code": " data = sqlContext.createDataFrame([(\"Alberto\", 2), (\"Dakota\", 2)], \n                                   [\"Name\", \"askdaosdka\"])\n data.show()\n data.printSchema()\n\n # Output\n #+-------+----------+\n #|   Name|askdaosdka|\n #+-------+----------+\n #|Alberto|         2|\n #| Dakota|         2|\n #+-------+----------+\n\n #root\n # |-- Name: string (nullable = true)\n # |-- askdaosdka: long (nullable = true)\n\n df = data.selectExpr(\"Name as name\", \"askdaosdka as age\")\n df.show()\n df.printSchema()\n\n # Output\n #+-------+---+\n #|   name|age|\n #+-------+---+\n #|Alberto|  2|\n #| Dakota|  2|\n #+-------+---+\n\n #root\n # |-- name: string (nullable = true)\n # |-- age: long (nullable = true)\n data = sqlContext.createDataFrame([(\"Alberto\", 2), (\"Dakota\", 2)], \n                                   [\"Name\", \"askdaosdka\"])\n data.show()\n data.printSchema()\n\n # Output\n #+-------+----------+\n #|   Name|askdaosdka|\n #+-------+----------+\n #|Alberto|         2|\n #| Dakota|         2|\n #+-------+----------+\n\n #root\n # |-- Name: string (nullable = true)\n # |-- askdaosdka: long (nullable = true)\n\n df = data.selectExpr(\"Name as name\", \"askdaosdka as age\")\n df.show()\n df.printSchema()\n\n # Output\n #+-------+---+\n #|   name|age|\n #+-------+---+\n #|Alberto|  2|\n #| Dakota|  2|\n #+-------+---+\n\n #root\n # |-- name: string (nullable = true)\n # |-- age: long (nullable = true)\n data = sqlContext.createDataFrame([(\"Alberto\", 2), (\"Dakota\", 2)], \n                                   [\"Name\", \"askdaosdka\"])\n data.show()\n data.printSchema()\n\n # Output\n #+-------+----------+\n #|   Name|askdaosdka|\n #+-------+----------+\n #|Alberto|         2|\n #| Dakota|         2|\n #+-------+----------+\n\n #root\n # |-- Name: string (nullable = true)\n # |-- askdaosdka: long (nullable = true)\n\n df = data.selectExpr(\"Name as name\", \"askdaosdka as age\")\n df.show()\n df.printSchema()\n\n # Output\n #+-------+---+\n #|   name|age|\n #+-------+---+\n #|Alberto|  2|\n #| Dakota|  2|\n #+-------+---+\n\n #root\n # |-- name: string (nullable = true)\n # |-- age: long (nullable = true)\n data = sqlContext.createDataFrame([(\"Alberto\", 2), (\"Dakota\", 2)], \n                                   [\"Name\", \"askdaosdka\"])\n data.show()\n data.printSchema()\n\n # Output\n #+-------+----------+\n #|   Name|askdaosdka|\n #+-------+----------+\n #|Alberto|         2|\n #| Dakota|         2|\n #+-------+----------+\n\n #root\n # |-- Name: string (nullable = true)\n # |-- askdaosdka: long (nullable = true)\n\n df = data.selectExpr(\"Name as name\", \"askdaosdka as age\")\n df.show()\n df.printSchema()\n\n # Output\n #+-------+---+\n #|   name|age|\n #+-------+---+\n #|Alberto|  2|\n #| Dakota|  2|\n #+-------+---+\n\n #root\n # |-- name: string (nullable = true)\n # |-- age: long (nullable = true)\n data = sqlContext.createDataFrame([(\"Alberto\", 2), (\"Dakota\", 2)], \n                                   [\"Name\", \"askdaosdka\"])\n data.show()\n data.printSchema()\n\n # Output\n #+-------+----------+\n #|   Name|askdaosdka|\n #+-------+----------+\n #|Alberto|         2|\n #| Dakota|         2|\n #+-------+----------+\n\n #root\n # |-- Name: string (nullable = true)\n # |-- askdaosdka: long (nullable = true)\n\n df = data.selectExpr(\"Name as name\", \"askdaosdka as age\")\n df.show()\n df.printSchema()\n\n # Output\n #+-------+---+\n #|   name|age|\n #+-------+---+\n #|Alberto|  2|\n #| Dakota|  2|\n #+-------+---+\n\n #root\n # |-- name: string (nullable = true)\n # |-- age: long (nullable = true)\n data = sqlContext.createDataFrame([(\"Alberto\", 2), (\"Dakota\", 2)], \n                                   [\"Name\", \"askdaosdka\"])\n data.show()\n data.printSchema()\n\n # Output\n #+-------+----------+\n #|   Name|askdaosdka|\n #+-------+----------+\n #|Alberto|         2|\n #| Dakota|         2|\n #+-------+----------+\n\n #root\n # |-- Name: string (nullable = true)\n # |-- askdaosdka: long (nullable = true)\n\n df = data.selectExpr(\"Name as name\", \"askdaosdka as age\")\n df.show()\n df.printSchema()\n\n # Output\n #+-------+---+\n #|   name|age|\n #+-------+---+\n #|Alberto|  2|\n #| Dakota|  2|\n #+-------+---+\n\n #root\n # |-- name: string (nullable = true)\n # |-- age: long (nullable = true)\n data = sqlContext.createDataFrame([(\"Alberto\", 2), (\"Dakota\", 2)], \n                                   [\"Name\", \"askdaosdka\"])\n data.show()\n data.printSchema()\n\n # Output\n #+-------+----------+\n #|   Name|askdaosdka|\n #+-------+----------+\n #|Alberto|         2|\n #| Dakota|         2|\n #+-------+----------+\n\n #root\n # |-- Name: string (nullable = true)\n # |-- askdaosdka: long (nullable = true)\n\n df = data.selectExpr(\"Name as name\", \"askdaosdka as age\")\n df.show()\n df.printSchema()\n\n # Output\n #+-------+---+\n #|   name|age|\n #+-------+---+\n #|Alberto|  2|\n #| Dakota|  2|\n #+-------+---+\n\n #root\n # |-- name: string (nullable = true)\n # |-- age: long (nullable = true)\n"}, {"idx": "webquery-test-11", "doc": "Simple way to measure cell execution time in ipython notebook", "code": "%%%%%%time\nclf = tree.DecisionTreeRegressor().fit(X_train, y_train)\nres = clf.predict(X_test)\nprint(res)\n"}, {"idx": "webquery-test-12", "doc": "Checking if type == list in python", "code": "isinstance()if isinstance(object, list):\n       ## DO what you want\nif isinstance(tmpDict[key], list):\n      ## DO SOMETHING\nx = [1,2,3]\nif type(x) == list():\n    print \"This wont work\"\nif type(x) == list:                  ## one of the way to see if it's list\n    print \"this will work\"           \nif type(x) == type(list()):\n    print \"lets see if this works\"\nif isinstance(x, list):              ## most preferred way to check if it's list\n    print \"This should work just fine\"\nisinstance()isinstance()isinstance()isinstance()"}, {"idx": "webquery-test-13", "doc": "Python - Count elements in list", "code": "len()&gt;&gt;&gt; someList=[]\n&gt;&gt;&gt; print len(someList)\n0\n"}, {"idx": "webquery-test-1", "doc": "Display image as grayscale using matplotlib", "code": "image.pngimport numpy as np\nimport matplotlib.pyplot as plt\nfrom PIL import Image\n\nfname = 'image.png'\nimage = Image.open(fname).convert(\"L\")\narr = np.asarray(image)\nplt.imshow(arr, cmap='gray', vmin=0, vmax=255)\nplt.show()\ncmap='gray_r'"}, {"idx": "webquery-test-2", "doc": "How do I execute a program from Python? os.system fails due to spaces in path", "code": "subprocess.callimport subprocess\nsubprocess.call(['C:\\\\Temp\\\\a b c\\\\Notepad.exe', 'C:\\\\test.txt'])\n"}, {"idx": "webquery-test-3", "doc": "Create a directly-executable cross-platform GUI app using Python", "code": "PyQt"}, {"idx": "webquery-test-4", "doc": "Are tuples more efficient than lists in Python?", "code": "    &gt;&gt;&gt; from dis import dis\n\n    &gt;&gt;&gt; dis(compile(\"(10, 'abc')\", '', 'eval'))\n      1           0 LOAD_CONST               2 ((10, 'abc'))\n                  3 RETURN_VALUE   \n \n    &gt;&gt;&gt; dis(compile(\"[10, 'abc']\", '', 'eval'))\n      1           0 LOAD_CONST               0 (10)\n                  3 LOAD_CONST               1 ('abc')\n                  6 BUILD_LIST               2\n                  9 RETURN_VALUE \ntuple(some_tuple)&gt;&gt;&gt; a = (10, 20, 30)\n&gt;&gt;&gt; b = tuple(a)\n&gt;&gt;&gt; a is b\nTrue\nlist(some_list)&gt;&gt;&gt; a = [10, 20, 30]\n&gt;&gt;&gt; b = list(a)\n&gt;&gt;&gt; a is b\nFalse\nappend()&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.getsizeof(tuple(iter(range(10))))\n128\n&gt;&gt;&gt; sys.getsizeof(list(iter(range(10))))\n200\n/* This over-allocates proportional to the list size, making room\n * for additional growth.  The over-allocation is mild, but is\n * enough to give linear-time amortized behavior over a long\n * sequence of appends() in the presence of a poorly-performing\n * system realloc().\n * The growth pattern is:  0, 4, 8, 16, 25, 35, 46, 58, 72, 88, ...\n * Note: new_allocated won't overflow because the largest possible value\n *       is PY_SSIZE_T_MAX * (9 / 8) + 6 which always fits in a size_t.\n */\n$ python3.6 -m timeit -s 'a = (10, 20, 30)' 'a[1]'\n10000000 loops, best of 3: 0.0304 usec per loop\n$ python3.6 -m timeit -s 'a = [10, 20, 30]' 'a[1]'\n10000000 loops, best of 3: 0.0309 usec per loop\n\n$ python3.6 -m timeit -s 'a = (10, 20, 30)' 'x, y, z = a'\n10000000 loops, best of 3: 0.0249 usec per loop\n$ python3.6 -m timeit -s 'a = [10, 20, 30]' 'x, y, z = a'\n10000000 loops, best of 3: 0.0251 usec per loop\n(10, 20)    typedef struct {\n        Py_ssize_t ob_refcnt;\n        struct _typeobject *ob_type;\n        Py_ssize_t ob_size;\n        PyObject *ob_item[2];     /* store a pointer to 10 and a pointer to 20 */\n    } PyTupleObject;\n[10, 20]    PyObject arr[2];              /* store a pointer to 10 and a pointer to 20 */\n\n    typedef struct {\n        Py_ssize_t ob_refcnt;\n        struct _typeobject *ob_type;\n        Py_ssize_t ob_size;\n        PyObject **ob_item = arr; /* store a pointer to the two-pointer array */\n        Py_ssize_t allocated;\n    } PyListObject;\n"}, {"idx": "webquery-test-5", "doc": "How do I loop through a list by twos?", "code": "rangefor i in xrange(0,10,2):\n  print(i)\nfor i in range(0,10,2):\n  print(i)\nxrangexrange"}, {"idx": "webquery-test-6", "doc": "How to process SIGTERM signal gracefully?", "code": "import signal\nimport time\n\nclass GracefulKiller:\n  kill_now = False\n  def __init__(self):\n    signal.signal(signal.SIGINT, self.exit_gracefully)\n    signal.signal(signal.SIGTERM, self.exit_gracefully)\n\n  def exit_gracefully(self, *args):\n    self.kill_now = True\n\nif __name__ == '__main__':\n  killer = GracefulKiller()\n  while not killer.kill_now:\n    time.sleep(1)\n    print(\"doing something in a loop ...\")\n   \n  print(\"End of the program. I was killed gracefully :)\")\n"}, {"idx": "webquery-test-7", "doc": "Counting the number of distinct keys in a dictionary in Python", "code": "len(yourdict.keys())\nlen(yourdict)\nsetlen(set(open(yourdictfile).read().split()))\n"}, {"idx": "webquery-test-8", "doc": "Appending to an empty DataFrame in Pandas?", "code": "&gt;&gt;&gt; df = pd.DataFrame()\n&gt;&gt;&gt; data = pd.DataFrame({\"A\": range(3)})\n&gt;&gt;&gt; df.append(data)\n   A\n0  0\n1  1\n2  2\nappend&gt;&gt;&gt; df\nEmpty DataFrame\nColumns: []\nIndex: []\n&gt;&gt;&gt; df = df.append(data)\n&gt;&gt;&gt; df\n   A\n0  0\n1  1\n2  2\n"}, {"idx": "webquery-test-9", "doc": "How does functools partial do what it does?", "code": "partialdef partial(func, *part_args):\n    def wrapper(*extra_args):\n        args = list(part_args)\n        args.extend(extra_args)\n        return func(*args)\n\n    return wrapper\npartial(sum2, 4)partial(sum2, 4)partial(sum2, 4)partial(sum2, 4)class EventNotifier(object):\n    def __init__(self):\n        self._listeners = []\n\n    def add_listener(self, callback):\n        ''' callback should accept two positional arguments, event and params '''\n        self._listeners.append(callback)\n        # ...\n\n    def notify(self, event, *params):\n        for f in self._listeners:\n            f(event, params)\ncontextdef log_event(context, event, params):\n    context.log_event(\"Something happened %s, %s\", event, params)\nclass Listener(object):\n   def __init__(self, context):\n       self._context = context\n\n   def __call__(self, event, params):\n       self._context.log_event(\"Something happened %s, %s\", event, params)\n\n\n notifier.add_listener(Listener(context))\nlog_listener = lambda event, params: log_event(context, event, params)\nnotifier.add_listener(log_listener)\ncontext = get_context()  # whatever\nnotifier.add_listener(partial(log_event, context))\npartial"}, {"idx": "webquery-test-10", "doc": "Is there a way to detach matplotlib plots so that the computation can continue?", "code": "matplotlibdraw()from matplotlib.pyplot import plot, draw, show\nplot([1,2,3])\ndraw()\nprint('continue computation')\n\n# at the end call show to ensure window won't close.\nshow()\nfrom matplotlib.pyplot import plot, ion, show\nion() # enables interactive mode\nplot([1,2,3]) # result shows immediatelly (implicit draw())\n\nprint('continue computation')\n\n# at the end call show to ensure window won't close.\nshow()\n"}, {"idx": "webquery-test-11", "doc": "what does the __file__ variable mean/do?", "code": "__file__A = os.path.join(os.path.dirname(__file__), '..')\n# A is the parent directory of the directory where program resides.\n\nB = os.path.dirname(os.path.realpath(__file__))\n# B is the canonicalised (?) directory where the program resides.\n\nC = os.path.abspath(os.path.dirname(__file__))\n# C is the absolute path of the directory where the program resides.\nimport os\nprint(__file__)\nprint(os.path.join(os.path.dirname(__file__), '..'))\nprint(os.path.dirname(os.path.realpath(__file__)))\nprint(os.path.abspath(os.path.dirname(__file__)))\n./text.py./text.py"}, {"idx": "webquery-test-12", "doc": "How to sort a list of lists by a specific index of the inner list?", "code": "&gt;&gt;&gt; from operator import itemgetter\n&gt;&gt;&gt; L=[[0, 1, 'f'], [4, 2, 't'], [9, 4, 'afsd']]\n&gt;&gt;&gt; sorted(L, key=itemgetter(2))\n[[9, 4, 'afsd'], [0, 1, 'f'], [4, 2, 't']]\n"}, {"idx": "webquery-test-13", "doc": "Read file from line 2 or skip header row", "code": "with open(fname) as f:\n    next(f)\n    for line in f:\n        #do something\n"}, {"idx": "webquery-test-14", "doc": "Django set default form values", "code": "Form.initialform = JournalForm(initial={'tank': 123})\ntank = forms.IntegerField(widget=forms.HiddenInput(), initial=123) \n"}, {"idx": "webquery-test-15", "doc": "What is pip's equivalent of `npm install package --save-dev`?", "code": "pippip install package &amp;&amp; pip freeze &gt; requirements.txtpipspipspips--save-dev--save-dev--save-devpipenvpipenvbrew install pipenv\npipenvpipenvpipenvpipenv --three install\npipenv shell\nPipfilePipfilepipenv install &lt;package&gt;\npipenv update\nnpmnpmnpm"}, {"idx": "webquery-test-16", "doc": "Convert timedelta to total seconds", "code": "timedelta.total_seconds()&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; datetime.timedelta(seconds=24*60*60).total_seconds()\n86400.0\n"}, {"idx": "webquery-test-17", "doc": "How to fix Python indentation", "code": "reindent.pyreindent.pyreindentreindentreindentreindentpippippippip"}, {"idx": "webquery-test-18", "doc": "What is the correct syntax for 'else if'?", "code": "elifelifdef function(a):\n    if a == '1':\n        print('1a')\n    elif a == '2':\n        print('2a')\n    else:\n        print('3a')\n\nfunction(input('input:'))\n"}, {"idx": "webquery-test-1", "doc": "Possibilities for Python classes organized across files?", "code": "from ssReader import Reader\nfrom theCalcs import ACalc, AnotherCalc\nfrom theDB import Loader\n\ndef main( sourceFileName ):\n    rdr= Reader( sourceFileName )\n    c1= ACalc( options )\n    c2= AnotherCalc( options )\n    ldr= Loader( parameters )\n    for myObj in rdr.readAll():\n        c1.thisOp( myObj )\n        c2.thatOp( myObj )\n        ldr.laod( myObj )\nimport"}, {"idx": "webquery-test-2", "doc": "standard_init_linux.go:178: exec user process caused \"exec format error\"", "code": "#!/bin/bash\n"}, {"idx": "webquery-test-3", "doc": "Timeout for python requests.get entire response", "code": "r = requests.get(w, verify=False, timeout=10) # 10 seconds\nrequests.get()"}, {"idx": "webquery-test-4", "doc": "What is the problem with shadowing names defined in outer scopes?", "code": "datadatadatadatadatafoofoo"}, {"idx": "webquery-test-5", "doc": "Chain-calling parent initialisers in python", "code": "super().__init__(args)\n"}, {"idx": "webquery-test-6", "doc": "Modify tick label text", "code": "1.1.0import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\n# We need to draw the canvas, otherwise the labels won't be positioned and \n# won't have values yet.\nfig.canvas.draw()\n\nlabels = [item.get_text() for item in ax.get_xticklabels()]\nlabels[1] = 'Testing'\n\nax.set_xticklabels(labels)\n\nplt.show()\nFixedLocatorFixedLocatorset_*ticklabelsset_*ticklabelsannotate"}, {"idx": "webquery-test-7", "doc": "How do I convert a Pandas series or index to a NumPy array?", "code": "valuesIn [1]: df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]}, index=['a', 'b', 'c']); df\n   A  B\na  1  4\nb  2  5\nc  3  6\n\nIn [2]: df.index.values\nOut[2]: array(['a', 'b', 'c'], dtype=object)\nIn [3]: df['A'].values\nOut[3]: Out[16]: array([1, 2, 3])\ntolistIn [4]: df.index.tolist()\nOut[4]: ['a', 'b', 'c']\n"}, {"idx": "webquery-test-8", "doc": "Django template how to look up a dictionary value with a variable", "code": "from django.template.defaulttags import register\n...\n@register.filter\ndef get_item(dictionary, key):\n    return dictionary.get(key)\n.get.get.get{{ mydict|get_item:item.NAME }}\n"}, {"idx": "webquery-test-9", "doc": "How to implement the Softmax function in Python", "code": "e ^ (x - max(x)) / sum(e^(x - max(x))\n= e ^ x / (e ^ max(x) * sum(e ^ x / e ^ max(x)))\n\n= e ^ x / sum(e ^ x)\n"}, {"idx": "webquery-test-10", "doc": "How to normalize a NumPy array to a unit vector?", "code": "sklearn.preprocessing.normalizeimport numpy as np\nfrom sklearn.preprocessing import normalize\n\nx = np.random.rand(1000)*10\nnorm1 = x / np.linalg.norm(x)\nnorm2 = normalize(x[:,np.newaxis], axis=0).ravel()\nprint np.all(norm1 == norm2)\n# True\n"}, {"idx": "webquery-test-11", "doc": "TypeError: got multiple values for argument", "code": "def color_box(color, *args, **kwargs):\n    painter.select_color(color)\n    painter.draw_box(*args, **kwargs)\ncolor_box(\"blellow\", color=\"green\", height=20, width=30)\ncolorcolorcolorcolorcolorcolor# misplaced height and width\ncolor_box(20, 30, color=\"green\")\ncolorcolorcolorcolorcolor"}, {"idx": "webquery-test-12", "doc": "Check if item is in an array / list", "code": "if item in my_list:\n    # whatever\n"}, {"idx": "webquery-test-13", "doc": "difference between variables inside and outside of __init__() (class and instance attributes)", "code": "__init____init____init__"}, {"idx": "webquery-test-14", "doc": "How to Customize the time format for Python logging?", "code": "# create formatter\nformatter = logging.Formatter(\"%(asctime)s;%(levelname)s;%(message)s\")\n# create formatter\nformatter = logging.Formatter(\"%(asctime)s;%(levelname)s;%(message)s\",\n                              \"%Y-%m-%d %H:%M:%S\")\n"}, {"idx": "webquery-test-1", "doc": "How to print pandas DataFrame without index", "code": "print df.to_string(index=False)\nprint(df.to_string(index=False))\n"}, {"idx": "webquery-test-2", "doc": "How to update an existing Conda environment with a .yml file", "code": "conda activate myenv\nconda env update --file local.yml --prune\n--prune--pruneconda env update --name myenv --file local.yml --prune\n"}, {"idx": "webquery-test-3", "doc": "tight_layout() doesn't take into account figure suptitle", "code": "tight_layoutfig.tight_layout(rect=[0, 0.03, 1, 0.95])\ntight_layout()"}, {"idx": "webquery-test-4", "doc": "Iterating over every two elements in a list", "code": "pairwise()pairwise()def pairwise(iterable):\n    \"s -&gt; (s0, s1), (s2, s3), (s4, s5), ...\"\n    a = iter(iterable)\n    return zip(a, a)\n\nfor x, y in pairwise(l):\n   print(\"%d + %d = %d\" % (x, y, x + y))\ndef grouped(iterable, n):\n    \"s -&gt; (s0,s1,s2,...sn-1), (sn,sn+1,sn+2,...s2n-1), (s2n,s2n+1,s2n+2,...s3n-1), ...\"\n    return zip(*[iter(iterable)]*n)\n\nfor x, y in grouped(l, 2):\n   print(\"%d + %d = %d\" % (x, y, x + y))\nizipizippairwisepairwisepairwisefrom typing import Iterable, Tuple, TypeVar\n\nT = TypeVar(\"T\")\n\ndef grouped(iterable: Iterable[T], n=2) -&gt; Iterable[Tuple[T, ...]]:\n    \"\"\"s -&gt; (s0,s1,s2,...sn-1), (sn,sn+1,sn+2,...s2n-1), ...\"\"\"\n    return zip(*[iter(iterable)] * n)\n"}, {"idx": "webquery-test-5", "doc": "In Python, how do you convert a `datetime` object to seconds?", "code": "timedeltatimedelta&gt;&gt;&gt; (t-datetime.datetime(1970,1,1)).total_seconds()\n1256083200.0\ndatetimedatetimedatetimetzinfotzinfotzinfotzinfo"}, {"idx": "webquery-test-6", "doc": "Progress indicator during pandas operations", "code": "pandaspandaspandaspandasimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\n# from tqdm.auto import tqdm  # for notebooks\n\n# Create new `pandas` methods which use `tqdm` progress\n# (can use tqdm_gui, optional kwargs, etc.)\ntqdm.pandas()\n\ndf = pd.DataFrame(np.random.randint(0, int(1e8), (10000, 1000)))\n# Now you can use `progress_apply` instead of `apply`\ndf.groupby(0).progress_apply(lambda x: x**2)\nhelp(tqdm)help(tqdm)help(tqdm)help(tqdm)help(tqdm)df_users.groupby(['userID', 'requestDate']).apply(feature_rollup)\nfrom tqdm import tqdm\ntqdm.pandas()\ndf_users.groupby(['userID', 'requestDate']).progress_apply(feature_rollup)\ntqdm.pandas()from tqdm import tqdm, tqdm_pandas\ntqdm_pandas(tqdm())\n"}, {"idx": "webquery-test-7", "doc": "boto3 client NoRegionError: You must specify a region error only sometimes", "code": "kmskmskms = boto3.client('kms', region_name='us-west-2')\n~/.aws/config[default]\nregion=us-west-2\nexport AWS_DEFAULT_REGION=us-west-2\n"}, {"idx": "webquery-test-8", "doc": "How to sort with lambda in Python", "code": "a = sorted(a, key=lambda x: x.modified, reverse=True)\n#             ^^^^\nsortedsorted(iterable, cmp=None, key=None, reverse=False)\nkey=key="}, {"idx": "webquery-test-9", "doc": "Why are some float < integer comparisons four times slower than others?", "code": "vvvvvvvvv&gt;&gt;&gt; import math\n&gt;&gt;&gt; math.frexp(562949953420000.7) # gives the float's (significand, exponent) pair\n(0.9999999999976706, 49)\n&gt;&gt;&gt; (562949953421000).bit_length()\n49\nfloat_richcomparefloat_richcomparefloat_richcomparevvvvvvvvvvvvvstatic PyObject*\nfloat_richcompare(PyObject *v, PyObject *w, int op)\n{\n    double i, j;\n    int r = 0;\n    assert(PyFloat_Check(v));       \n    i = PyFloat_AS_DOUBLE(v);       \n\n    if (PyFloat_Check(w))           \n        j = PyFloat_AS_DOUBLE(w);   \n\n    else if (!Py_IS_FINITE(i)) {\n        if (PyLong_Check(w))\n            j = 0.0;\n        else\n            goto Unimplemented;\n    }\nwwwwww    else if (PyLong_Check(w)) {\n        int vsign = i == 0.0 ? 0 : i &lt; 0.0 ? -1 : 1;\n        int wsign = _PyLong_Sign(w);\n        size_t nbits;\n        int exponent;\n\n        if (vsign != wsign) {\n            /* Magnitudes are irrelevant -- the signs alone\n             * determine the outcome.\n             */\n            i = (double)vsign;\n            j = (double)wsign;\n            goto Compare;\n        }\n    }   \nvvww    nbits = _PyLong_NumBits(w);\n    if (nbits == (size_t)-1 &amp;&amp; PyErr_Occurred()) {\n        /* This long is so large that size_t isn't big enough\n         * to hold the # of bits.  Replace with little doubles\n         * that give the same outcome -- w is so large that\n         * its magnitude must exceed the magnitude of any\n         * finite float.\n         */\n        PyErr_Clear();\n        i = (double)vsign;\n        assert(wsign != 0);\n        j = wsign * 2.0;\n        goto Compare;\n    }\nww    if (nbits &lt;= 48) {\n        j = PyLong_AsDouble(w);\n        /* It's impossible that &lt;= 48 bits overflowed. */\n        assert(j != -1.0 || ! PyErr_Occurred());\n        goto Compare;\n    }\nww    if (nbits &lt;= 48) {\n        /* \"Multiply both sides\" by -1; this also swaps the\n         * comparator.\n         */\n        i = -i;\n        op = _Py_SwappedOp[op];\n    }\n    (void) frexp(i, &amp;exponent);\n    if (exponent &lt; 0 || (size_t)exponent &lt; nbits) {\n        i = 1.0;\n        j = 2.0;\n        goto Compare;\n    }\nwwww    if ((size_t)exponent &gt; nbits) {\n        i = 2.0;\n        j = 1.0;\n        goto Compare;\n    }\nvvvvvvvv    {\n        double fracpart;\n        double intpart;\n        PyObject *result = NULL;\n        PyObject *one = NULL;\n        PyObject *vv = NULL;\n        PyObject *ww = w;\n\n        // snip\n\n        fracpart = modf(i, &amp;intpart); // split i (the double that v mapped to)\n        vv = PyLong_FromDouble(intpart);\n\n        // snip\n\n        if (fracpart != 0.0) {\n            /* Shift left, and or a 1 bit into vv\n             * to represent the lost fraction.\n             */\n            PyObject *temp;\n\n            one = PyLong_FromLong(1);\n\n            temp = PyNumber_Lshift(ww, one); // left-shift doubles an integer\n            ww = temp;\n\n            temp = PyNumber_Lshift(vv, one);\n            vv = temp;\n\n            temp = PyNumber_Or(vv, one); // a doubled integer is even, so this adds 1\n            vv = temp;\n        }\n        // snip\n    }\n}\nvvwwwwwwwvvvvvvvvvvvvvvvvvvvvvvvv"}, {"idx": "webquery-test-10", "doc": "pandas three-way joining multiple dataframes on columns", "code": "reducedfs = [df0, df1, df2, ..., dfN]\nnameimport functools as ft\ndf_final = ft.reduce(lambda left, right: pd.merge(left, right, on='name'), dfs)\n"}, {"idx": "webquery-test-11", "doc": "Storing Python dictionaries", "code": "try:\n    import cPickle as pickle\nexcept ImportError:  # Python 3.x\n    import pickle\n\nwith open('data.p', 'wb') as fp:\n    pickle.dump(data, fp, protocol=pickle.HIGHEST_PROTOCOL)\nprotocolwith open('data.p', 'rb') as fp:\n    data = pickle.load(fp)\nimport json\n\nwith open('data.json', 'w') as fp:\n    json.dump(data, fp)\nsort_keyssort_keyssort_keysjson.dump(data, fp, sort_keys=True, indent=4)\nwith open('data.json', 'r') as fp:\n    data = json.load(fp)\n"}, {"idx": "webquery-test-12", "doc": "Python foreach equivalent", "code": "for f in pets:\n    print f\n"}, {"idx": "webquery-test-13", "doc": "How to import a Python class that is in a directory above?", "code": "from ..subpkg2 import modfromfromfromfromfromfromfrom"}, {"idx": "webquery-test-14", "doc": "Is it not possible to define multiple constructors in Python?", "code": "def __init__(self, city=\"Berlin\"):\n  self.city = city\n"}, {"idx": "webquery-test-15", "doc": "Representing and solving a maze given an image", "code": "function path = solve_maze(img_file)\n  %% Init data\n  img = imread(img_file);\n  img = rgb2gray(img);\n  maze = img &gt; 0;\n  start = [985 398];\n  finish = [26 399];\n\n  %% Init BFS\n  n = numel(maze);\n  Q = zeros(n, 2);\n  M = zeros([size(maze) 2]);\n  front = 0;\n  back = 1;\n\n  function push(p, d)\n    q = p + d;\n    if maze(q(1), q(2)) &amp;&amp; M(q(1), q(2), 1) == 0\n      front = front + 1;\n      Q(front, :) = q;\n      M(q(1), q(2), :) = reshape(p, [1 1 2]);\n    end\n  end\n\n  push(start, [0 0]);\n\n  d = [0 1; 0 -1; 1 0; -1 0];\n\n  %% Run BFS\n  while back &lt;= front\n    p = Q(back, :);\n    back = back + 1;\n    for i = 1:4\n      push(p, d(i, :));\n    end\n  end\n\n  %% Extracting path\n  path = finish;\n  while true\n    q = path(end, :);\n    p = reshape(M(q(1), q(2), :), 1, 2);\n    path(end + 1, :) = p;\n    if isequal(p, start) \n      break;\n    end\n  end\nend\n"}, {"idx": "webquery-test-16", "doc": "pandas groupby, then sort within groups", "code": "In[34]: df.sort_values(['job','count'],ascending=False).groupby('job').head(3)\n\nOut[35]: \n   count     job source\n4      7   sales      E\n2      6   sales      C\n1      4   sales      B\n5      5  market      A\n8      4  market      D\n6      3  market      B\n"}, {"idx": "webquery-test-1", "doc": "How to avoid .pyc files?", "code": "sys.dont_write_bytecodepython -B prog.py.pyc.pycPYTHONDONTWRITEBYTECODE=1"}, {"idx": "webquery-test-2", "doc": "How do I fix 'ImportError: cannot import name IncompleteRead'?", "code": "Ubuntu 14.04# apt-get remove python-pip\n# easy_install pip\n"}, {"idx": "webquery-test-3", "doc": "Seaborn plots not showing up", "code": "plt.show()\nsns.plt.show()import matplotlib.pyplot as plt\nplt.show()\n%matplotlib inline\n"}, {"idx": "webquery-test-4", "doc": "Test if a variable is a list or tuple", "code": "if type(x) is list:\n    print 'a list'\nelif type(x) is tuple:\n    print 'a tuple'\nelse:\n    print 'neither a tuple or a list'\n"}, {"idx": "webquery-test-5", "doc": "Convert python datetime to epoch with strftime", "code": "&gt;&gt;&gt; (datetime.datetime(2012,4,1,0,0) - datetime.datetime(1970,1,1)).total_seconds()\n1333238400.0\ntimestamp()&gt;&gt;&gt; datetime.datetime(2012,4,1,0,0).timestamp()\n1333234800.0\ndatetime.strftime('%s')&gt;&gt;&gt; datetime.datetime(2012,04,01,0,0).strftime('%s')\n'1333234800'\n"}, {"idx": "webquery-test-6", "doc": "Why use Abstract Base Classes in Python?", "code": "isinstanceisinstanceisinstanceisinstanceisinstancecollections.Containerclass Container(metaclass=ABCMeta):\n    __slots__ = ()\n\n    @abstractmethod\n    def __contains__(self, x):\n        return False\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Container:\n            if any(\"__contains__\" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\n__subclasshook____subclasshook__class ContainAllTheThings(object):\n    def __contains__(self, item):\n        return True\n\n&gt;&gt;&gt; issubclass(ContainAllTheThings, collections.Container)\nTrue\n&gt;&gt;&gt; isinstance(ContainAllTheThings(), collections.Container)\nTrue\nisinstance(x, collections.Iterable)isinstance(x, collections.Iterable)isinstance(x, collections.Iterable)isinstanceisinstanceisinstanceisinstanceclass MyABC(metaclass=abc.ABCMeta):\n    def abc_method(self):\n        pass\n    @classmethod\n    def __subclasshook__(cls, C):\n        return True\n\nclass C(object):\n    pass\n\n# typical client code\nc = C()\nif isinstance(c, MyABC):  # will be true\n    c.abc_method()  # raises AttributeError\n__subclasshook____subclasshook__"}, {"idx": "webquery-test-7", "doc": "Django MEDIA_URL and MEDIA_ROOT", "code": "from django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = patterns('',\n    # ... the rest of your URLconf goes here ...\n) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\nif settings.DEBUGfrom django.conf import settings\n\n# ... your normal urlpatterns here\n\nif settings.DEBUG:\n    # static files (images, css, javascript, etc.)\n    urlpatterns += patterns('',\n        (r'^media/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {\n        'document_root': settings.MEDIA_ROOT}))\nDEBUG = TrueDEBUG = True"}, {"idx": "webquery-test-8", "doc": "Using headers with the Python requests library's get method", "code": "requests.get()import requests\nr=requests.get(\"http://www.example.com/\", headers={\"Content-Type\":\"text\"})\n"}, {"idx": "webquery-test-9", "doc": "How does asyncio actually work?", "code": "yieldyield&gt;&gt;&gt; def test():\n...     yield 1\n...     yield 2\n...\n&gt;&gt;&gt; gen = test()\n&gt;&gt;&gt; next(gen)\n1\n&gt;&gt;&gt; next(gen)\n2\n&gt;&gt;&gt; next(gen)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nStopIteration\nnext()next()next()next()next()next()send()send()&gt;&gt;&gt; def test():\n...     val = yield 1\n...     print(val)\n...     yield 2\n...     yield 3\n...\n&gt;&gt;&gt; gen = test()\n&gt;&gt;&gt; next(gen)\n1\n&gt;&gt;&gt; gen.send(\"abc\")\nabc\n2\n&gt;&gt;&gt; gen.throw(Exception())\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 4, in test\nException\ngen.send()gen.send()gen.throw()gen.throw()StopIteration&gt;&gt;&gt; def test():\n...     yield 1\n...     return \"abc\"\n...\n&gt;&gt;&gt; gen = test()\n&gt;&gt;&gt; next(gen)\n1\n&gt;&gt;&gt; try:\n...     next(gen)\n... except StopIteration as exc:\n...     print(exc.value)\n...\nabc\nyield fromyield fromyield fromyield fromyield fromyield from&gt;&gt;&gt; def inner():\n...     inner_result = yield 2\n...     print('inner', inner_result)\n...     return 3\n...\n&gt;&gt;&gt; def outer():\n...     yield 1\n...     val = yield from inner()\n...     print('outer', val)\n...     yield 4\n...\n&gt;&gt;&gt; gen = outer()\n&gt;&gt;&gt; next(gen)\n1\n&gt;&gt;&gt; next(gen) # Goes inside inner() automatically\n2\n&gt;&gt;&gt; gen.send(\"abc\")\ninner abc\nouter 3\n4\nyield fromasync defasync defasync defasync defasync defasync defasync defasync def inner():\n    return 1\n\nasync def outer():\n    await inner()\n__iter__()__iter__()__iter__()__await__()fut.cancel()fut.cancel()fut.cancel()futurefutureawaitawaitadd_done_callback()select.send().send().send().send().send().send().send().send().send()selectselectadd_done_callback()add_done_callback()add_done_callback()recv()select.selectselect.selectselect.selectselect.selectyield fromyield from"}, {"idx": "webquery-test-10", "doc": "Merge two dataframes by index", "code": "mergepd.merge(df1, df2, left_index=True, right_index=True)\njoindf1.join(df2)\nconcatpd.concat([df1, df2], axis=1)\ndf1 = pd.DataFrame({'a':range(6),\n                    'b':[5,3,6,9,2,4]}, index=list('abcdef'))\n\nprint (df1)\n   a  b\na  0  5\nb  1  3\nc  2  6\nd  3  9\ne  4  2\nf  5  4\n\ndf2 = pd.DataFrame({'c':range(4),\n                    'd':[10,20,30, 40]}, index=list('abhi'))\n\nprint (df2)\n   c   d\na  0  10\nb  1  20\nh  2  30\ni  3  40\n# Default inner join\ndf3 = pd.merge(df1, df2, left_index=True, right_index=True)\nprint (df3)\n   a  b  c   d\na  0  5  0  10\nb  1  3  1  20\n\n# Default left join\ndf4 = df1.join(df2)\nprint (df4)\n   a  b    c     d\na  0  5  0.0  10.0\nb  1  3  1.0  20.0\nc  2  6  NaN   NaN\nd  3  9  NaN   NaN\ne  4  2  NaN   NaN\nf  5  4  NaN   NaN\n\n# Default outer join\ndf5 = pd.concat([df1, df2], axis=1)\nprint (df5)\n     a    b    c     d\na  0.0  5.0  0.0  10.0\nb  1.0  3.0  1.0  20.0\nc  2.0  6.0  NaN   NaN\nd  3.0  9.0  NaN   NaN\ne  4.0  2.0  NaN   NaN\nf  5.0  4.0  NaN   NaN\nh  NaN  NaN  2.0  30.0\ni  NaN  NaN  3.0  40.0\n"}, {"idx": "webquery-test-11", "doc": "Is generator.next() visible in Python 3?", "code": "g.next()g.next()g.next()g.next()g.next()g.__next__()g.__next__()func_namefunc_name"}, {"idx": "webquery-test-12", "doc": "How to get the parents of a Python class?", "code": "cls.__bases__\n&gt;&gt;&gt; str.__bases__\n(&lt;type 'basestring'&gt;,)\n&gt;&gt;&gt; class A(object):\n...   pass\n... \n&gt;&gt;&gt; class B(object):\n...   pass\n... \n&gt;&gt;&gt; class C(A, B):\n...   pass\n... \n&gt;&gt;&gt; C.__bases__\n(&lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;)\n"}, {"idx": "webquery-test-13", "doc": "Using OR in SQLAlchemy", "code": "from sqlalchemy import or_\nfilter(or_(User.name == 'ed', User.name == 'wendy'))\n"}, {"idx": "webquery-test-14", "doc": "Why compile Python code?", "code": "python main.py"}, {"idx": "webquery-test-15", "doc": "What do *args and **kwargs mean?", "code": "*args*argsdef my_sum(*args):\n    return sum(args)\nargsargsargsargs"}, {"idx": "webquery-test-1", "doc": "How to determine whether a Pandas Column contains a particular value", "code": "inIn [11]: s = pd.Series(list('abc'))\n\nIn [12]: s\nOut[12]: \n0    a\n1    b\n2    c\ndtype: object\n\nIn [13]: 1 in s\nOut[13]: True\n\nIn [14]: 'a' in s\nOut[14]: False\nIn [21]: s.unique()\nOut[21]: array(['a', 'b', 'c'], dtype=object)\n\nIn [22]: 'a' in s.unique()\nOut[22]: True\nIn [23]: set(s)\nOut[23]: {'a', 'b', 'c'}\n\nIn [24]: 'a' in set(s)\nOut[24]: True\nIn [31]: s.values\nOut[31]: array(['a', 'b', 'c'], dtype=object)\n\nIn [32]: 'a' in s.values\nOut[32]: True\n"}, {"idx": "webquery-test-2", "doc": "Formatting \"yesterday's\" date in python", "code": "datetime.timedelta()&gt;&gt;&gt; from datetime import date, timedelta\n&gt;&gt;&gt; yesterday = date.today() - timedelta(days=1)\n&gt;&gt;&gt; yesterday.strftime('%m%d%y')\n'110909'\n"}, {"idx": "webquery-test-3", "doc": "Dictionaries and default values", "code": "host = connectionDetails.get('host', someDefaultValue)\n"}, {"idx": "webquery-test-4", "doc": "Plot a horizontal line on a given plot", "code": "axhlineaxhlineimport matplotlib.pyplot as plt\nplt.axhline(y=0.5, color='r', linestyle='-')\nplt.show()\n"}, {"idx": "webquery-test-5", "doc": "How to check if one of the following items is in a list?", "code": "&gt;&gt;&gt; L1 = [2,3,4]\n&gt;&gt;&gt; L2 = [1,2]\n&gt;&gt;&gt; [i for i in L1 if i in L2]\n[2]\n\n\n&gt;&gt;&gt; S1 = set(L1)\n&gt;&gt;&gt; S2 = set(L2)\n&gt;&gt;&gt; S1.intersection(S2)\nset([2])\n"}, {"idx": "webquery-test-6", "doc": "How to convert an int to a hex string?", "code": "chr&gt;&gt;&gt; chr(0x65) == '\\x65'\nTrue\n\n\n&gt;&gt;&gt; hex(65)\n'0x41'\n&gt;&gt;&gt; chr(65) == '\\x41'\nTrue\nhex"}, {"idx": "webquery-test-7", "doc": "How to append a new row to an old CSV file in Python?", "code": "with open('document.csv','a') as fd:\n    fd.write(myCsvRow)\n'a'"}, {"idx": "webquery-test-8", "doc": "Pandas: Setting no. of max rows", "code": "display.max_rowspd.set_option('display.max_rows', 500)\ndisplay.heightdisplay.heightpd.set_option('display.height', 500)\npd.set_option('display.max_rows', 500)\npd.describe_option('display')from IPython.display import display\nwith pd.option_context('display.max_rows', 100, 'display.max_columns', 10):\n    display(df) #need display to show the dataframe when using with in jupyter\n    #some pandas stuff\npd.reset_option('display.max_rows')pd.reset_option('all')"}, {"idx": "webquery-test-9", "doc": "How do I calculate percentiles with python/numpy?", "code": "percentile()percentile()import numpy as np\na = np.array([1,2,3,4,5])\np = np.percentile(a, 50) # return 50th percentile, e.g median.\nprint p\n3.0\npercentile()"}, {"idx": "webquery-test-10", "doc": "Pandas create empty DataFrame with only column names", "code": "In [4]: import pandas as pd\nIn [5]: df = pd.DataFrame(columns=['A','B','C','D','E','F','G'])\nIn [6]: df\nOut[6]:\nEmpty DataFrame\nColumns: [A, B, C, D, E, F, G]\nIndex: []\nIn [7]: df = pd.DataFrame(index=range(1,10))\nIn [8]: df\nOut[8]:\nEmpty DataFrame\nColumns: []\nIndex: [1, 2, 3, 4, 5, 6, 7, 8, 9]\ndf = pd.DataFrame(columns=['A','B','C','D','E','F','G'])\ndf.to_html('test.html')\n&lt;table border=\"1\" class=\"dataframe\"&gt;\n  &lt;thead&gt;\n    &lt;tr style=\"text-align: right;\"&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;A&lt;/th&gt;\n      &lt;th&gt;B&lt;/th&gt;\n      &lt;th&gt;C&lt;/th&gt;\n      &lt;th&gt;D&lt;/th&gt;\n      &lt;th&gt;E&lt;/th&gt;\n      &lt;th&gt;F&lt;/th&gt;\n      &lt;th&gt;G&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n"}, {"idx": "webquery-test-11", "doc": "Is False == 0 and True == 1 an implementation detail or is it guaranteed by the language?", "code": "TrueTrueTrueTrueTrueTrueFalseFalseFalse    object\n       |\n     int\n       |\n     bool\n['zero', 'one'][False]['zero', 'one'][False]"}, {"idx": "webquery-test-12", "doc": "HTTP requests and JSON parsing in Python", "code": "import requests\n\nurl = 'http://maps.googleapis.com/maps/api/directions/json'\n\nparams = dict(\n    origin='Chicago,IL',\n    destination='Los+Angeles,CA',\n    waypoints='Joplin,MO|Oklahoma+City,OK',\n    sensor='false'\n)\n\nresp = requests.get(url=url, params=params)\ndata = resp.json() # Check the JSON Response Content documentation below\n"}, {"idx": "webquery-test-13", "doc": "Initializing a list to a known number of elements in Python", "code": "verts = [None]*1000\n"}, {"idx": "webquery-test-14", "doc": "Check if string contains only whitespace", "code": "str.isspace()TrueTruestr.strip()"}, {"idx": "webquery-test-15", "doc": "The tilde operator in Python", "code": "b &lt;- b XOR 1b &lt;- b XOR 1b &lt;- b XOR 1~~~&gt;&gt;&gt; import operator\n&gt;&gt;&gt; class Foo:\n...   def __invert__(self):\n...     print 'invert'\n...\n&gt;&gt;&gt; x = Foo()\n&gt;&gt;&gt; operator.invert(x)\ninvert\n&gt;&gt;&gt; ~x\ninvert\n__invert____invert__"}, {"idx": "webquery-test-16", "doc": "Why is 'x' in ('x',) faster than 'x' == 'x'?", "code": "ismin(Timer(\"x == x\", setup=\"x = 'a' * 1000000\").repeat(10, 10000))\n#&gt;&gt;&gt; 0.00045456900261342525\n\nmin(Timer(\"x == y\", setup=\"x = 'a' * 1000000; y = 'a' * 1000000\").repeat(10, 10000))\n#&gt;&gt;&gt; 0.5256857610074803\nceval.cceval.cTARGET(COMPARE_OP) {\n    PyObject *right = POP();\n    PyObject *left = TOP();\n    PyObject *res = cmp_outcome(oparg, left, right);\n    Py_DECREF(left);\n    Py_DECREF(right);\n    SET_TOP(res);\n    if (res == NULL)\n        goto error;\n    PREDICT(POP_JUMP_IF_FALSE);\n    PREDICT(POP_JUMP_IF_TRUE);\n    DISPATCH();\n}\nPyObject *right = POP();\nPyObject *left = TOP();\nPyObject *res = cmp_outcome(oparg, left, right);\ncmp_outcomestatic PyObject *\ncmp_outcome(int op, PyObject *v, PyObject *w)\n{\n    int res = 0;\n    switch (op) {\n    case PyCmp_IS: ...\n    case PyCmp_IS_NOT: ...\n    case PyCmp_IN:\n        res = PySequence_Contains(w, v);\n        if (res &lt; 0)\n            return NULL;\n        break;\n    case PyCmp_NOT_IN: ...\n    case PyCmp_EXC_MATCH: ...\n    default:\n        return PyObject_RichCompare(v, w, op);\n    }\n    v = res ? Py_True : Py_False;\n    Py_INCREF(v);\n    return v;\n}\nPyCmp_INint\nPySequence_Contains(PyObject *seq, PyObject *ob)\n{\n    Py_ssize_t result;\n    PySequenceMethods *sqm = seq-&gt;ob_type-&gt;tp_as_sequence;\n    if (sqm != NULL &amp;&amp; sqm-&gt;sq_contains != NULL)\n        return (*sqm-&gt;sq_contains)(seq, ob);\n    result = _PySequence_IterSearch(seq, ob, PY_ITERSEARCH_CONTAINS);\n    return Py_SAFE_DOWNCAST(result, Py_ssize_t, int);\n}\nstatic PySequenceMethods tuple_as_sequence = {\n    ...\n    (objobjproc)tuplecontains,                  /* sq_contains */\n};\n\nPyTypeObject PyTuple_Type = {\n    ...\n    &amp;tuple_as_sequence,                         /* tp_as_sequence */\n    ...\n};\nif (sqm != NULL &amp;&amp; sqm-&gt;sq_contains != NULL)\n*sqm-&gt;sq_contains*sqm-&gt;sq_containsstatic int\ntuplecontains(PyTupleObject *a, PyObject *el)\n{\n    Py_ssize_t i;\n    int cmp;\n\n    for (i = 0, cmp = 0 ; cmp == 0 &amp;&amp; i &lt; Py_SIZE(a); ++i)\n        cmp = PyObject_RichCompareBool(el, PyTuple_GET_ITEM(a, i),\n                                           Py_EQ);\n    return cmp;\n}\nPyObject_RichCompareBoolPyObject_RichCompareBoolint\nPyObject_RichCompareBool(PyObject *v, PyObject *w, int op)\n{\n    PyObject *res;\n    int ok;\n\n    /* Quick result when objects are the same.\n       Guarantees that identity implies equality. */\n    if (v == w) {\n        if (op == Py_EQ)\n            return 1;\n        else if (op == Py_NE)\n            return 0;\n    }\n\n    ...\n}\nPyObject_RichCompareBoolPyObject_RichCompareBoolPyObject *\nPyObject_RichCompare(PyObject *v, PyObject *w, int op)\n{\n    PyObject *res;\n\n    assert(Py_LT &lt;= op &amp;&amp; op &lt;= Py_GE);\n    if (v == NULL || w == NULL) { ... }\n    if (Py_EnterRecursiveCall(\" in comparison\"))\n        return NULL;\n    res = do_richcompare(v, w, op);\n    Py_LeaveRecursiveCall();\n    return res;\n}\nPy_EnterRecursiveCallPy_EnterRecursiveCalldo_richcomparestatic PyObject *\ndo_richcompare(PyObject *v, PyObject *w, int op)\n{\n    richcmpfunc f;\n    PyObject *res;\n    int checked_reverse_op = 0;\n\n    if (v-&gt;ob_type != w-&gt;ob_type &amp;&amp; ...) { ... }\n    if ((f = v-&gt;ob_type-&gt;tp_richcompare) != NULL) {\n        res = (*f)(v, w, op);\n        if (res != Py_NotImplemented)\n            return res;\n        ...\n    }\n    ...\n}\nv-&gt;ob_type-&gt;tp_richcomparePyTypeObject PyUnicode_Type = {\n    ...\n    PyUnicode_RichCompare,      /* tp_richcompare */\n    ...\n};\nPyObject *\nPyUnicode_RichCompare(PyObject *left, PyObject *right, int op)\n{\n    int result;\n    PyObject *v;\n\n    if (!PyUnicode_Check(left) || !PyUnicode_Check(right))\n        Py_RETURN_NOTIMPLEMENTED;\n\n    if (PyUnicode_READY(left) == -1 ||\n        PyUnicode_READY(right) == -1)\n        return NULL;\n\n    if (left == right) {\n        switch (op) {\n        case Py_EQ:\n        case Py_LE:\n        case Py_GE:\n            /* a string is equal to itself */\n            v = Py_True;\n            break;\n        case Py_NE:\n        case Py_LT:\n        case Py_GT:\n            v = Py_False;\n            break;\n        default:\n            ...\n        }\n    }\n    else if (...) { ... }\n    else { ...}\n    Py_INCREF(v);\n    return v;\n}\nleft == right    if (!PyUnicode_Check(left) || !PyUnicode_Check(right))\n\n    if (PyUnicode_READY(left) == -1 ||\n        PyUnicode_READY(right) == -1)\nPOP()                           # Stack stuff\nTOP()                           #\n                                #\ncase PyCmp_IN:                  # Dispatch on operation\n                                #\nsqm != NULL                     # Dispatch to builtin op\nsqm-&gt;sq_contains != NULL        #\n*sqm-&gt;sq_contains               #\n                                #\ncmp == 0                        # Do comparison in loop\ni &lt; Py_SIZE(a)                  #\nv == w                          #\nop == Py_EQ                     #\n++i                             # \ncmp == 0                        #\n                                #\nres &lt; 0                         # Convert to Python-space\nres ? Py_True : Py_False        #\nPy_INCREF(v)                    #\n                                #\nPy_DECREF(left)                 # Stack stuff\nPy_DECREF(right)                #\nSET_TOP(res)                    #\nres == NULL                     #\nDISPATCH()                      #\nPOP()                           # Stack stuff\nTOP()                           #\n                                #\ndefault:                        # Dispatch on operation\n                                #\nPy_LT &lt;= op                     # Checking operation\nop &lt;= Py_GE                     #\nv == NULL                       #\nw == NULL                       #\nPy_EnterRecursiveCall(...)      # Recursive check\n                                #\nv-&gt;ob_type != w-&gt;ob_type        # More operation checks\nf = v-&gt;ob_type-&gt;tp_richcompare  # Dispatch to builtin op\nf != NULL                       #\n                                #\n!PyUnicode_Check(left)          # ...More checks\n!PyUnicode_Check(right))        #\nPyUnicode_READY(left) == -1     #\nPyUnicode_READY(right) == -1    #\nleft == right                   # Finally, doing comparison\ncase Py_EQ:                     # Immediately short circuit\nPy_INCREF(v);                   #\n                                #\nres != Py_NotImplemented        #\n                                #\nPy_LeaveRecursiveCall()         # Recursive check\n                                #\nPy_DECREF(left)                 # Stack stuff\nPy_DECREF(right)                #\nSET_TOP(res)                    #\nres == NULL                     #\nDISPATCH()                      #\nPyUnicode_CheckPyUnicode_Checkif (left_pointer == right_pointer)if (left_pointer == right_pointer)"}, {"idx": "webquery-test-17", "doc": "What is the difference between join and merge in Pandas?", "code": "pandas.merge()pandas.DataFrame.merge()pandas.DataFrame.merge()pandas.DataFrame.merge()pandas.DataFrame.merge()pandas.DataFrame.merge()df.join()df.join()df1.join(df2)df1.join(df2)df1.join(df2)df1.join(df2)df1.join(df2)df1.join(df2)df1.join(df2)df1.join(df2)df1.join(df2)df1.join(df2)df1.join(df2)df1.join(df2)df1.join(df2)df1.join(df2)df1.join(df2)df1.join(df2)df1.join(df2)pandas.merge(df1, df2)pandas.merge(df1, df2)pandas.merge(df1, df2)pandas.merge(df1, df2)pandas.merge(df1, df2)mergemergemergemergemergeleft.join(right, on=key_or_keys)\npd.merge(left, right, left_on=key_or_keys, right_index=True, how='left', sort=False)\n"}, {"idx": "webquery-test-18", "doc": "How to prevent Google Colab from disconnecting?", "code": "while True:pass\nfunction ConnectButton(){\n  console.log(\"Connect pushed\"); \n  document.querySelector(\"#top-toolbar &gt; colab-connectbutton\").shadowRoot.querySelector(\"#connect\").click() \n}\nsetInterval(ConnectButton,60000);\n"}, {"idx": "webquery-test-19", "doc": "What is the purpose of class methods?", "code": "MyClassMyClass"}, {"idx": "webquery-test-20", "doc": "Named regular expression group \"(?P<group_name>regexp)\": what does \"P\" stand for?", "code": "(?P&lt;foo&gt;...)(?P&lt;foo&gt;...)"}, {"idx": "webquery-test-1", "doc": "What is the pythonic way to detect the last element in a 'for' loop?", "code": "first = True\nfor data in data_list:\n    if first:\n        first = False\n    else:\n        between_items()\n\n    item()\nlen()file = open('/path/to/file')\nfor line in file:\n    process_line(line)\n\n    # No way of telling if this is the last line!\nstr.join()str.join()for i, line in enumerate(data_list):\n    if i &gt; 0:\n        between_items()\n    item()\nlen()def lookahead(iterable):\n    \"\"\"Pass through all values from the given iterable, augmented by the\n    information if there are more values to come after the current one\n    (True), or if it is the last value (False).\n    \"\"\"\n    # Get an iterator and pull the first value.\n    it = iter(iterable)\n    last = next(it)\n    # Run the iterator to exhaustion (starting from the second value).\n    for val in it:\n        # Report the *previous* value (more to come).\n        yield last, True\n        last = val\n    # Report the last value.\n    yield last, False\n&gt;&gt;&gt; for i, has_more in lookahead(range(3)):\n...     print(i, has_more)\n0 True\n1 True\n2 False\n"}, {"idx": "webquery-test-2", "doc": "How to uninstall a package installed with pip install --user", "code": "pip install --user somepackagepip install --user somepackagepip install --user somepackagepip install --user somepackagepip install --user somepackagepip install --user somepackagepip install --user somepackagepip install --user somepackagepip install --user somepackagepip install --user somepackagepip install --user somepackagepip install --user somepackage"}, {"idx": "webquery-test-3", "doc": "builtins.TypeError: must be str, not bytes", "code": "outFile = open('output.xml', 'wb')\n"}, {"idx": "webquery-test-4", "doc": "Take the content of a list and append it to another list", "code": "list2.extend(list1)\nlist2.append(list1)\n&gt;&gt;&gt; a = [1, 2, 3]\n&gt;&gt;&gt; b = [4, 5, 6]\n&gt;&gt;&gt; c = [7, 8, 9]\n&gt;&gt;&gt; b.append(a)\n&gt;&gt;&gt; b\n[4, 5, 6, [1, 2, 3]]\n&gt;&gt;&gt; c.extend(a)\n&gt;&gt;&gt; c\n[7, 8, 9, 1, 2, 3]\nlist.extend()for line in mylog:\n    list1.append(line)\nlist1.extend(mylog)\n"}, {"idx": "webquery-test-5", "doc": "How are Pipfile and Pipfile.lock used?", "code": "Pipenv$ pipenv install\nrequirements.txtrequirements.txtrequirements.txt$ pipenv uninstall &lt;package&gt;\n$ pipenv shell\n$ exit\n$ pipenv install flask\n$ pipenv install --dev pytest\n[[source]] # Here goes your package sources (where you are downloading your packages from).\nurl = \"https://pypi.python.org/simple\"\nverify_ssl = true\nname = \"pypi\"\n\n[packages] # Here goes your package requirements for running the application and its versions (which packages you will use when running the application).\nrequests = \"*\"\nflask = \"*\"\npandas = \"*\"\n\n[dev-packages] # Here goes your package requirements for developing the application and its versions (which packages you will use when developing the application)\npylint = \"*\"\nwheel = \"*\"\n\n[requires] # Here goes your required Python version.\npython_version = \"3.6\"\n$ pipenv lock\n"}, {"idx": "webquery-test-6", "doc": "pandas DataFrame: replace nan values with average of columns", "code": "DataFrame.fillnaDataFrame.fillnaIn [27]: df \nOut[27]: \n          A         B         C\n0 -0.166919  0.979728 -0.632955\n1 -0.297953 -0.912674 -1.365463\n2 -0.120211 -0.540679 -0.680481\n3       NaN -2.027325  1.533582\n4       NaN       NaN  0.461821\n5 -0.788073       NaN       NaN\n6 -0.916080 -0.612343       NaN\n7 -0.887858  1.033826       NaN\n8  1.948430  1.025011 -2.982224\n9  0.019698 -0.795876 -0.046431\n\nIn [28]: df.mean()\nOut[28]: \nA   -0.151121\nB   -0.231291\nC   -0.530307\ndtype: float64\n\nIn [29]: df.fillna(df.mean())\nOut[29]: \n          A         B         C\n0 -0.166919  0.979728 -0.632955\n1 -0.297953 -0.912674 -1.365463\n2 -0.120211 -0.540679 -0.680481\n3 -0.151121 -2.027325  1.533582\n4 -0.151121 -0.231291  0.461821\n5 -0.788073 -0.231291 -0.530307\n6 -0.916080 -0.612343 -0.530307\n7 -0.887858  1.033826 -0.530307\n8  1.948430  1.025011 -2.982224\n9  0.019698 -0.795876 -0.046431\nfillnafillnafillnafillna"}, {"idx": "webquery-test-7", "doc": "How do you decode Base64 data in Python?", "code": "import base64\ncoded_string = '''Q5YACgA...'''\nbase64.b64decode(coded_string)\n&gt;&gt;&gt; base64.b64decode(coded_string)\n2: 'C\\x96\\x00\\n\\x00\\x00\\x00\\x00C\\x96\\x00\\x1b\\x00\\x00\\x00\\x00C\\x96\\x00-\\x00\\x00\\x00\\x00C\\x96\\x00?\\x00\\x00\\x00\\x00C\\x96\\x07M\\x00\\x00\\x00\\x00C\\x96\\x07_\\x00\\x00\\x00\\x00C\\x96\\x07p\\x00\\x00\\x00\\x00C\\x96\\x07\\x82\\x00\\x00\\x00\\x00C\\x96\\x07\\x94\\x00\\x00\\x00\\x00C\\x96\\x07\\xa6Cq\\xf0\\x7fC\\x96\\x07\\xb8DJ\\x81\\xc7C\\x96\\x07\\xcaD\\xa5\\x9dtC\\x96\\x07\\xdcD\\xb6\\x97\\x11C\\x96\\x07\\xeeD\\x8b\\x8flC\\x96\\x07\\xffD\\x03\\xd4\\xaaC\\x96\\x08\\x11B\\x05&amp;\\xdcC\\x96\\x08#\\x00\\x00\\x00\\x00C\\x96\\x085C\\x0c\\xc9\\xb7C\\x96\\x08GCy\\xc0\\xebC\\x96\\x08YC\\x81\\xa4xC\\x96\\x08kC\\x0f@\\x9bC\\x96\\x08}\\x00\\x00\\x00\\x00C\\x96\\x08\\x8e\\x00\\x00\\x00\\x00C\\x96\\x08\\xa0\\x00\\x00\\x00\\x00C\\x96\\x08\\xb2\\x00\\x00\\x00\\x00C\\x96\\x86\\xf9\\x00\\x00\\x00\\x00C\\x96\\x87\\x0b\\x00\\x00\\x00\\x00C\\x96\\x87\\x1d\\x00\\x00\\x00\\x00C\\x96\\x87/\\x00\\x00\\x00\\x00C\\x96\\x87AA\\x0b\\xe7PC\\x96\\x87SCI\\xf5gC\\x96\\x87eC\\xd4J\\xeaC\\x96\\x87wD\\r\\x17EC\\x96\\x87\\x89D\\x00F6C\\x96\\x87\\x9bC\\x9cg\\xdeC\\x96\\x87\\xadB\\xd56\\x0cC\\x96\\x87\\xbf\\x00\\x00\\x00\\x00C\\x96\\x87\\xd1\\x00\\x00\\x00\\x00C\\x96\\x87\\xe3\\x00\\x00\\x00\\x00C\\x96\\x87\\xf5\\x00\\x00\\x00\\x00C\\x9cY}\\x00\\x00\\x00\\x00C\\x9cY\\x90\\x00\\x00\\x00\\x00C\\x9cY\\xa4\\x00\\x00\\x00\\x00C\\x9cY\\xb7\\x00\\x00\\x00\\x00C\\x9cY\\xcbC\\x1f\\xbd\\xa3C\\x9cY\\xdeCCz{C\\x9cY\\xf1CD\\x02\\xa7C\\x9cZ\\x05C+\\x9d\\x97C\\x9cZ\\x18C\\x03R\\xe3C\\x9cZ,\\x00\\x00\\x00\\x00C\\x9cZ?\n[stuff omitted as it exceeded SO's body length limits]\n\\xbb\\x00\\x00\\x00\\x00D\\xc5!7\\x00\\x00\\x00\\x00D\\xc5!\\xb2\\x00\\x00\\x00\\x00D\\xc7\\x14x\\x00\\x00\\x00\\x00D\\xc7\\x14\\xf6\\x00\\x00\\x00\\x00D\\xc7\\x15t\\x00\\x00\\x00\\x00D\\xc7\\x15\\xf2\\x00\\x00\\x00\\x00D\\xc7\\x16pC5\\x9f\\xf9D\\xc7\\x16\\xeeC[\\xb5\\xf5D\\xc7\\x17lCG\\x1b;D\\xc7\\x17\\xeaB\\xe3\\x0b\\xa6D\\xc7\\x18h\\x00\\x00\\x00\\x00D\\xc7\\x18\\xe6\\x00\\x00\\x00\\x00D\\xc7\\x19d\\x00\\x00\\x00\\x00D\\xc7\\x19\\xe2\\x00\\x00\\x00\\x00D\\xc7\\xfe\\xb4\\x00\\x00\\x00\\x00D\\xc7\\xff3\\x00\\x00\\x00\\x00D\\xc7\\xff\\xb2\\x00\\x00\\x00\\x00D\\xc8\\x001\\x00\\x00\\x00\\x00'\n"}, {"idx": "webquery-test-8", "doc": "Python None comparison: should I use \"is\" or ==?", "code": "isisisisisismy_var == Nonemy_var == Noneclass Negator(object):\n    def __eq__(self,other):\n        return not other\n\nthing = Negator()\nprint thing == None    #True\nprint thing is None    #False\nisisis====lst = [1,2,3]\nlst == lst[:]  # This is True since the lists are \"equivalent\"\nlst is lst[:]  # This is False since they're actually different objects\n"}, {"idx": "webquery-test-9", "doc": "How to create new folder?", "code": "newpath = r'C:\\Program Files\\arbitrary' \nif not os.path.exists(newpath):\n    os.makedirs(newpath)\n"}, {"idx": "webquery-test-10", "doc": "How to get rid of \"Unnamed: 0\" column in a pandas DataFrame read in from CSV file?", "code": "pd.to_csv(..., index=False)pd.to_csv(..., index=False)In [37]:\ndf = pd.DataFrame(np.random.randn(5,3), columns=list('abc'))\npd.read_csv(io.StringIO(df.to_csv()))\n\nOut[37]:\n   Unnamed: 0         a         b         c\n0           0  0.109066 -1.112704 -0.545209\n1           1  0.447114  1.525341  0.317252\n2           2  0.507495  0.137863  0.886283\n3           3  1.452867  1.888363  1.168101\n4           4  0.901371 -0.704805  0.088335\nIn [38]:\npd.read_csv(io.StringIO(df.to_csv(index=False)))\n\nOut[38]:\n          a         b         c\n0  0.109066 -1.112704 -0.545209\n1  0.447114  1.525341  0.317252\n2  0.507495  0.137863  0.886283\n3  1.452867  1.888363  1.168101\n4  0.901371 -0.704805  0.088335\nread_csvread_csvIn [40]:\npd.read_csv(io.StringIO(df.to_csv()), index_col=0)\n\nOut[40]:\n          a         b         c\n0  0.109066 -1.112704 -0.545209\n1  0.447114  1.525341  0.317252\n2  0.507495  0.137863  0.886283\n3  1.452867  1.888363  1.168101\n4  0.901371 -0.704805  0.088335\n"}, {"idx": "webquery-test-11", "doc": "PyLint message: logging-format-interpolation", "code": "logger.error('oops caused by %s' % exc)\nlogger.error('oops caused by %s', exc)\n.format()logging"}, {"idx": "webquery-test-12", "doc": "How to send email to multiple recipients using python smtplib?", "code": "import smtplib\nfrom email.mime.text import MIMEText\n\ns = smtplib.SMTP('smtp.uk.xensource.com')\ns.set_debuglevel(1)\nmsg = MIMEText(\"\"\"body\"\"\")\nsender = 'me@example.com'\nrecipients = ['john.doe@example.com', 'john.smith@example.co.uk']\nmsg['Subject'] = \"subject line\"\nmsg['From'] = sender\nmsg['To'] = \", \".join(recipients)\ns.sendmail(sender, recipients, msg.as_string())\n"}, {"idx": "webquery-test-13", "doc": "numpy matrix vector multiplication", "code": "numpy.dotnumpy.dot&gt;&gt;&gt; a = np.array([[ 5, 1 ,3], \n                  [ 1, 1 ,1], \n                  [ 1, 2 ,1]])\n&gt;&gt;&gt; b = np.array([1, 2, 3])\n&gt;&gt;&gt; print a.dot(b)\narray([16, 6, 8])\n*, +, -, /numpy.matrixnumpy.matrixnumpy.matrix@@@@@@@@@@@@@@numpy.tensordotnumpy.tensordotnumpy.tensordotnumpy.tensordotnumpy.tensordotnumpy.tensordot"}, {"idx": "webquery-test-14", "doc": "Relationship between SciPy and NumPy", "code": "__init__from numpy import *\nlog10log10log10log10log10log10# Import numpy symbols to scipy name space\nimport numpy as _num\nfrom numpy import oldnumeric\nfrom numpy import *\nfrom numpy.random import rand, randn\nfrom numpy.fft import fft, ifft\nfrom numpy.lib.scimath import *\nlog10log10\"\"\"\nWrapper functions to more user-friendly calling of certain math functions\nwhose output data-type is different than the input data-type in certain\ndomains of the input.\n\nFor example, for functions like log() with branch cuts, the versions in this\nmodule provide the mathematically valid answers in the complex plane:\n\n&gt;&gt;&gt; import math\n&gt;&gt;&gt; from numpy.lib import scimath\n&gt;&gt;&gt; scimath.log(-math.exp(1)) == (1+1j*math.pi)\nTrue\n\nSimilarly, sqrt(), other base logarithms, power() and trig functions are\ncorrectly handled.  See their respective docstrings for specific examples.\n\"\"\"\nsqrtsqrtsqrtsqrtsqrtsqrtsqrtsqrtsqrt"}, {"idx": "webquery-test-15", "doc": "How to smooth a curve in the right way?", "code": "savitzky_golay()import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(0,2*np.pi,100)\ny = np.sin(x) + np.random.random(100) * 0.2\nyhat = savitzky_golay(y, 51, 3) # window size 51, polynomial order 3\n\nplt.plot(x,y)\nplt.plot(x,yhat, color='red')\nplt.show()\nfrom scipy.signal import savgol_filter\nyhat = savgol_filter(y, 51, 3) # window size 51, polynomial order 3\n"}, {"idx": "webquery-test-16", "doc": "Fastest way to get the first object from a queryset in django?", "code": "first()first()first()"}, {"idx": "webquery-test-17", "doc": "Convert tuple to list and back", "code": "&gt;&gt;&gt; t = ('my', 'name', 'is', 'mr', 'tuple')\n&gt;&gt;&gt; t\n('my', 'name', 'is', 'mr', 'tuple')\n&gt;&gt;&gt; list(t)\n['my', 'name', 'is', 'mr', 'tuple']\n&gt;&gt;&gt; l = ['my', 'name', 'is', 'mr', 'list']\n&gt;&gt;&gt; l\n['my', 'name', 'is', 'mr', 'list']\n&gt;&gt;&gt; tuple(l)\n('my', 'name', 'is', 'mr', 'list')\n"}, {"idx": "webquery-test-18", "doc": "Convert string to Enum in Python", "code": "Enum&gt;&gt;&gt; from enum import Enum\n&gt;&gt;&gt; class Build(Enum):\n...   debug = 200\n...   build = 400\n... \n&gt;&gt;&gt; Build['debug']\n&lt;Build.debug: 200&gt;\nan_enum = input('Which type of build?')\nbuild_type = Build[an_enum.lower()]\n"}, {"idx": "webquery-test-1", "doc": "Select rows in pandas MultiIndex DataFrame", "code": "DataFrame.locDataFrame.locDataFrame.locDataFrame.locDataFrame.locDataFrame.loc         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n         col\none two     \na   t      0\n    u      1\n    v      2\n    w      3\n"}, {"idx": "webquery-test-2", "doc": "Unable to set default python version to python3 in ubuntu", "code": "[sudo] update-alternatives --install /usr/bin/python python /usr/bin/python3 10\npython3.bashrc.bashrc"}, {"idx": "webquery-test-3", "doc": "Moving average or running mean", "code": "uniform_filter1duniform_filter1dnp.convolvenp.convolve(x, np.ones(N)/N, mode='valid')\n(x_1 + x_2 + ... + x_N) / N(x_1 + x_2 + ... + x_N) / N(x_1 + x_2 + ... + x_N) / Nmodemodemodeimport numpy as np\nimport matplotlib.pyplot as plt\nmodes = ['full', 'same', 'valid']\nfor m in modes:\n    plt.plot(np.convolve(np.ones(200), np.ones(50)/50, mode=m));\nplt.axis([-10, 251, -.1, 1.1]);\nplt.legend(modes, loc='lower center');\nplt.show()\n"}, {"idx": "webquery-test-4", "doc": "Is there a math nCr function in python?", "code": "nCrimport operator as op\nfrom functools import reduce\n\ndef ncr(n, r):\n    r = min(r, n-r)\n    numer = reduce(op.mul, range(n, n-r, -1), 1)\n    denom = reduce(op.mul, range(1, r+1), 1)\n    return numer // denom  # or / in Python 2\nmath.comb&gt;&gt;&gt; from math import comb\n&gt;&gt;&gt; comb(10,3)\n120\n"}, {"idx": "webquery-test-5", "doc": "Is it possible to ignore one single specific line with Pylint?", "code": "# pylint: disable=some-message,another-onedef test():\n    # Disable all the no-member violations in this function\n    # pylint: disable=no-member\n    ...\n    # pylint: enable=no-member\nglobal VAR  # pylint: disable=global-statement\n# pylint: disable-next=global-statement\nglobal VAR\n"}, {"idx": "webquery-test-6", "doc": "ValueError: setting an array element with a sequence", "code": "numpy.array([[1, 2], [2, 3, 4]])         # wrong!\nnumpy.array([[1, 2], [2, [3, 4]]])       # wrong!\nnumpy.arrayfloatnumpy.array([1.2, \"abc\"], dtype=float)   # wrong!\nobjectnumpy.array([1.2, \"abc\"], dtype=object)\n"}, {"idx": "webquery-test-7", "doc": "In requirements.txt, what does tilde equals (~=) mean?", "code": "&gt;= V.N, == V.*"}, {"idx": "webquery-test-8", "doc": "Checking if a string can be converted to float in Python", "code": "try:\n    float(element)\nexcept ValueError:\n    print \"Not a float\"\nimport re\nif re.match(r'^-?\\d+(?:\\.\\d+)$', element) is None:\n    print \"Not float\"\n"}, {"idx": "webquery-test-9", "doc": "TypeError: sequence item 0: expected string, int found", "code": "string.joinvalues = ','.join(str(v) for v in value_list)\n"}, {"idx": "webquery-test-10", "doc": "Read only the first line of a file?", "code": ".readline()with open('myfile.txt') as f:\n    first_line = f.readline()\nf.readline()f.readline()f.readline()f.readline()f.readline()"}, {"idx": "webquery-test-11", "doc": "Converting JSON String to Dictionary Not List", "code": "json1_data = json.loads(json1_str)[0]\ndatapoints = json1_data['datapoints']\ndatapoints[0:5][0]datapoints[0:5][0]datapoints[0:5][0][p[0] for p in datapoints[0:5]]\nsum(p[0] for p in datapoints[0:5])/5. # Result is 35.8\nimport numpy\njson1_file = open('json1')\njson1_str = json1_file.read()\njson1_data = json.loads(json1_str)[0]\ndatapoints = numpy.array(json1_data['datapoints'])\navg = datapoints[0:5,0].mean()\n# avg is now 35.8\n,"}, {"idx": "webquery-test-12", "doc": "How do I mock an open used in a with statement (using the Mock framework in Python)?", "code": "builtins.openbuiltins.openbuiltins.openbuiltins.openfrom unittest.mock import patch, mock_open\nwith patch(\"builtins.open\", mock_open(read_data=\"data\")) as mock_file:\n    assert open(\"path/to/open\").read() == \"data\"\nmock_file.assert_called_with(\"path/to/open\")\npatchpatchpatchpatchpatchpatchpatchpatchpatchpatch()patch()@patch(\"builtins.open\", new_callable=mock_open, read_data=\"data\")\ndef test_patch(mock_file):\n    assert open(\"path/to/open\").read() == \"data\"\n    mock_file.assert_called_with(\"path/to/open\")\npatch__builtin__.open__builtin__.open__builtin__.open__builtin__.open__builtin__.openfrom mock import patch, mock_open\nwith patch(\"__builtin__.open\", mock_open(read_data=\"data\")) as mock_file:\n    assert open(\"path/to/open\").read() == \"data\"\nmock_file.assert_called_with(\"path/to/open\")\n"}, {"idx": "webquery-test-13", "doc": "What is the use of join() in Python threading?", "code": "join()joinwithout join:\n+---+---+------------------                     main-thread\n    |   |\n    |   +...........                            child-thread(short)\n    +..................................         child-thread(long)\n\nwith join\n+---+---+------------------***********+###      main-thread\n    |   |                             |\n    |   +...........join()            |         child-thread(short)\n    +......................join()......         child-thread(long)\n\nwith join and daemon thread\n+-+--+---+------------------***********+###     parent-thread\n  |  |   |                             |\n  |  |   +...........join()            |        child-thread(short)\n  |  +......................join()......        child-thread(long)\n  +,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,     child-thread(long + daemonized)\n\n'-' main-thread/parent-thread/main-program execution\n'.' child-thread execution\n'#' optional parent-thread execution after join()-blocked parent-thread could \n    continue\n'*' main-thread 'sleeping' in join-method, waiting for child-thread to finish\n',' daemonized thread - 'ignores' lifetime of other threads;\n    terminates when main-programs exits; is normally meant for \n    join-independent tasks\njoinjoinjoin()"}, {"idx": "webquery-test-14", "doc": "Moving matplotlib legend outside of the axis makes it cutoff by the figure box", "code": "fig.savefig('samplefigure', bbox_extra_artists=(lgd,), bbox_inches='tight')\n#Note that the bbox_extra_artists must be an iterable\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.gcf().clear()\nx = np.arange(-2*np.pi, 2*np.pi, 0.1)\nfig = plt.figure(1)\nax = fig.add_subplot(111)\nax.plot(x, np.sin(x), label='Sine')\nax.plot(x, np.cos(x), label='Cosine')\nax.plot(x, np.arctan(x), label='Inverse tan')\nhandles, labels = ax.get_legend_handles_labels()\nlgd = ax.legend(handles, labels, loc='upper center', bbox_to_anchor=(0.5,-0.1))\ntext = ax.text(-0.2,1.05, \"Aribitrary text\", transform=ax.transAxes)\nax.set_title(\"Trigonometry\")\nax.grid('on')\nfig.savefig('samplefigure', bbox_extra_artists=(lgd,text), bbox_inches='tight')\n"}, {"idx": "webquery-test-15", "doc": "Syntax error on print with Python 3", "code": "printprint(\"Hello World\")\n"}, {"idx": "webquery-test-1", "doc": "Converting Dictionary to List?", "code": "dict.items()\n"}, {"idx": "webquery-test-2", "doc": "Python pandas Filtering out nan from a data selection of a column of strings", "code": "filtered_df = df[df['name'].notnull()]\nfiltered_df = df[df[['name', 'country', 'region']].notnull().all(1)]\n"}, {"idx": "webquery-test-3", "doc": "Programmatically stop execution of python script?", "code": "import sys\nsys.exit(\"Error message\")\n"}, {"idx": "webquery-test-4", "doc": "How do I create a numpy array of all True or all False?", "code": "numpy.full((2, 2), True)\nnumpy.ones((2, 2))numpy.ones((2, 2))TrueTrueTrueTrueTruenumpy.ones((2, 2), dtype=bool)\narray([[ True,  True],\n       [ True,  True]], dtype=bool)\nfullnumpy.full((2, 2), True, dtype=bool)\nfullfullnumpy.full((2, 2), True)\n"}, {"idx": "webquery-test-5", "doc": "Pandas DataFrame Groupby two columns and get counts", "code": "sizeIn [11]: df.groupby(['col5', 'col2']).size()\nOut[11]:\ncol5  col2\n1     A       1\n      D       3\n2     B       2\n3     A       3\n      C       1\n4     B       1\n5     B       2\n6     B       1\ndtype: int64\nIn [12]: df.groupby(['col5', 'col2']).size().groupby(level=1).max()\nOut[12]:\ncol2\nA       3\nB       2\nC       1\nD       3\ndtype: int64\n"}, {"idx": "webquery-test-6", "doc": "How to install packages offline?", "code": "downloadpip download -r requirements.txtpip install --download -r requirements.txtpip install --no-index --find-links /path/to/download/dir/ -r requirements.txt"}, {"idx": "webquery-test-7", "doc": "Converting int to bytes in Python 3", "code": "to_bytes&gt;&gt;&gt; (1024).to_bytes(2, byteorder='big')\nb'\\x04\\x00'\ndef int_to_bytes(x: int) -&gt; bytes:\n    return x.to_bytes((x.bit_length() + 7) // 8, 'big')\n    \ndef int_from_bytes(xbytes: bytes) -&gt; int:\n    return int.from_bytes(xbytes, 'big')\nx == int_from_bytes(int_to_bytes(x))def int_to_bytes(number: int) -&gt; bytes:\n    return number.to_bytes(length=(8 + (number + (number &lt; 0)).bit_length()) // 8, byteorder='big', signed=True)\n\ndef int_from_bytes(binary_data: bytes) -&gt; Optional[int]:\n    return int.from_bytes(binary_data, byteorder='big', signed=True)\n"}, {"idx": "webquery-test-8", "doc": "Calculating a directory's size using Python?", "code": "import os\n\ndef get_size(start_path = '.'):\n    total_size = 0\n    for dirpath, dirnames, filenames in os.walk(start_path):\n        for f in filenames:\n            fp = os.path.join(dirpath, f)\n            # skip if it is symbolic link\n            if not os.path.islink(fp):\n                total_size += os.path.getsize(fp)\n\n    return total_size\n\nprint(get_size(), 'bytes')\nimport os\nsum(os.path.getsize(f) for f in os.listdir('.') if os.path.isfile(f))\nimport os\n\nnbytes = sum(d.stat().st_size for d in os.scandir('.') if d.is_file())\nwalkwalkwalkpathlibpathlibfrom pathlib import Path\n\nroot_directory = Path('.')\nsum(f.stat().st_size for f in root_directory.glob('**/*') if f.is_file())\n\n"}, {"idx": "webquery-test-9", "doc": "Appending the same string to a list of strings in Python", "code": "[s + mystring for s in mylist]\nlist(s + mystring for s in mylist)\n"}, {"idx": "webquery-test-10", "doc": "Is it possible to use 'else' in a list comprehension?", "code": "a if b else ca if b else ca if b else ca if b else c&gt;&gt;&gt; [a if a else 2 for a in [0,1,0,3]]\n[2, 1, 2, 3]\ntable = ''.join(chr(index) if index in ords_to_keep else replace_with\n                for index in xrange(15))\n"}, {"idx": "webquery-test-11", "doc": "You need to install postgresql-server-dev-X.Y for building a server-side extension or libpq-dev for building a client-side application", "code": "sudo apt-get install postgresql\nsudo apt-get install python-psycopg2\nsudo apt-get install libpq-dev\n"}, {"idx": "webquery-test-12", "doc": "How often does python flush to a file?", "code": "bufsize = 0\nf = open('file.txt', 'w', buffering=bufsize)\n"}, {"idx": "webquery-test-13", "doc": "Passing functions with arguments to another function in Python?", "code": "def perform(fun, *args):\n    fun(*args)\n\ndef action1(args):\n    # something\n\ndef action2(args):\n    # something\n\nperform(action1)\nperform(action2, p)\nperform(action3, p, r)\n"}, {"idx": "webquery-test-14", "doc": "How to create a temporary directory and get its path/ file name?", "code": "mkdtemp()mkdtemp()import tempfile\nimport shutil\n\ndirpath = tempfile.mkdtemp()\n# ... do stuff with dirpath\nshutil.rmtree(dirpath)\n"}, {"idx": "webquery-test-15", "doc": "Making a request to a RESTful API using Python", "code": "import requests\nurl = 'http://ES_search_demo.com/document/record/_search?pretty=true'\ndata = '''{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"text\": {\n            \"record.document\": \"SOME_JOURNAL\"\n          }\n        },\n        {\n          \"text\": {\n            \"record.articleTitle\": \"farmers\"\n          }\n        }\n      ],\n      \"must_not\": [],\n      \"should\": []\n    }\n  },\n  \"from\": 0,\n  \"size\": 50,\n  \"sort\": [],\n  \"facets\": {}\n}'''\nresponse = requests.post(url, data=data)\nresponse.textresponse.textresponse.text"}, {"idx": "webquery-test-16", "doc": "How to redirect 'print' output to a file?", "code": "with open('out.txt', 'w') as f:\n    print('Filename:', filename, file=f)  #\u00a0Python 3.x\n    print &gt;&gt; f, 'Filename:', filename     # Python 2.x\nimport sys\n\norig_stdout = sys.stdout\nf = open('out.txt', 'w')\nsys.stdout = f\n\nfor i in range(2):\n    print('i = ', i)\n\nsys.stdout = orig_stdout\nf.close()\nfrom contextlib import redirect_stdout\n\nwith open('out.txt', 'w') as f:\n    with redirect_stdout(f):\n        print('data')\n./script.py &gt; out.txt\n"}, {"idx": "webquery-test-1", "doc": "multiprocessing vs multithreading vs asyncio in Python 3", "code": "if io_bound:\n    if io_very_slow:\n        print(\"Use Asyncio\")\n    else:\n        print(\"Use Threads\")\nelse:\n    print(\"Multi Processing\")\nasyncioasyncio"}, {"idx": "webquery-test-2", "doc": "Python argparse: default value or specified value", "code": "import argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('--example', nargs='?', const=1, type=int)\nargs = parser.parse_args()\nprint(args)\n% test.py \nNamespace(example=None)\n% test.py --example\nNamespace(example=1)\n% test.py --example 2\nNamespace(example=2)\nnargs='?'nargs='?'nargs='?'test.pytest.pytest.pytest.pyparser.add_argument('--example', nargs='?', const=1, type=int, default=1)\n% test.py \nNamespace(example=1)\n"}, {"idx": "webquery-test-3", "doc": "UnboundLocalError on local variable when reassigned after first use", "code": "cccglobal c\nnonlocal c\nc"}, {"idx": "webquery-test-4", "doc": "Pandas percentage of total with groupby", "code": "transformdf['sales'] / df.groupby('state')['sales'].transform('sum')\ngroupbygroupbygroupbygroupby# From Paul H\nimport numpy as np\nimport pandas as pd\nnp.random.seed(0)\ndf = pd.DataFrame({'state': ['CA', 'WA', 'CO', 'AZ'] * 3,\n                   'office_id': list(range(1, 7)) * 2,\n                   'sales': [np.random.randint(100000, 999999)\n                             for _ in range(12)]})\nstate_office = df.groupby(['state', 'office_id']).agg({'sales': 'sum'})\n# Change: groupby state_office and divide by sum\nstate_pcts = state_office.groupby(level=0).apply(lambda x:\n                                                 100 * x / float(x.sum()))\n                     sales\nstate office_id           \nAZ    2          16.981365\n      4          19.250033\n      6          63.768601\nCA    1          19.331879\n      3          33.858747\n      5          46.809373\nCO    1          36.851857\n      3          19.874290\n      5          43.273852\nWA    2          34.707233\n      4          35.511259\n      6          29.781508\n"}, {"idx": "webquery-test-5", "doc": "What is the difference between shallow copy, deepcopy and normal assignment operation?", "code": "import copy\n\na = [1, 2, 3]\nb = [4, 5, 6]\nc = [a, b]\nd = c\n\nprint id(c) == id(d)          # True - d is the same object as c\nprint id(c[0]) == id(d[0])    # True - d[0] is the same object as c[0]\nd = copy.copy(c)\n\nprint id(c) == id(d)          # False - d is now a new object\nprint id(c[0]) == id(d[0])    # True - d[0] is the same object as c[0]\nd = copy.deepcopy(c)\n\nprint id(c) == id(d)          # False - d is now a new object\nprint id(c[0]) == id(d[0])    # False - d[0] is now a new object\n"}, {"idx": "webquery-test-6", "doc": "Count number of occurrences of a substring in a string", "code": "string.count(substring)&gt;&gt;&gt; \"abcdabcva\".count(\"ab\")\n2\n"}, {"idx": "webquery-test-7", "doc": "How to loop backwards in python?", "code": "range()range()range(10, 0, -1)\n[10, 9, 8, 7, 6, 5, 4, 3, 2, 1] \nxrangexrange(10, 0, -1)\nrangerangerangerange"}, {"idx": "webquery-test-8", "doc": "Max retries exceeded with URL in requests", "code": "requestsimport requests\nfrom requests.adapters import HTTPAdapter\nfrom urllib3.util.retry import Retry\n\n\nsession = requests.Session()\nretry = Retry(connect=3, backoff_factor=0.5)\nadapter = HTTPAdapter(max_retries=retry)\nsession.mount('http://', adapter)\nsession.mount('https://', adapter)\n\nsession.get(url)\nGETGETGETurllib3.util.retry.Retry"}, {"idx": "webquery-test-9", "doc": "How can I check if my python object is a number?", "code": "numbers.Number&gt;&gt;&gt; import numbers\n&gt;&gt;&gt; import decimal\n&gt;&gt;&gt; [isinstance(x, numbers.Number) for x in (0, 0.0, 0j, decimal.Decimal(0))]\n[True, True, True, True]\nNumber4 - \"1\""}, {"idx": "webquery-test-10", "doc": "Set markers for individual points on a line in Matplotlib", "code": "linestylelinestylelinestyleplt.plot(range(10), linestyle='--', marker='o', color='b', label='line with marker')\nplt.legend()\nplt.plot(range(10), '--bo', label='line with marker')\nplt.legend()\n================    ===============================\ncharacter           description\n================    ===============================\n   -                solid line style\n   --               dashed line style\n   -.               dash-dot line style\n   :                dotted line style\n   .                point marker\n   ,                pixel marker\n   o                circle marker\n   v                triangle_down marker\n   ^                triangle_up marker\n   &lt;                triangle_left marker\n   &gt;                triangle_right marker\n   1                tri_down marker\n   2                tri_up marker\n   3                tri_left marker\n   4                tri_right marker\n   s                square marker\n   p                pentagon marker\n   *                star marker\n   h                hexagon1 marker\n   H                hexagon2 marker\n   +                plus marker\n   x                x marker\n   D                diamond marker\n   d                thin_diamond marker\n   |                vline marker\n   _                hline marker\n================    ===============================\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nxs = np.linspace(-np.pi, np.pi, 30)\nys = np.sin(xs)\nmarkers_on = [12, 17, 18, 19]\nplt.plot(xs, ys, '-gD', markevery=markers_on, label='line with select markers')\nplt.legend()\nplt.show()\nmarkevery"}, {"idx": "webquery-test-11", "doc": "Asserting successive calls to a mock method", "code": "assert_has_calls&gt;&gt;&gt; from unittest.mock import call, Mock\n&gt;&gt;&gt; mock = Mock(return_value=None)\n&gt;&gt;&gt; mock(1)\n&gt;&gt;&gt; mock(2)\n&gt;&gt;&gt; mock(3)\n&gt;&gt;&gt; mock(4)\n&gt;&gt;&gt; calls = [call(2), call(3)]\n&gt;&gt;&gt; mock.assert_has_calls(calls)\n&gt;&gt;&gt; calls = [call(4), call(2), call(3)]\n&gt;&gt;&gt; mock.assert_has_calls(calls, any_order=True)\n"}, {"idx": "webquery-test-12", "doc": "Python argparse ignore unrecognised arguments", "code": "args = parser.parse_args()\nargs, unknown = parser.parse_known_args()\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('--foo')\nargs, unknown = parser.parse_known_args(['--foo', 'BAR', 'spam'])\nprint(args)\n# Namespace(foo='BAR')\nprint(unknown)\n# ['spam']\n"}, {"idx": "webquery-test-13", "doc": "TypeError: not all arguments converted during string formatting python", "code": "%%'It will cost $%d dollars.' % 95\n{}{}{}'It will cost ${0} dollars.'.format(95)\n'%d days and %d nights' % (40, 40)\n{}{}\"'{0}' is longer than '{1}'\".format(name1, name2)\n"}, {"idx": "webquery-test-14", "doc": "python pandas remove duplicate columns", "code": "df = df.loc[:,~df.columns.duplicated()].copy()\n['alpha','beta','alpha']df.columns.duplicated()df.columns.duplicated()df.columns.duplicated()df.columns.duplicated()df.columns.duplicated()df.columns.duplicated()PandasPandasPandasdf.loc[:,[True,True,False]].copy()df = df.loc[~df.index.duplicated(),:].copy()\ndf = df.loc[:,~df.apply(lambda x: x.duplicated(),axis=1).all()].copy()\n# create a large(ish) dataframe\nldf = pd.DataFrame(np.random.randint(0,100,size= (736334,1312))) \n\n\n#to see size in gigs\n#ldf.memory_usage().sum()/1e9 #it's about 3 gigs\n\n# duplicate a column\nldf.loc[:,'dup'] = ldf.loc[:,101]\n\n# take out duplicated columns by values\nldf = ldf.loc[:,~ldf.apply(lambda x: x.duplicated(),axis=1).all()].copy()\n"}, {"idx": "webquery-test-15", "doc": "Using both Python 2.x and Python 3.x in IPython Notebook", "code": "ipythonnb_conda_kernelsconda create -n py27 python=2.7 ipykernel\nconda create -n py36 python=3.6 ipykernel\nnb_conda_kernelspython2.7conda create -n py27 python=2.7\nconda activate py27\nconda install notebook ipykernel\nipython kernel install --user\npython3.6conda create -n py36 python=3.6\nconda activate py36\nconda install notebook ipykernel\nipython kernel install --user\npython2python2--name--name--name--name"}, {"idx": "webquery-test-16", "doc": "How to put comments in Django templates?", "code": "{% comment %}...{% endcomment %}{# some text #}\n"}, {"idx": "webquery-test-17", "doc": "Asyncio.gather vs asyncio.wait", "code": "asyncio.gather()import asyncio\nfrom pprint import pprint\n\nimport random\n\n\nasync def coro(tag):\n    print(\"&gt;\", tag)\n    await asyncio.sleep(random.uniform(1, 3))\n    print(\"&lt;\", tag)\n    return tag\n\n\nloop = asyncio.get_event_loop()\n\ngroup1 = asyncio.gather(*[coro(\"group 1.{}\".format(i)) for i in range(1, 6)])\ngroup2 = asyncio.gather(*[coro(\"group 2.{}\".format(i)) for i in range(1, 4)])\ngroup3 = asyncio.gather(*[coro(\"group 3.{}\".format(i)) for i in range(1, 10)])\n\nall_groups = asyncio.gather(group1, group2, group3)\n\nresults = loop.run_until_complete(all_groups)\n\nloop.close()\n\npprint(results)\ngroup2.cancel()group2.cancel()group2.cancel()asyncio.wait()import asyncio\nimport random\n\n\nasync def coro(tag):\n    print(\"&gt;\", tag)\n    await asyncio.sleep(random.uniform(0.5, 5))\n    print(\"&lt;\", tag)\n    return tag\n\n\nloop = asyncio.get_event_loop()\n\ntasks = [coro(i) for i in range(1, 11)]\n\nprint(\"Get first result:\")\nfinished, unfinished = loop.run_until_complete(\n    asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED))\n\nfor task in finished:\n    print(task.result())\nprint(\"unfinished:\", len(unfinished))\n\nprint(\"Get more results in 2 seconds:\")\nfinished2, unfinished2 = loop.run_until_complete(\n    asyncio.wait(unfinished, timeout=2))\n\nfor task in finished2:\n    print(task.result())\nprint(\"unfinished2:\", len(unfinished2))\n\nprint(\"Get all other results:\")\nfinished3, unfinished3 = loop.run_until_complete(asyncio.wait(unfinished2))\n\nfor task in finished3:\n    print(task.result())\n\nloop.close()\n"}, {"idx": "webquery-test-18", "doc": "What is pip's `--no-cache-dir` good for?", "code": ".whl.whlpip installpip installpip installpip installpip install"}, {"idx": "webquery-test-19", "doc": "How to set common axes labels for subplots", "code": "import random\nimport matplotlib.pyplot as plt\n\nx = range(1, 101)\ny1 = [random.randint(1, 100) for _ in range(len(x))]\ny2 = [random.randint(1, 100) for _ in range(len(x))]\n\nfig = plt.figure()\nax = fig.add_subplot(111)    # The big subplot\nax1 = fig.add_subplot(211)\nax2 = fig.add_subplot(212)\n\n# Turn off axis lines and ticks of the big subplot\nax.spines['top'].set_color('none')\nax.spines['bottom'].set_color('none')\nax.spines['left'].set_color('none')\nax.spines['right'].set_color('none')\nax.tick_params(labelcolor='w', top=False, bottom=False, left=False, right=False)\n\nax1.loglog(x, y1)\nax2.loglog(x, y2)\n\n# Set common labels\nax.set_xlabel('common xlabel')\nax.set_ylabel('common ylabel')\n\nax1.set_title('ax1 title')\nax2.set_title('ax2 title')\n\nplt.savefig('common_labels.png', dpi=300)\nimport random\nimport matplotlib.pyplot as plt\n\nx = range(1, 101)\ny1 = [random.randint(1, 100) for _ in range(len(x))]\ny2 = [random.randint(1, 100) for _ in range(len(x))]\n\nfig = plt.figure()\nax1 = fig.add_subplot(211)\nax2 = fig.add_subplot(212)\n\nax1.loglog(x, y1)\nax2.loglog(x, y2)\n\n# Set common labels\nfig.text(0.5, 0.04, 'common xlabel', ha='center', va='center')\nfig.text(0.06, 0.5, 'common ylabel', ha='center', va='center', rotation='vertical')\n\nax1.set_title('ax1 title')\nax2.set_title('ax2 title')\n\nplt.savefig('common_labels_text.png', dpi=300)\n"}, {"idx": "webquery-test-20", "doc": "Django values_list vs values", "code": "values()&lt;QuerySet [{'comment_id': 1}, {'comment_id': 2}]&gt;\nvalues_list()&lt;QuerySet [(1,), (2,)]&gt;\nvalues_list()values_list()&lt;QuerySet [1, 2]&gt;\n"}, {"idx": "webquery-test-1", "doc": "input() error - NameError: name '...' is not defined", "code": "inputinputraw_inputraw_inputraw_input()raw_input()raw_input()raw_input()raw_input()raw_input()raw_input()inputinputinput = eval(raw_input)\n&gt;&gt;&gt; dude = \"thefourtheye\"\n&gt;&gt;&gt; input_variable = input(\"Enter your name: \")\nEnter your name: dude\n&gt;&gt;&gt; input_variable\n'thefourtheye'\ninputinputinputinputinputinputNameError&gt;&gt;&gt; input(\"Enter your name: \")\nEnter your name: dummy\nTraceback (most recent call last):\n  File \"&lt;input&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\nNameError: name 'dummy' is not defined\ninputososos.remove(\"/etc/hosts\")\n/etc/hostsinput&gt;&gt;&gt; dude = \"thefourtheye\"\n&gt;&gt;&gt; input(\"Enter your name: \")\nEnter your name: input(\"Enter your name again: \")\nEnter your name again: dude\ninput(\"Enter your name: \")input(\"Enter your name: \")raw_inputinput_variable = raw_input(\"Enter your name: \")\nraw_inputraw_inputinputinput"}, {"idx": "webquery-test-2", "doc": "Django Admin - change header 'Django administration' text", "code": "site_titlesite_titlefrom django.contrib.admin import AdminSite\nfrom django.utils.translation import ugettext_lazy\n\nclass MyAdminSite(AdminSite):\n    # Text to put at the end of each page's &lt;title&gt;.\n    site_title = ugettext_lazy('My site admin')\n\n    # Text to put in each page's &lt;h1&gt; (and above login form).\n    site_header = ugettext_lazy('My administration')\n\n    # Text to put at the top of the admin index page.\n    index_title = ugettext_lazy('Site administration')\n\nadmin_site = MyAdminSite()\nfrom django.conf.urls import patterns, include\nfrom myproject.admin import admin_site\n\nurlpatterns = patterns('',\n    (r'^myadmin/', include(admin_site.urls)),\n)\nsite_headersite_headersite_headersite_headeradmin.site.site_header = 'My administration'\n"}, {"idx": "webquery-test-3", "doc": "How can I check the extension of a file?", "code": "mmif m.endswith('.mp3'):\n...\nelif m.endswith('.flac'):\n...\nm.lower().endswith(('.png', '.jpg', '.jpeg'))\n"}, {"idx": "webquery-test-4", "doc": "xlrd.biffh.XLRDError: Excel xlsx file; not supported", "code": "openpyxlopenpyxl"}, {"idx": "webquery-test-5", "doc": "pytest: assert almost equal", "code": "approx()import pytest\n\nassert 2.2 == pytest.approx(2.3)\n# fails, default is \u00b1 2.3e-06\nassert 2.2 == pytest.approx(2.3, 0.1)\n# passes\n\n# also works the other way, in case you were worried:\nassert pytest.approx(2.3, 0.1) == 2.2\n# passes\n"}, {"idx": "webquery-test-6", "doc": "Convert datetime to Unix timestamp and convert it back in python", "code": "import time\nimport datetime\nd = datetime.date(2015,1,5)\n\nunixtime = time.mktime(d.timetuple())\n"}, {"idx": "webquery-test-7", "doc": "How to calculate the angle between a line and the horizontal axis?", "code": "deltaY = P2_y - P1_y\ndeltaX = P2_x - P1_x\nP1P1angleInDegrees = arctan(deltaY / deltaX) * 180 / PI\narctanarctanangleInDegrees = atan2(deltaY, deltaX) * 180 / PI\natan2(deltaY,deltaX)atan2(deltaY,deltaX)atan2(deltaY,deltaX)(deltaX, deltaY)(deltaX, deltaY)(deltaX, deltaY)(deltaX, deltaY)(deltaX, deltaY)(deltaX, deltaY)(deltaX, deltaY)(deltaX, deltaY)deltaXdeltaXdeltaXdeltaXdeltaXdeltaXdeltaXdeltaXdeltaXdeltaXdeltaXdeltaXdeltaXfrom math import *\ndef angle_trunc(a):\n    while a &lt; 0.0:\n        a += pi * 2\n    return a\n\ndef getAngleBetweenPoints(x_orig, y_orig, x_landmark, y_landmark):\n    deltaY = y_landmark - y_orig\n    deltaX = x_landmark - x_orig\n    return angle_trunc(atan2(deltaY, deltaX))\n\nangle = getAngleBetweenPoints(5, 2, 1,4)\nassert angle &gt;= 0, \"angle must be &gt;= 0\"\nangle = getAngleBetweenPoints(1, 1, 2, 1)\nassert angle == 0, \"expecting angle to be 0\"\nangle = getAngleBetweenPoints(2, 1, 1, 1)\nassert abs(pi - angle) &lt;= 0.01, \"expecting angle to be pi, it is: \" + str(angle)\nangle = getAngleBetweenPoints(2, 1, 2, 3)\nassert abs(angle - pi/2) &lt;= 0.01, \"expecting angle to be pi/2, it is: \" + str(angle)\nangle = getAngleBetweenPoints(2, 1, 2, 0)\nassert abs(angle - (pi+pi/2)) &lt;= 0.01, \"expecting angle to be pi+pi/2, it is: \" + str(angle)\nangle = getAngleBetweenPoints(1, 1, 2, 2)\nassert abs(angle - (pi/4)) &lt;= 0.01, \"expecting angle to be pi/4, it is: \" + str(angle)\nangle = getAngleBetweenPoints(-1, -1, -2, -2)\nassert abs(angle - (pi+pi/4)) &lt;= 0.01, \"expecting angle to be pi+pi/4, it is: \" + str(angle)\nangle = getAngleBetweenPoints(-1, -1, -1, 2)\nassert abs(angle - (pi/2)) &lt;= 0.01, \"expecting angle to be pi/2, it is: \" + str(angle)\n"}, {"idx": "webquery-test-8", "doc": "How to use a different version of python during NPM install?", "code": "--pythonnpm install --python=python2.7\nnpm config set python python2.7\n"}, {"idx": "webquery-test-9", "doc": "Python: access class property from string", "code": "x = getattr(self, source)x = getattr(self, source)x = getattr(self, source)"}, {"idx": "webquery-test-10", "doc": "Initialising an array of fixed size in Python", "code": "&gt;&gt;&gt; lst = [None] * 5\n&gt;&gt;&gt; lst\n[None, None, None, None, None]\n"}, {"idx": "webquery-test-11", "doc": "Understanding the difference between __getattr__ and __getattribute__", "code": "instance.attributeinstance.attributeinstance.attribute__getattr____getattr__class A(dict):\n    def __getattr__(self, name):\n       return self[name]\na = A()\n# Now a.somekey will give a['somekey']\n__getattribute____getattribute____getattribute____getattribute____getattribute__"}, {"idx": "webquery-test-12", "doc": "How to save a Seaborn plot into a file", "code": "swarm_plot = sns.swarmplot(...)\nfig = swarm_plot.get_figure()\nfig.savefig(\"out.png\") \nAttributeError: 'AxesSubplot' object has no attribute 'fig'\nWhen trying to access the figure\n\nAttributeError: 'AxesSubplot' object has no attribute 'savefig'\nwhen trying to use the savefig directly as a function\nPairGridPairGridPairGridPairGridfig = myGridPlotObject.fig\n"}, {"idx": "webquery-test-13", "doc": "How to load/edit/run/save text files (.py) into an IPython notebook cell?", "code": "%load%load filename.py\nfilename.py%%writefile filename.py???"}, {"idx": "webquery-test-14", "doc": "Class method decorator with self arguments?", "code": "def check_authorization(f):\n    def wrapper(*args):\n        print args[0].url\n        return f(*args)\n    return wrapper\n\nclass Client(object):\n    def __init__(self, url):\n        self.url = url\n\n    @check_authorization\n    def get(self):\n        print 'get'\n\n&gt;&gt;&gt; Client('http://www.google.com').get()\nhttp://www.google.com\nget\ngetattrdef check_authorization(attribute):\n    def _check_authorization(f):\n        def wrapper(self, *args):\n            print getattr(self, attribute)\n            return f(self, *args)\n        return wrapper\n    return _check_authorization\n"}, {"idx": "webquery-test-15", "doc": "How to know/change current directory in Python shell?", "code": "os&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.getcwd()\n'/home/user'\n&gt;&gt;&gt; os.chdir(\"/tmp/\")\n&gt;&gt;&gt; os.getcwd()\n'/tmp'\nPYTHONPATHexport PYTHONPATH=/path/to/my/library:$PYTHONPATH\nimportset PYTHONPATH=%PYTHONPATH%;C:\\My_python_lib\nvirtualenvvirtualenvvirtualenv"}, {"idx": "webquery-test-16", "doc": "Running Python on Windows for Node.js dependencies", "code": "npm install --global --production windows-build-tools\nnpm install --global node-gyp\nC:\\Users\\ben\\.windows-build-tools\\python27\\python.exe \nsetx PYTHON \"%USERPROFILE%\\.windows-build-tools\\python27\\python.exe\"\nset PYTHONset PYTHONnpm install &lt;module&gt;"}, {"idx": "webquery-test-17", "doc": "\"Could not run curl-config: [Errno 2] No such file or directory\" when installing pycurl", "code": "sudo apt install libcurl4-openssl-dev libssl-dev\n"}, {"idx": "webquery-test-18", "doc": "Check if a number is int or float", "code": "isinstance&gt;&gt;&gt; x = 12\n&gt;&gt;&gt; isinstance(x, int)\nTrue\n&gt;&gt;&gt; y = 12.0\n&gt;&gt;&gt; isinstance(y, float)\nTrue\n&gt;&gt;&gt; if isinstance(x, int):\n        print('x is a int!')\n\nx is a int!\n&gt;&gt;&gt; x = 12L\n&gt;&gt;&gt; import numbers\n&gt;&gt;&gt; isinstance(x, numbers.Integral)\nTrue\n&gt;&gt;&gt; isinstance(x, int)\nFalse\n"}, {"idx": "webquery-test-19", "doc": "Using python's eval() vs. ast.literal_eval()", "code": "datamap = eval(input('Provide some data here: '))datamap = eval(input('Provide some data here: '))ast.literal_evalast.literal_evalast.literal_eval"}, {"idx": "webquery-test-20", "doc": "Split a python list into other \"sublists\" i.e smaller lists", "code": "chunks = [data[x:x+100] for x in range(0, len(data), 100)]\nxrange()chunks = [data[x:x+100] for x in xrange(0, len(data), 100)]\n"}, {"idx": "webquery-test-1", "doc": "What blocks Ruby, Python to get Javascript V8 speed?", "code": "HashHash"}, {"idx": "webquery-test-2", "doc": "How to filter rows containing a string pattern from a Pandas dataframe", "code": "In [3]: df[df['ids'].str.contains(\"ball\")]\nOut[3]:\n     ids  vals\n0  aball     1\n1  bball     2\n3  fball     4\n"}, {"idx": "webquery-test-3", "doc": "Transposing a 1D NumPy array", "code": "np.newaxisnp.newaxisnp.newaxisimport numpy as np\na = np.array([5,4])[np.newaxis]\nprint(a)\nprint(a.T)\n"}, {"idx": "webquery-test-4", "doc": "Delete the first three rows of a dataframe in pandas", "code": "ilocdf = df.iloc[3:]\n"}, {"idx": "webquery-test-5", "doc": "Find first element in a sequence that matches a predicate", "code": "seqseqnext(x for x in seq if predicate(x))\nnext(itertools.ifilter(predicate, seq))\nnext(filter(predicate, seq))\nStopIterationNonenext((x for x in seq if predicate(x)), None)\nnext(filter(predicate, seq), None)\n"}, {"idx": "webquery-test-6", "doc": "What is the preferred syntax for initializing a dict: curly brace literals {} or the dict() function?", "code": "dict()a = {'import': 'trade', 1: 7.8}\na = dict({'import': 'trade', 1: 7.8})\na = dict(import='trade', 1=7.8)\n    a = dict(import='trade', 1=7.8)\n             ^\nSyntaxError: invalid syntax\n"}, {"idx": "webquery-test-7", "doc": "python re.sub group: number after \\number", "code": "re.sub(r'(foo)', r'\\g&lt;1&gt;123', 'foobar')\n"}, {"idx": "webquery-test-8", "doc": "Understanding __getitem__ method", "code": "__getitem____getitem__class Building(object):\n     def __init__(self, floors):\n         self._floors = [None]*floors\n     def occupy(self, floor_number, data):\n          self._floors[floor_number] = data\n     def get_floor_data(self, floor_number):\n          return self._floors[floor_number]\n\nbuilding1 = Building(4) # Construct a building with 4 floors\nbuilding1.occupy(0, 'Reception')\nbuilding1.occupy(1, 'ABC Corp')\nbuilding1.occupy(2, 'DEF Inc')\nprint( building1.get_floor_data(2) )\n__getitem____getitem__class Building(object):\n     def __init__(self, floors):\n         self._floors = [None]*floors\n     def __setitem__(self, floor_number, data):\n          self._floors[floor_number] = data\n     def __getitem__(self, floor_number):\n          return self._floors[floor_number]\n\nbuilding1 = Building(4) # Construct a building with 4 floors\nbuilding1[0] = 'Reception'\nbuilding1[1] = 'ABC Corp'\nbuilding1[2] = 'DEF Inc'\nprint( building1[2] )\n__setitem__"}, {"idx": "webquery-test-9", "doc": "Override Python's 'in' operator?", "code": "MyClass.__contains__(self, item)"}, {"idx": "webquery-test-10", "doc": "Replace all elements of Python NumPy Array that are greater than some value", "code": "ndarrayndarrayndarrayndarrayarr[arr &gt; 255] = x\nIn [1]: import numpy as np\nIn [2]: A = np.random.rand(500, 500)\nIn [3]: timeit A[A &gt; 0.5] = 5\n100 loops, best of 3: 7.59 ms per loop\n"}, {"idx": "webquery-test-11", "doc": "How do I convert a string to a double in Python?", "code": "&gt;&gt;&gt; x = \"2342.34\"\n&gt;&gt;&gt; float(x)\n2342.3400000000001\n"}, {"idx": "webquery-test-12", "doc": "Django - what is the difference between render(), render_to_response() and direct_to_template()?", "code": "render(request, template[, dictionary][, context_instance][, content_type][, status][, current_app])\nrender()render()render()render_to_response()render_to_response(template[, dictionary][, context_instance][, mimetype])\u00b6\nrender_to_responserender_to_responserender_to_responsedirect_to_templatedirect_to_templatedirect_to_templatedirect_to_templatedirect_to_templatedirect_to_templateRequestContext"}, {"idx": "webquery-test-13", "doc": "Permutations between two lists of unequal length", "code": "itertools.producta = [\"foo\", \"melon\"]\nb = [True, False]\nc = list(itertools.product(a, b))\n&gt;&gt; [(\"foo\", True), (\"foo\", False), (\"melon\", True), (\"melon\", False)]\n"}, {"idx": "webquery-test-14", "doc": "Create numpy matrix filled with NaNs", "code": "&gt;&gt;&gt; a = numpy.empty((3,3,))\n&gt;&gt;&gt; a[:] = numpy.nan\n&gt;&gt;&gt; a\narray([[ NaN,  NaN,  NaN],\n       [ NaN,  NaN,  NaN],\n       [ NaN,  NaN,  NaN]])\na[:] = numpy.nana[:] = numpy.nan$ python -mtimeit \"import numpy as np; a = np.empty((100,100));\" \"a.fill(np.nan)\"\n10000 loops, best of 3: 54.3 usec per loop\n$ python -mtimeit \"import numpy as np; a = np.empty((100,100));\" \"a[:] = np.nan\" \n10000 loops, best of 3: 88.8 usec per loop\nndarray.fill(..)ndarray.fillndarray.fillndarray.fill"}, {"idx": "webquery-test-15", "doc": "Python datetime - setting fixed hour and minute after using strptime to get day,month,year", "code": "datetime.replacefrom datetime import datetime\ndt = datetime.strptime('26 Sep 2012', '%d %b %Y')\nnewdatetime = dt.replace(hour=11, minute=59)\ndatetime.replacedatetime.replacedatetime.replacedatetime.replace"}, {"idx": "webquery-test-16", "doc": "How do I filter ForeignKey choices in a Django ModelForm?", "code": "querysetform.rate.queryset = Rate.objects.filter(company_id=the_company.id)\nform.fields[\"rate\"].queryset = ..."}, {"idx": "webquery-test-17", "doc": "Reduce left and right margins in matplotlib plot", "code": "bbox_inches='tight'bbox_inches='tight'import matplotlib.pyplot as plt\nimport numpy as np\ndata = np.arange(3000).reshape((100,30))\nplt.imshow(data)\nplt.savefig('test.png', bbox_inches='tight')\nfig.tight_layout()import matplotlib.pyplot as plt\nimport numpy as np\n\nxs = np.linspace(0, 1, 20); ys = np.sin(xs)\n\nfig = plt.figure()\naxes = fig.add_subplot(1,1,1)\naxes.plot(xs, ys)\n\n# This should be called after all axes have been added\nfig.tight_layout()\nfig.savefig('test.png')\n"}, {"idx": "webquery-test-18", "doc": "How to add header row to a pandas DataFrame", "code": "namesnamesCov = pd.read_csv(\"path/to/file.txt\", \n                  sep='\\t', \n                  names=[\"Sequence\", \"Start\", \"End\", \"Coverage\"])\n"}, {"idx": "webquery-test-19", "doc": "Take multiple lists into dataframe", "code": "lstimport pandas as pd\nlst1 = range(100)\nlst2 = range(100)\nlst3 = range(100)\npercentile_list = pd.DataFrame(\n    {'lst1Title': lst1,\n     'lst2Title': lst2,\n     'lst3Title': lst3\n    })\n\npercentile_list\n    lst1Title  lst2Title  lst3Title\n0          0         0         0\n1          1         1         1\n2          2         2         2\n3          3         3         3\n4          4         4         4\n5          5         5         5\n6          6         6         6\n...\nnp.column_stacknp.column_stackimport numpy as np\npercentile_list = pd.DataFrame(np.column_stack([lst1, lst2, lst3]), \n                               columns=['lst1Title', 'lst2Title', 'lst3Title'])\n"}, {"idx": "webquery-test-1", "doc": "ModuleNotFoundError: What does it mean __main__ is not a package?", "code": "from p_02_paying_debt_off_in_a_year import compute_balance_after\n"}, {"idx": "webquery-test-2", "doc": "TransactionManagementError \"You can't execute queries until the end of the 'atomic' block\" while using signals, but only during Unit Testing", "code": "def test_constraint(self):\n    try:\n        # Duplicates should be prevented.\n        models.Question.objects.create(domain=self.domain, slug='barks')\n        self.fail('Duplicate question allowed.')\n    except IntegrityError:\n        pass\n\n    do_more_model_stuff()\ndo_more_model_stuff()do_more_model_stuff()transaction.atomicfrom django.db import transaction\ndef test_constraint(self):\n    try:\n        # Duplicates should be prevented.\n        with transaction.atomic():\n            models.Question.objects.create(domain=self.domain, slug='barks')\n        self.fail('Duplicate question allowed.')\n    except IntegrityError:\n        pass\n"}, {"idx": "webquery-test-3", "doc": "ImportError: libGL.so.1: cannot open shared object file: No such file or directory", "code": "RUN apt-get update\nRUN apt-get install ffmpeg libsm6 libxext6  -y\n"}, {"idx": "webquery-test-4", "doc": "How to use Python to execute a cURL command?", "code": "import requests\nr = requests.get('https://github.com/timeline.json')\nr.json()\nimport requests\n\nurl = 'https://www.googleapis.com/qpxExpress/v1/trips/search?key=mykeyhere'\npayload = open(\"request.json\")\nheaders = {'content-type': 'application/json', 'Accept-Charset': 'UTF-8'}\nr = requests.post(url, data=payload, headers=headers)\n"}, {"idx": "webquery-test-5", "doc": "Is Python interpreted, or compiled, or both?", "code": "a = b.c()a = b.c()a = b.c()"}, {"idx": "webquery-test-6", "doc": "Require either of two arguments using argparse", "code": "import argparse\n\nparser = argparse.ArgumentParser()\ngroup = parser.add_mutually_exclusive_group(required=True)\ngroup.add_argument('--foo',action=.....)\ngroup.add_argument('--bar',action=.....)\nargs = parser.parse_args()\n"}, {"idx": "webquery-test-7", "doc": "How do you programmatically set an attribute?", "code": "setattr(x, attr, 'magic')\n&gt;&gt;&gt; help(setattr)\nHelp on built-in function setattr in module __builtin__:\n\nsetattr(...)\n    setattr(object, name, value)\n    \n    Set a named attribute on an object; setattr(x, 'y', v) is equivalent to\n    ``x.y = v''.\nobject"}, {"idx": "webquery-test-8", "doc": "How to open a file using the open with statement", "code": "open()open()def filter(txt, oldfile, newfile):\n    '''\\\n    Read a list of names from a file line by line into an output file.\n    If a line begins with a particular name, insert a string of text\n    after the name before appending the line to the output file.\n    '''\n\n    with open(newfile, 'w') as outfile, open(oldfile, 'r', encoding='utf-8') as infile:\n        for line in infile:\n            if line.startswith(txt):\n                line = line[0:len(txt)] + ' - Truly a great person!\\n'\n            outfile.write(line)\n\n# input the name you want to check against\ntext = input('Please enter the name of a great person: ')    \nletsgo = filter(text,'Spanish', 'Spanish2')\nreturnreturnreturnopen()open()open()withwith"}, {"idx": "webquery-test-9", "doc": "What's the best solution for OpenID with Django?", "code": "bzr branch lp:django-openid-auth\npip install django-openid-auth\n"}, {"idx": "webquery-test-10", "doc": "Clear variable in python", "code": "del&gt;&gt;&gt; a=1\n&gt;&gt;&gt; a\n1\n&gt;&gt;&gt; del a\n&gt;&gt;&gt; a\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'a' is not defined\nself.left = None"}, {"idx": "webquery-test-11", "doc": "Web-scraping JavaScript page with Python", "code": "phantomjsphantomjsphantomjs --version\n# result:\n2.1.1\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;Javascript scraping test&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;p id='intro-text'&gt;No javascript support&lt;/p&gt;\n  &lt;script&gt;\n     document.getElementById('intro-text').innerHTML = 'Yay! Supports javascript';\n  &lt;/script&gt; \n&lt;/body&gt;\n&lt;/html&gt;\nNo javascript supportNo javascript supportimport requests\nfrom bs4 import BeautifulSoup\nresponse = requests.get(my_url)\nsoup = BeautifulSoup(response.text)\nsoup.find(id=\"intro-text\")\n# Result:\n&lt;p id=\"intro-text\"&gt;No javascript support&lt;/p&gt;\nfrom selenium import webdriver\ndriver = webdriver.PhantomJS()\ndriver.get(my_url)\np_element = driver.find_element_by_id(id_='intro-text')\nprint(p_element.text)\n# result:\n'Yay! Supports javascript'\nimport dryscrape\nfrom bs4 import BeautifulSoup\nsession = dryscrape.Session()\nsession.visit(my_url)\nresponse = session.body()\nsoup = BeautifulSoup(response)\nsoup.find(id=\"intro-text\")\n# Result:\n&lt;p id=\"intro-text\"&gt;Yay! Supports javascript&lt;/p&gt;\n"}, {"idx": "webquery-test-12", "doc": "Pandas DataFrame: replace all values in a column, based on condition", "code": "In [41]:\ndf.loc[df['First Season'] &gt; 1990, 'First Season'] = 1\ndf\n\nOut[41]:\n                 Team  First Season  Total Games\n0      Dallas Cowboys          1960          894\n1       Chicago Bears          1920         1357\n2   Green Bay Packers          1921         1339\n3      Miami Dolphins          1966          792\n4    Baltimore Ravens             1          326\n5  San Franciso 49ers          1950         1003\ndf.loc[&lt;mask&gt;(here mask is generating the labels to index) , &lt;optional column(s)&gt; ]\nintintintintintIn [43]:\ndf['First Season'] = (df['First Season'] &gt; 1990).astype(int)\ndf\n\nOut[43]:\n                 Team  First Season  Total Games\n0      Dallas Cowboys             0          894\n1       Chicago Bears             0         1357\n2   Green Bay Packers             0         1339\n3      Miami Dolphins             0          792\n4    Baltimore Ravens             1          326\n5  San Franciso 49ers             0         1003\n"}, {"idx": "webquery-test-13", "doc": "Random row selection in Pandas dataframe", "code": "0.16.10.16.1import pandas\n\ndf = pandas.DataFrame(pandas.np.random.random(100))\n\n# Randomly sample 70% of your dataframe\ndf_percent = df.sample(frac=0.7)\n\n# Randomly sample 7 elements from your dataframe\ndf_elements = df.sample(n=7)\ndf_rest = df.loc[~df.index.isin(df_percent.index)]\nPedramPedramdf_percent = df.sample(frac=0.7, random_state=42)\n"}, {"idx": "webquery-test-14", "doc": "Jinja2 shorthand conditional", "code": "{{ 'Update' if files else 'Continue' }}\n"}, {"idx": "webquery-test-15", "doc": "How to run Conda?", "code": "export PATH=~/anaconda2/bin:$PATH\nexport PATH=~/anaconda3/bin:$PATH\nconda --version\n"}, {"idx": "webquery-test-16", "doc": "Remove the first character of a string", "code": "s = \":dfa:sif:e\"\nprint s[1:]\ns = \":dfa:sif:e\"\nprint(s[1:])\ndfa:sif:e\n"}, {"idx": "webquery-test-17", "doc": "Creating an empty list in Python", "code": "% python -mtimeit  \"l=[]\"\n10000000 loops, best of 3: 0.0711 usec per loop\n\n% python -mtimeit  \"l=list()\"\n1000000 loops, best of 3: 0.297 usec per loop\n[][]"}, {"idx": "webquery-test-1", "doc": "How do I check if a string is valid JSON in Python?", "code": "json.loads()json.loads()"}, {"idx": "webquery-test-2", "doc": "python max function using 'key' and lambda expression", "code": "lambdadef func(p):\n   return p.totalScore     \nmaxmax(players, key=func)\ndefdeflambdalambdalambdamaxkeykeykey&gt;&gt;&gt; lis = ['1', '100', '111', '2']\nmaxmax&gt;&gt;&gt; max(lis)\n'2'\nkeykey&gt;&gt;&gt; max(lis, key=lambda x:int(x))  # compare `int` version of each item\n'111'\nmax&gt;&gt;&gt; lis = [(1,'a'), (3,'c'), (4,'e'), (-1,'z')]\nmax&gt;&gt;&gt; max(lis)\n(4, 'e')\nlambda&gt;&gt;&gt; max(lis, key = lambda x: x[1])\n(-1, 'z')\nlis = ['1','100','111','2', 2, 2.57]\n&gt;&gt;&gt; max(lis)  # works in Python 2\n'2'\n&gt;&gt;&gt; max(lis, key=lambda x: int(x))  # compare integer version of each item\n'111'\n&gt;&gt;&gt; lis = ['1', '100', '111', '2', 2, 2.57]\n&gt;&gt;&gt; max(lis)\nTraceback (most recent call last):\n  File \"&lt;ipython-input-2-0ce0a02693e4&gt;\", line 1, in &lt;module&gt;\n    max(lis)\nTypeError: unorderable types: int() &gt; str()\n&gt;&gt;&gt; max(lis, key=lambda x: int(x))  # or simply `max(lis, key=int)`\n'111'\n"}, {"idx": "webquery-test-3", "doc": "multiprocessing.Pool: What's the difference between map_async and imap?", "code": "imapimapimapimapmapmapimapimapimapimapimapimapimapimapimapimapimapimapimapimapimapimapimapimport multiprocessing\nimport time\n\ndef func(x):\n    time.sleep(x)\n    return x + 2\n\nif __name__ == \"__main__\":    \n    p = multiprocessing.Pool()\n    start = time.time()\n    for x in p.imap(func, [1,5,3]):\n        print(\"{} (Time elapsed: {}s)\".format(x, int(time.time() - start)))\n3 (Time elapsed: 1s)\n7 (Time elapsed: 5s)\n5 (Time elapsed: 5s)\np.imap_unorderedp.imap_unordered3 (Time elapsed: 1s)\n5 (Time elapsed: 3s)\n7 (Time elapsed: 5s)\np.mapp.map3 (Time elapsed: 5s)\n7 (Time elapsed: 5s)\n5 (Time elapsed: 5s)\nimapimapimap"}, {"idx": "webquery-test-4", "doc": "How to output loop.counter in python jinja template?", "code": "loop.index&gt;&gt;&gt; from jinja2 import Template\n\n&gt;&gt;&gt; s = \"{% for element in elements %}{{loop.index}} {% endfor %}\"\n&gt;&gt;&gt; Template(s).render(elements=[\"a\", \"b\", \"c\", \"d\"])\n1 2 3 4\nloop.indexloop.index0loop.index0loop.index0loop.index0loop.index0loop.index0"}, {"idx": "webquery-test-5", "doc": "How do I load a file into the python console?", "code": "python -i file.py\n"}, {"idx": "webquery-test-6", "doc": "Does uninstalling a package with \"pip\" also remove the dependent packages?", "code": "# install pip-autoremove\npip install pip-autoremove\n# remove \"somepackage\" plus its dependencies:\npip-autoremove somepackage -y\n"}, {"idx": "webquery-test-7", "doc": "pandas get column average/mean", "code": "weightweightIn [479]: df\nOut[479]: \n         ID  birthyear    weight\n0    619040       1962  0.123123\n1    600161       1963  0.981742\n2  25602033       1963  1.312312\n3    624870       1987  0.942120\n\nIn [480]: df[\"weight\"].mean()\nOut[480]: 0.83982437500000007\n"}, {"idx": "webquery-test-8", "doc": "How can I check whether a numpy array is empty or not?", "code": ".size.sizeimport numpy as np\na = np.array([])\n\nif a.size == 0:\n    # Do something when `a` is empty\n"}, {"idx": "webquery-test-9", "doc": "How to create a custom string representation for a class object?", "code": "__str__()__str__()class MC(type):\n  def __repr__(self):\n    return 'Wahaha!'\n\nclass C(object):\n  __metaclass__ = MC\n\nprint(C)\n__str____str__"}, {"idx": "webquery-test-10", "doc": "How to display pandas DataFrame of floats using a format string for columns?", "code": "import pandas as pd\npd.options.display.float_format = '${:,.2f}'.format\ndf = pd.DataFrame([123.4567, 234.5678, 345.6789, 456.7890],\n                  index=['foo','bar','baz','quux'],\n                  columns=['cost'])\nprint(df)\n        cost\nfoo  $123.46\nbar  $234.57\nbaz  $345.68\nquux $456.79\nimport pandas as pd\ndf = pd.DataFrame([123.4567, 234.5678, 345.6789, 456.7890],\n                  index=['foo','bar','baz','quux'],\n                  columns=['cost'])\ndf['foo'] = df['cost']\ndf['cost'] = df['cost'].map('${:,.2f}'.format)\nprint(df)\n         cost       foo\nfoo   $123.46  123.4567\nbar   $234.57  234.5678\nbaz   $345.68  345.6789\nquux  $456.79  456.7890\n"}, {"idx": "webquery-test-11", "doc": "Common elements comparison between 2 lists", "code": "&gt;&gt;&gt; list1 = [1,2,3,4,5,6]\n&gt;&gt;&gt; list2 = [3, 5, 7, 9]\n&gt;&gt;&gt; list(set(list1).intersection(list2))\n[3, 5]\n"}, {"idx": "webquery-test-12", "doc": "Class method differences in Python: bound, unbound and static", "code": "method_onea_test.method_one()\nTest.method_one(a_test)\nmethod_twomethod_two&gt;&gt;&gt; a_test = Test() \n&gt;&gt;&gt; a_test.method_two()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: method_two() takes no arguments (1 given) \nclass Test(object):\n    def method_one(self):\n        print \"Called method_one\"\n\n    @staticmethod\n    def method_two():\n        print \"Called method two\"\ntypetype&gt;&gt;&gt; a_test = Test()\n&gt;&gt;&gt; a_test.method_one()\nCalled method_one\n&gt;&gt;&gt; a_test.method_two()\nCalled method_two\n&gt;&gt;&gt; Test.method_two()\nCalled method_two\n"}, {"idx": "webquery-test-13", "doc": "How do I print the key-value pairs of a dictionary in python", "code": "ifor i in d:\n    print i, d[i]\nd.items()d.items()for k, v in d.items():\n    print(k, v)\nd.items()d.items()for k, v in d.iteritems():\n    print k, v\n"}, {"idx": "webquery-test-14", "doc": "Compute list difference", "code": "&gt;&gt;&gt; set([1,2,3,4]) - set([2,5])\nset([1, 4, 3])\n&gt;&gt;&gt; set([2,5]) - set([1,2,3,4])\nset([5])\n"}, {"idx": "webquery-test-15", "doc": "How do I use brew installed Python as the default Python?", "code": "brew doctor\n"}, {"idx": "webquery-test-1", "doc": "How can I convert a dictionary into a list of tuples?", "code": "&gt;&gt;&gt; d = { 'a': 1, 'b': 2, 'c': 3 }\n&gt;&gt;&gt; list(d.items())\n[('a', 1), ('c', 3), ('b', 2)]\nlist"}, {"idx": "webquery-test-2", "doc": "How to loop over grouped Pandas dataframe?", "code": "df.groupby('l_customer_id_i').agg(lambda x: ','.join(x))df.groupby(...)df.groupby(...)df.groupby(...)df.groupby(...)df.groupby(...)df.groupby(...)df.groupby(...)"}, {"idx": "webquery-test-3", "doc": "Explain Python entry points?", "code": "console_scriptsconsole_scriptsentry_points={\n    'console_scripts': [\n        'cursive = cursive.tools.cmd:cursive_command',\n    ],\n},\ncursive.tools$ cursive --help\nusage: cursive ...\ncursive_commandcursive_commanddef cursive_command():\n    args = sys.argv[1:]\n    if len(args) &lt; 1:\n        print \"usage: ...\"\ndocutils"}, {"idx": "webquery-test-4", "doc": "Why isn't my Pandas 'apply' function referencing multiple columns working?", "code": "''In [43]: df['Value'] = df.apply(lambda row: my_test(row['a'], row['c']), axis=1)\n\nIn [44]: df\nOut[44]:\n                    a    b         c     Value\n          0 -1.674308  foo  0.343801  0.044698\n          1 -2.163236  bar -2.046438 -0.116798\n          2 -0.199115  foo -0.458050 -0.199115\n          3  0.918646  bar -0.007185 -0.001006\n          4  1.336830  foo  0.534292  0.268245\n          5  0.976844  bar -0.773630 -0.570417\nIn [53]: def my_test2(row):\n....:     return row['a'] % row['c']\n....:     \n\nIn [54]: df['Value'] = df.apply(my_test2, axis=1)\n"}, {"idx": "webquery-test-5", "doc": "How can I parse a time string containing milliseconds in it with python?", "code": "%f%ftime.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')\ndatetime&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; a = datetime.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')\n&gt;&gt;&gt; a.microsecond\n123000\n.123.123"}, {"idx": "webquery-test-6", "doc": "How to use XPath in Python?", "code": "import libxml2\n\ndoc = libxml2.parseFile(\"tst.xml\")\nctxt = doc.xpathNewContext()\nres = ctxt.xpathEval(\"//*\")\nif len(res) != 2:\n    print \"xpath query: wrong node set size\"\n    sys.exit(1)\nif res[0].name != \"doc\" or res[1].name != \"foo\":\n    print \"xpath query: wrong node set value\"\n    sys.exit(1)\ndoc.freeDoc()\nctxt.xpathFreeContext()\nfrom elementtree.ElementTree import ElementTree\nmydoc = ElementTree(file='tst.xml')\nfor e in mydoc.findall('/foo/bar'):\n    print e.get('title').text"}, {"idx": "webquery-test-7", "doc": "How to switch position of two items in a Python list?", "code": "i = ['title', 'email', 'password2', 'password1', 'first_name', \n     'last_name', 'next', 'newsletter']\na, b = i.index('password2'), i.index('password1')\ni[b], i[a] = i[a], i[b]\n"}, {"idx": "webquery-test-8", "doc": "Search for \"does-not-contain\" on a DataFrame in pandas", "code": "new_df = df[~df[\"col\"].str.contains(word)]\nnew_dfna=Falsenew_df = df[~df[\"col\"].str.contains(word, na=False)]\nnew_df = df[df[\"col\"].str.contains(word) == False]\n"}, {"idx": "webquery-test-9", "doc": "Pandas: Looking up the list of sheets in an excel file", "code": "sheet_namesxl = pd.ExcelFile('foo.xls')\n\nxl.sheet_names  # see all sheet names\n\nxl.parse(sheet_name)  # read a specific sheet to DataFrame\n"}, {"idx": "webquery-test-10", "doc": "I'm getting Key error in python", "code": "KeyErrorKeyError&gt;&gt;&gt; mydict = {'a':'1','b':'2'}\n&gt;&gt;&gt; mydict['a']\n'1'\n&gt;&gt;&gt; mydict['c']\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nKeyError: 'c'\n&gt;&gt;&gt;\nmeta_entrymeta_entry&gt;&gt;&gt; mydict = {'a':'1','b':'2'}\n&gt;&gt;&gt; print mydict\n{'a': '1', 'b': '2'}\n&gt;&gt;&gt; 'a' in mydict\nTrue\n&gt;&gt;&gt; 'c' in mydict\nFalse\n"}, {"idx": "webquery-test-11", "doc": "Get the current git hash in a Python script", "code": "gitgitpip install gitpythonimport git\nrepo = git.Repo(search_parent_directories=True)\nsha = repo.head.object.hexsha\n__del____del__"}, {"idx": "webquery-test-12", "doc": "How to find the mime type of a file in python?", "code": "# For MIME types\nimport magic\nmime = magic.Magic(mime=True)\nmime.from_file(\"testdata/test.pdf\") # 'application/pdf'\n"}, {"idx": "webquery-test-13", "doc": "Python Sets vs Lists", "code": "x in s"}, {"idx": "webquery-test-14", "doc": "matplotlib: how to draw a rectangle on image", "code": "Rectangleimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nfrom PIL import Image\n\nim = Image.open('stinkbug.png')\n\n# Create figure and axes\nfig, ax = plt.subplots()\n\n# Display the image\nax.imshow(im)\n\n# Create a Rectangle patch\nrect = patches.Rectangle((50, 100), 40, 30, linewidth=1, edgecolor='r', facecolor='none')\n\n# Add the patch to the Axes\nax.add_patch(rect)\n\nplt.show()\n"}, {"idx": "webquery-test-15", "doc": "Broken references in Virtualenvs", "code": "$ ls -la ~/.virtualenvs/my-virtual-env\n...\nlrwxr-xr-x  1 ryan staff   78 Jun 25 13:21 .Python -&gt; /usr/local/Cellar/python/2.7.7/Frameworks/Python.framework/Versions/2.7/Python\n...\nbrew cleanuplrwxr-xr-x  1 ryan staff   78 Jun 25 13:21 .Python -&gt; /usr/local/Cellar/python/2.7.8_1/Frameworks/Python.framework/Versions/2.7/Python\nfind ~/.virtualenvs/my-virtual-env/ -type l -delete\nvirtualenv ~/.virtualenvs/my-virtual-env\nfind ~/.virtualenvs/my-virtual-env/ -type l\nfindgfind ~/.virtualenvs/my-virtual-env/ -type l -xtype l -delete\nfindbrew install findutils\ngg"}, {"idx": "webquery-test-16", "doc": "List of lists into numpy array", "code": "x=[[1,2],[1,2,3],[1]]\ny=numpy.array([numpy.array(xi) for xi in x])\ntype(y)\n&gt;&gt;&gt;&lt;type 'numpy.ndarray'&gt;\ntype(y[0])\n&gt;&gt;&gt;&lt;type 'numpy.ndarray'&gt;\nx=[[1,2],[1,2,3],[1]]\ny=numpy.array(x)\ntype(y)\n&gt;&gt;&gt;&lt;type 'numpy.ndarray'&gt;\ntype(y[0])\n&gt;&gt;&gt;&lt;type 'list'&gt;\nx=[[1,2],[1,2,3],[1]]\nlength = max(map(len, x))\ny=numpy.array([xi+[None]*(length-len(xi)) for xi in x])\ny\n&gt;&gt;&gt;array([[1, 2, None],\n&gt;&gt;&gt;       [1, 2, 3],\n&gt;&gt;&gt;       [1, None, None]], dtype=object)\n"}, {"idx": "webquery-test-17", "doc": "Concatenate a list of pandas dataframes together", "code": "concatimport pandas as pd\ndf = pd.concat(list_of_dataframes)\n"}, {"idx": "webquery-test-18", "doc": "How to construct a set out of list items in python?", "code": "lst = ['foo.py', 'bar.py', 'baz.py', 'qux.py', Ellipsis]\ns = set(lst)\nsets = set()\nfor item in iterable:\n    s.add(item)\nset.add"}, {"idx": "webquery-test-19", "doc": "How do I check (at runtime) if one class is a subclass of another?", "code": "issubclass()issubclass()"}, {"idx": "webquery-test-20", "doc": "What's the proper way to install pip, virtualenv, and distribute for Python?", "code": "# Select current version of virtualenv:\nVERSION=12.0.7\n# Name your first \"bootstrap\" environment:\nINITIAL_ENV=bootstrap\n# Set to whatever python interpreter you want for your first environment:\nPYTHON=$(which python)\nURL_BASE=https://pypi.python.org/packages/source/v/virtualenv\n\n# --- Real work starts here ---\ncurl -O $URL_BASE/virtualenv-$VERSION.tar.gz\ntar xzf virtualenv-$VERSION.tar.gz\n# Create the first \"bootstrap\" environment.\n$PYTHON virtualenv-$VERSION/virtualenv.py $INITIAL_ENV\n# Don't need this anymore.\nrm -rf virtualenv-$VERSION\n# Install virtualenv into the environment.\n$INITIAL_ENV/bin/pip install virtualenv-$VERSION.tar.gz\n# Create a second environment from the first:\n$INITIAL_ENV/bin/virtualenv py-env1\n# Create more:\n$INITIAL_ENV/bin/virtualenv py-env2\n--no-site-packges--no-site-packges--no-site-packges--no-site-packges"}, {"idx": "webquery-test-21", "doc": "Skip first entry in for loop in python?", "code": "for car in cars[1:]:\n    # Do What Ever you want\nfor car in cars[:-1]:\n    # Do What Ever you want\nsequencesequence"}, {"idx": "webquery-test-1", "doc": "How do I get a list of all the duplicate items using pandas in python?", "code": "&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; df = pd.read_csv(\"dup.csv\")\n&gt;&gt;&gt; ids = df[\"ID\"]\n&gt;&gt;&gt; df[ids.isin(ids[ids.duplicated()])].sort_values(\"ID\")\n       ID ENROLLMENT_DATE        TRAINER_MANAGING        TRAINER_OPERATOR FIRST_VISIT_DATE\n24  11795       27-Feb-12      0643D38-Hanover NH      0643D38-Hanover NH        19-Jun-12\n6   11795        3-Jul-12  0649597-White River VT  0649597-White River VT        30-Mar-12\n18   8096       19-Dec-11  0649597-White River VT  0649597-White River VT         9-Apr-12\n2    8096        8-Aug-12      0643D38-Hanover NH      0643D38-Hanover NH        25-Jun-12\n12   A036       30-Nov-11     063B208-Randolph VT     063B208-Randolph VT              NaN\n3    A036        1-Apr-12      06CB8CF-Hanover NH      06CB8CF-Hanover NH         9-Aug-12\n26   A036       11-Aug-12      06D3206-Hanover NH                     NaN        19-Jun-12\nidsids&gt;&gt;&gt; pd.concat(g for _, g in df.groupby(\"ID\") if len(g) &gt; 1)\n       ID ENROLLMENT_DATE        TRAINER_MANAGING        TRAINER_OPERATOR FIRST_VISIT_DATE\n6   11795        3-Jul-12  0649597-White River VT  0649597-White River VT        30-Mar-12\n24  11795       27-Feb-12      0643D38-Hanover NH      0643D38-Hanover NH        19-Jun-12\n2    8096        8-Aug-12      0643D38-Hanover NH      0643D38-Hanover NH        25-Jun-12\n18   8096       19-Dec-11  0649597-White River VT  0649597-White River VT         9-Apr-12\n3    A036        1-Apr-12      06CB8CF-Hanover NH      06CB8CF-Hanover NH         9-Aug-12\n12   A036       30-Nov-11     063B208-Randolph VT     063B208-Randolph VT              NaN\n26   A036       11-Aug-12      06D3206-Hanover NH                     NaN        19-Jun-12\n"}, {"idx": "webquery-test-2", "doc": "Passing HTML to template using Flask/Jinja2", "code": "|safe{{ something|safe }}\n"}, {"idx": "webquery-test-3", "doc": "What's the function like sum() but for multiplication? product()?", "code": "from functools import reduce # Valid in Python 2.6+, required in Python 3\nimport operator\n\nreduce(operator.mul, (3, 4, 5), 1)\n"}, {"idx": "webquery-test-4", "doc": "Can I serve multiple clients using just Flask app.run() as standalone?", "code": "flask.Flask.runflask.Flask.runflask.Flask.runflask.Flask.runflask.Flask.runthreadedthreadedthreadedif __name__ == '__main__':\n    app.run(threaded=True)\nif __name__ == '__main__':\n    app.run(threaded=False, processes=3)\nif __name__ == '__main__':\n    app.run()\nserving.run_simpleserving.run_simple"}, {"idx": "webquery-test-5", "doc": "Make virtualenv inherit specific packages from your global site-packages", "code": "virtualenv --system-site-packagesvirtualenv --system-site-packagesvirtualenv --system-site-packages"}, {"idx": "webquery-test-6", "doc": "Set Matplotlib colorbar size to match graph", "code": "plt.colorbar(im,fraction=0.046, pad=0.04)\n"}, {"idx": "webquery-test-7", "doc": "Save classifier to disk in scikit-learn", "code": "import cPickle\n# save the classifier\nwith open('my_dumped_classifier.pkl', 'wb') as fid:\n    cPickle.dump(gnb, fid)    \n\n# load it again\nwith open('my_dumped_classifier.pkl', 'rb') as fid:\n    gnb_loaded = cPickle.load(fid)\n"}, {"idx": "webquery-test-8", "doc": "Format / Suppress Scientific Notation from Pandas Aggregation Results", "code": "In [25]: pd.set_option('display.float_format', lambda x: '%.3f' % x)\n\nIn [28]: Series(np.random.randn(3))*1000000000\nOut[28]: \n0    -757322420.605\n1   -1436160588.997\n2   -1235116117.064\ndtype: float64\nIn [6]: Series(np.random.randn(3)).apply(lambda x: '%.3f' % x)\nOut[6]: \n0     0.026\n1    -0.482\n2    -0.694\ndtype: object\n"}, {"idx": "webquery-test-9", "doc": "Python import csv to list", "code": "import csv\n\nwith open('file.csv', newline='') as f:\n    reader = csv.reader(f)\n    data = list(reader)\n\nprint(data)\n[['This is the first line', 'Line1'], ['This is the second line', 'Line2'], ['This is the third line', 'Line3']]\nimport csv\n\nwith open('file.csv', newline='') as f:\n    reader = csv.reader(f)\n    data = [tuple(row) for row in reader]\n\nprint(data)\n[('This is the first line', 'Line1'), ('This is the second line', 'Line2'), ('This is the third line', 'Line3')]\ncsvimport csv\nwith open('file.csv', 'rb') as f:\n    reader = csv.reader(f)\n    your_list = list(reader)\n\nprint your_list\n# [['This is the first line', 'Line1'],\n#  ['This is the second line', 'Line2'],\n#  ['This is the third line', 'Line3']]\n"}, {"idx": "webquery-test-10", "doc": "Serializing class instance to JSON", "code": "json.dumps()JSONEncoderJSONEncoderjson.dumps()json.dumps()json.dumps()class Foo(object):\n    def __init__(self):\n        self.x = 1\n        self.y = 2\n\nfoo = Foo()\ns = json.dumps(foo) # raises TypeError with \"is not JSON serializable\"\n\ns = json.dumps(foo.__dict__) # s set to: {\"x\":1, \"y\":2}\n.__dict__.__dict__s = json.dumps(vars(foo)) # s set to: {\"x\":1, \"y\":2}\n"}, {"idx": "webquery-test-11", "doc": "Replacing blank values (white space) with NaN in pandas", "code": "df.replace()df = pd.DataFrame([\n    [-0.532681, 'foo', 0],\n    [1.490752, 'bar', 1],\n    [-1.387326, 'foo', 2],\n    [0.814772, 'baz', ' '],     \n    [-0.222552, '   ', 4],\n    [-1.176781,  'qux', '  '],         \n], columns='A B C'.split(), index=pd.date_range('2000-01-01','2000-01-06'))\n\n# replace field that's entirely space (or empty) with NaN\nprint(df.replace(r'^\\s*$', np.nan, regex=True))\n                   A    B   C\n2000-01-01 -0.532681  foo   0\n2000-01-02  1.490752  bar   1\n2000-01-03 -1.387326  foo   2\n2000-01-04  0.814772  baz NaN\n2000-01-05 -0.222552  NaN   4\n2000-01-06 -1.176781  qux NaN\ndf.replace(r'^\\s+$', np.nan, regex=True)"}, {"idx": "webquery-test-12", "doc": "Unpacking a list / tuple of pairs into two lists / tuples", "code": "&gt;&gt;&gt; source_list = [('1','a'),('2','b'),('3','c'),('4','d')]\n&gt;&gt;&gt; list1, list2 = zip(*source_list)\n&gt;&gt;&gt; list1\n('1', '2', '3', '4')\n&gt;&gt;&gt; list2\n('a', 'b', 'c', 'd')\nzip(*iterable)&gt;&gt;&gt; list(source_list) == zip(*zip(*source_list))\nTrue\n&gt;&gt;&gt; list1, list2 = zip(*source_list)\n&gt;&gt;&gt; list(source_list) == zip(list1, list2)\nTrue\n"}, {"idx": "webquery-test-13", "doc": "How do I convert this list of dictionaries to a csv file?", "code": "import csv\n\nto_csv = [\n    {'name': 'bob', 'age': 25, 'weight': 200},\n    {'name': 'jim', 'age': 31, 'weight': 180},\n]\n\nkeys = to_csv[0].keys()\n\nwith open('people.csv', 'w', newline='') as output_file:\n    dict_writer = csv.DictWriter(output_file, keys)\n    dict_writer.writeheader()\n    dict_writer.writerows(to_csv)\n"}, {"idx": "webquery-test-14", "doc": "Python script to copy text to clipboard", "code": "import pyperclip\npyperclip.copy('The text to be copied to the clipboard.')\nspam = pyperclip.paste()\n"}, {"idx": "webquery-test-15", "doc": "How to add multiple columns to pandas dataframe in one assignment?", "code": "df[[new1, new2]] = ...df[new1] = ...import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({\n    'col_1': [0, 1, 2, 3],\n    'col_2': [4, 5, 6, 7]\n})\ndf['column_new_1'], df['column_new_2'], df['column_new_3'] = [np.nan, 'dogs', 3]\nDataFramedf[['column_new_1', 'column_new_2', 'column_new_3']] = pd.DataFrame([[np.nan, 'dogs', 3]], index=df.index)\ndf = pd.concat(\n    [\n        df,\n        pd.DataFrame(\n            [[np.nan, 'dogs', 3]], \n            index=df.index, \n            columns=['column_new_1', 'column_new_2', 'column_new_3']\n        )\n    ], axis=1\n)\njoinjoindf = df.join(pd.DataFrame(\n    [[np.nan, 'dogs', 3]], \n    index=df.index, \n    columns=['column_new_1', 'column_new_2', 'column_new_3']\n))\ndf = df.join(pd.DataFrame(\n    {\n        'column_new_1': np.nan,\n        'column_new_2': 'dogs',\n        'column_new_3': 3\n    }, index=df.index\n))\n.assign()df = df.assign(column_new_1=np.nan, column_new_2='dogs', column_new_3=3)\nnew_cols = ['column_new_1', 'column_new_2', 'column_new_3']\nnew_vals = [np.nan, 'dogs', 3]\ndf = df.reindex(columns=df.columns.tolist() + new_cols)   # add empty cols\ndf[new_cols] = new_vals  # multi-column assignment works for existing cols\ndf['column_new_1'] = np.nan\ndf['column_new_2'] = 'dogs'\ndf['column_new_3'] = 3\n"}, {"idx": "webquery-test-16", "doc": "How to print a percentage value in python?", "code": "format&gt;&gt;&gt; print \"{0:.0%}\".format(1./3)\n33%\n__future__&gt;&gt;&gt; from __future__ import division\n&gt;&gt;&gt; 1 / 3\n0.3333333333333333\n\n# The above 33% example would could now be written without the explicit\n# float conversion:\n&gt;&gt;&gt; print \"{0:.0f}%\".format(1/3 * 100)\n33%\n\n# Or even shorter using the format mini language:\n&gt;&gt;&gt; print \"{:.0%}\".format(1/3)\n33%\n"}, {"idx": "webquery-test-1", "doc": "np.mean() vs np.average() in Python NumPy?", "code": "try:\n    mean = a.mean\nexcept AttributeError:\n    return _wrapit(a, 'mean', axis, dtype, out)\nreturn mean(axis, dtype, out)\n...\nif weights is None :\n    avg = a.mean(axis)\n    scl = avg.dtype.type(a.size/avg.size)\nelse:\n    #code that does weighted mean here\n\nif returned: #returned is another optional argument\n    scl = np.multiply(avg, 0) + scl\n    return avg, scl\nelse:\n    return avg\n...\n"}, {"idx": "webquery-test-2", "doc": "From list of integers, get number closest to a given value", "code": "min()&gt;&gt;&gt; min(myList, key=lambda x:abs(x-myNumber))\n4\n{1: \"a\", 2: \"b\"}"}, {"idx": "webquery-test-3", "doc": "Merge PDF files", "code": "PdfMergerappendfrom PyPDF2 import PdfMerger\n\npdfs = ['file1.pdf', 'file2.pdf', 'file3.pdf', 'file4.pdf']\n\nmerger = PdfMerger()\n\nfor pdf in pdfs:\n    merger.append(pdf)\n\nmerger.write(\"result.pdf\")\nmerger.close()\nmergemergemergemergemerger.merge(2, pdf)\npagespagespagespagespagesmerger.append(pdf, pages=(0, 3))    # first 3 pages\nmerger.append(pdf, pages=(0, 6, 2)) # pages 1,3, 5\nIndexErrorPdfFileMergerPdfFileMergerPdfFileMergerpdfcatpython -m fitz join -o result.pdf file1.pdf file2.pdf file3.pdf\nimport fitz\n\nresult = fitz.open()\n\nfor pdf in ['file1.pdf', 'file2.pdf', 'file3.pdf']:\n    with fitz.open(pdf) as mfile:\n        result.insertPDF(mfile)\n    \nresult.save(\"result.pdf\")\n"}, {"idx": "webquery-test-4", "doc": "Initialise a list to a specific length in Python", "code": "[0]*10dictdictdictdictdict"}, {"idx": "webquery-test-5", "doc": "How to pass arguments to a Button command in Tkinter?", "code": "lambdasbutton = Tk.Button(master=frame, text='press', command= lambda: action(someNumber))\n"}, {"idx": "webquery-test-6", "doc": "How to join two generators in Python?", "code": "itertools.chain()def chain(*iterables):\n    for it in iterables:\n        for element in it:\n            yield element\nfrom itertools import chain\n\ng = (c for c in 'ABC')  # Dummy generator, just for example\nc = chain(g, 'DEF')  # Chain the generator and a string\nfor item in c:\n    print(item)\nA\nB\nC\nD\nE\nF\n"}, {"idx": "webquery-test-7", "doc": "Rename Pandas DataFrame Index", "code": "renamedf.index.names = ['Date']\nIndexIndexIn [1]: df = pd.DataFrame([[1, 2, 3], [4, 5 ,6]], columns=list('ABC'))\n\nIn [2]: df\nOut[2]: \n   A  B  C\n0  1  2  3\n1  4  5  6\n\nIn [3]: df1 = df.set_index('A')\n\nIn [4]: df1\nOut[4]: \n   B  C\nA      \n1  2  3\n4  5  6\nIn [5]: df1.rename(index={1: 'a'})\nOut[5]: \n   B  C\nA      \na  2  3\n4  5  6\n\nIn [6]: df1.rename(columns={'B': 'BB'})\nOut[6]: \n   BB  C\nA       \n1   2  3\n4   5  6\nIn [7]: df1.index.names = ['index']\n        df1.columns.names = ['column']\nIn [8]: df1\nOut[8]: \ncolumn  B  C\nindex       \n1       2  3\n4       5  6\n"}, {"idx": "webquery-test-8", "doc": "Print all day-dates between two dates", "code": "from datetime import date, timedelta\n\nstart_date = date(2008, 8, 15) \nend_date = date(2008, 9, 15)    # perhaps date.now()\n\ndelta = end_date - start_date   # returns timedelta\n\nfor i in range(delta.days + 1):\n    day = start_date + timedelta(days=i)\n    print(day)\n2008-08-15\n2008-08-16\n...\n2008-09-13\n2008-09-14\n2008-09-15\n"}, {"idx": "webquery-test-9", "doc": "AttributeError: 'module' object has no attribute", "code": "# In b.py:\ndef cause_a_to_do_something():\n    import a\n    a.do_something()\nimport bcause_a_to_do_something()cause_a_to_do_something()"}, {"idx": "webquery-test-10", "doc": "sqlalchemy unique across multiple columns", "code": "Column__table_args__# version1: table definition\nmytable = Table('mytable', meta,\n    # ...\n    Column('customer_id', Integer, ForeignKey('customers.customer_id')),\n    Column('location_code', Unicode(10)),\n\n    UniqueConstraint('customer_id', 'location_code', name='uix_1')\n    )\n# or the index, which will ensure uniqueness as well\nIndex('myindex', mytable.c.customer_id, mytable.c.location_code, unique=True)\n\n\n# version2: declarative\nclass Location(Base):\n    __tablename__ = 'locations'\n    id = Column(Integer, primary_key = True)\n    customer_id = Column(Integer, ForeignKey('customers.customer_id'), nullable=False)\n    location_code = Column(Unicode(10), nullable=False)\n    __table_args__ = (UniqueConstraint('customer_id', 'location_code', name='_customer_location_uc'),\n                     )\n"}, {"idx": "webquery-test-11", "doc": "Using Sphinx with Markdown instead of reST", "code": "myst-parsermyst-parsermyst-parser# simply add the extension to your list of extensions\nextensions = ['myst_parser']\n\nsource_suffix = ['.rst', '.md']\n"}, {"idx": "webquery-test-12", "doc": "Why can a function modify some arguments as perceived by the caller, but not others?", "code": "def f(n, x): # these `n`, `x` have nothing to do with `n` and `x` from main()\n    n = 2    # put `n` label on `2` balloon\n    x.append(4) # call `append` method of whatever object `x` is referring to.\n    print('In f():', n, x)\n    x = []   # put `x` label on `[]` ballon\n    # x = [] has no effect on the original list that is passed into the function\n"}, {"idx": "webquery-test-13", "doc": "Type hint for a file or file-like object?", "code": "typing.TextIOtyping.TextIOtyping.IOtyping.IOtyping.IOtyping.IOtyping.IOtyping.IOtyping.IO"}, {"idx": "webquery-test-14", "doc": "How to delete last item in list?", "code": "record = record[:-1]\ndel record[-1]\n"}, {"idx": "webquery-test-15", "doc": "Print all properties of a Python Class", "code": "vars()an = Animal()\nattrs = vars(an)\n# {'kids': 0, 'name': 'Dog', 'color': 'Spotted', 'age': 10, 'legs': 2, 'smell': 'Alot'}\n# now dump this in some way or another\nprint(', '.join(\"%s: %s\" % item for item in attrs.items()))\n"}, {"idx": "webquery-test-16", "doc": "How do I check if there are duplicates in a flat list?", "code": "set()&gt;&gt;&gt; your_list = ['one', 'two', 'one']\n&gt;&gt;&gt; len(your_list) != len(set(your_list))\nTrue\n"}, {"idx": "webquery-test-17", "doc": "Proxies with Python 'Requests' module", "code": "proxiesproxieshttp_proxy  = \"http://10.10.1.10:3128\"\nhttps_proxy = \"https://10.10.1.11:1080\"\nftp_proxy   = \"ftp://10.10.1.10:3128\"\n\nproxies = { \n              \"http\"  : http_proxy, \n              \"https\" : https_proxy, \n              \"ftp\"   : ftp_proxy\n            }\n\nr = requests.get(url, headers=headers, proxies=proxies)\nrequestsmethodmethodmethodHTTP_PROXYHTTP_PROXYHTTP_PROXYexport HTTP_PROXY=10.10.1.10:3128\nexport HTTPS_PROXY=10.10.1.11:1080\nexport FTP_PROXY=10.10.1.10:3128\nset http_proxy=10.10.1.10:3128\nset https_proxy=10.10.1.11:1080\nset ftp_proxy=10.10.1.10:3128\n"}, {"idx": "webquery-test-18", "doc": "pandas GroupBy columns with NaN (missing) values", "code": "dropna=Falsepd.__version__\n# '1.1.0.dev0+2004.g8d10bfb6f'\n\n# Example from the docs\ndf\n\n   a    b  c\n0  1  2.0  3\n1  1  NaN  4\n2  2  1.0  3\n3  1  2.0  2\n\n# without NA (the default)\ndf.groupby('b').sum()\n\n     a  c\nb        \n1.0  2  3\n2.0  2  5\n# with NA\ndf.groupby('b', <b>dropna=False</b>).sum()\n\n     a  c\nb        \n1.0  2  3\n2.0  2  5\nNaN  1  4\n"}, {"idx": "webquery-test-19", "doc": "How to run an .ipynb Jupyter Notebook from terminal?", "code": "--executejupyter nbconvert --execute &lt;notebook&gt;\n--to notebookjupyter nbconvert --execute --to notebook &lt;notebook&gt;\njupyter nbconvert --execute --to notebook --inplace &lt;notebook&gt;\nalias nbx=\"jupyter nbconvert --execute --to notebook\"\nnbx [--inplace] &lt;notebook&gt;\n"}, {"idx": "webquery-test-1", "doc": "Stop pip from failing on single package when installing with requirements.txt", "code": "pip installcat requirements.txt | xargs -n 1 pip install\n-a"}, {"idx": "webquery-test-2", "doc": "Mocking python function based on input arguments", "code": "side_effect_funcside_effect_funcside_effect_func"}, {"idx": "webquery-test-3", "doc": "RuntimeError on windows trying python multiprocessing", "code": "if __name__ == '__main__':testMain.pyimport parallelTestModule\n\nif __name__ == '__main__':    \n    extractor = parallelTestModule.ParallelExtractor()\n    extractor.runInParallel(numProcesses=2, numThreads=4)\n"}, {"idx": "webquery-test-4", "doc": "pip: force install ignoring dependencies", "code": "--no-dependenciespip install -h--no-deps, --no-dependencies\n                        Ignore package dependencies\n"}, {"idx": "webquery-test-5", "doc": "Applying function with multiple arguments to create a new pandas column", "code": "&gt;&gt;&gt; def fxy(x, y):\n...     return x * y\n\n&gt;&gt;&gt; df['newcolumn'] = df.apply(lambda x: fxy(x['A'], x['B']), axis=1)\n&gt;&gt;&gt; df\n    A   B  newcolumn\n0  10  20        200\n1  20  30        600\n2  30  10        300\n"}, {"idx": "webquery-test-6", "doc": "Changing a specific column name in pandas DataFrame", "code": "In [27]: df=df.rename(columns = {'two':'new_name'})\n\nIn [28]: df\nOut[28]: \n  one three  new_name\n0    1     a         9\n1    2     b         8\n2    3     c         7\n3    4     d         6\n4    5     e         5\nrename"}, {"idx": "webquery-test-7", "doc": "ImportError: No module named 'django.core.urlresolvers'", "code": "django.core.urlresolversdjango.core.urlresolversfrom django.urls import reverse\ndjango.core.urlresolvers"}, {"idx": "webquery-test-8", "doc": "Is it possible to use argsort in descending order?", "code": "n(-avgDists).argsort()[:n]\nnavgDists.argsort()[::-1][:n]\nargsortargsortargsort&gt;&gt;&gt; avgDists = np.random.rand(100)\n&gt;&gt;&gt; n = 30\n&gt;&gt;&gt; timeit (-avgDists).argsort()[:n]\n1.93 \u00b5s \u00b1 6.68 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n&gt;&gt;&gt; timeit avgDists.argsort()[::-1][:n]\n1.64 \u00b5s \u00b1 3.39 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n&gt;&gt;&gt; timeit avgDists.argsort()[-n:][::-1]\n1.64 \u00b5s \u00b1 3.66 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n&gt;&gt;&gt; avgDists = np.random.rand(1000)\n&gt;&gt;&gt; n = 300\n&gt;&gt;&gt; timeit (-avgDists).argsort()[:n]\n21.9 \u00b5s \u00b1 51.2 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n&gt;&gt;&gt; timeit avgDists.argsort()[::-1][:n]\n21.7 \u00b5s \u00b1 33.3 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n&gt;&gt;&gt; timeit avgDists.argsort()[-n:][::-1]\n21.9 \u00b5s \u00b1 37.1 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n"}, {"idx": "webquery-test-9", "doc": "How to convert a NumPy array to PIL image applying matplotlib colormap", "code": "myarraymyarraymyarraymyarraymyarraymyarrayfrom PIL import Image\nfrom matplotlib import cm\nim = Image.fromarray(np.uint8(cm.gist_earth(myarray)*255))\nplt.savefig()im.save()"}, {"idx": "webquery-test-10", "doc": "warning about too many open figures", "code": ".clf.clfpyplotimport matplotlib.pyplot as plt\nplt.cla()plt.clf()plt.close()plt.close()del figdel figplt.close(fig)"}, {"idx": "webquery-test-11", "doc": "How to set xlim and ylim for a subplot", "code": "plt.*plt.*plt.subplotplt.subplotimport matplotlib.pyplot as plt\n\nax1 = plt.subplot(131)\nax1.scatter([1, 2], [3, 4])\nax1.set_xlim([0, 5])\nax1.set_ylim([0, 5])\n\n\nax2 = plt.subplot(132)\nax2.scatter([1, 2],[3, 4])\nax2.set_xlim([0, 5])\nax2.set_ylim([0, 5])\nimport matplotlib.pyplot as plt\n\nDATA_x = ([1, 2],\n          [2, 3],\n          [3, 4])\n\nDATA_y = DATA_x[::-1]\n\nXLIMS = [[0, 10]] * 3\nYLIMS = [[0, 10]] * 3\n\nfor j, (x, y, xlim, ylim) in enumerate(zip(DATA_x, DATA_y, XLIMS, YLIMS)):\n    ax = plt.subplot(1, 3, j + 1)\n    ax.scatter(x, y)\n    ax.set_xlim(xlim)\n    ax.set_ylim(ylim)\n"}, {"idx": "webquery-test-12", "doc": "Logging uncaught exceptions in Python", "code": "import sys\nimport logging\nlogger = logging.getLogger(__name__)\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\ndef handle_exception(exc_type, exc_value, exc_traceback):\n    if issubclass(exc_type, KeyboardInterrupt):\n        sys.__excepthook__(exc_type, exc_value, exc_traceback)\n        return\n\n    logger.error(\"Uncaught exception\", exc_info=(exc_type, exc_value, exc_traceback))\n\nsys.excepthook = handle_exception\n\nif __name__ == \"__main__\":\n    raise RuntimeError(\"Test unhandled\")\n"}, {"idx": "webquery-test-13", "doc": "How can I use a conditional expression (expression with if and else) in a list comprehension?", "code": "x if y else z[ x if x%2 else x*100 for x in range(1, 10) ]\n[ EXP for x in seq if COND ]\n[ EXP for x in seq ]\nif-else"}, {"idx": "webquery-test-14", "doc": "What are some good Python ORM solutions?", "code": "import datetime\nfrom peewee import *\n\nclass Blog(Model):\n    name = CharField()\n\nclass Entry(Model):\n    blog = ForeignKeyField(Blog)\n    title = CharField()\n    body = TextField()\n    pub_date = DateTimeField(default=datetime.datetime.now)\n\n# query it like django\nEntry.filter(blog__name='Some great blog')\n\n# or programmatically for finer-grained control\nEntry.select().join(Blog).where(Blog.name == 'Some awesome blog')\n"}, {"idx": "webquery-test-15", "doc": "assertEquals vs. assertEqual in python", "code": "assertEqualassertEqualassertEqual# Synonyms for assertion methods\nassertEqual = assertEquals = failUnlessEqual\nfailUnlessEqualfailUnlessEqual# Synonyms for assertion methods\n# The plurals are undocumented.  Keep them that way to discourage use.\n# Do not add more.  Do not remove.\n# Going through a deprecation cycle on these would annoy many people.\nassertEqual"}, {"idx": "webquery-test-16", "doc": "matplotlib Legend Markers Only Once", "code": "legend(numpoints=1)\nlegend.numpoints     : 1      # the number of points in the legend line\n"}, {"idx": "webquery-test-17", "doc": "Pandas dataframe get first row of each group", "code": "&gt;&gt;&gt; df.groupby('id').first()\n     value\nid        \n1    first\n2    first\n3    first\n4   second\n5    first\n6    first\n7   fourth\nid&gt;&gt;&gt; df.groupby('id').first().reset_index()\n   id   value\n0   1   first\n1   2   first\n2   3   first\n3   4  second\n4   5   first\n5   6   first\n6   7  fourth\n&gt;&gt;&gt; df.groupby('id').head(2).reset_index(drop=True)\n    id   value\n0    1   first\n1    1  second\n2    2   first\n3    2  second\n4    3   first\n5    3   third\n6    4  second\n7    4   fifth\n8    5   first\n9    6   first\n10   6  second\n11   7  fourth\n12   7   fifth\n"}, {"idx": "webquery-test-18", "doc": "How to do a less than or equal to filter in Django queryset?", "code": "User.objects.filter(userprofile__level__lte=0)\nUser.objects.filter(userprofile__level__gte=0)\nltlt"}, {"idx": "webquery-test-19", "doc": "Queue.Queue vs. collections.deque", "code": "Queue.QueueQueue.QueueQueue.QueueQueue.QueueQueue.QueueQueue.QueueQueue.QueueQueue.QueueQueue.QueueQueue.QueueQueue.QueueQueue.QueueQueue.Queue"}, {"idx": "webquery-test-1", "doc": "Pythonic way to check if a file exists?", "code": "os.path.isfile(path)TrueTrueTrue"}, {"idx": "webquery-test-2", "doc": "Scoping in Python 'for' loops", "code": "global"}, {"idx": "webquery-test-3", "doc": "Common xlabel/ylabel for matplotlib subplots", "code": "import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(nrows=3, ncols=3, sharex=True, sharey=True, figsize=(6, 6))\n\nfig.text(0.5, 0.04, 'common X', ha='center')\nfig.text(0.04, 0.5, 'common Y', va='center', rotation='vertical')\n"}, {"idx": "webquery-test-4", "doc": "import module from string variable", "code": "__import__i = __import__('matplotlib.text')\ni = __import__('matplotlib.text', fromlist=[''])\niiimportlibimport importlib\n\ni = importlib.import_module(\"matplotlib.text\")\n./feature/email.py./feature/email.py./feature/email.py./feature/email.py"}, {"idx": "webquery-test-5", "doc": "Concatenate a NumPy array to another NumPy array", "code": "In [1]: import numpy as np\n\nIn [2]: a = np.array([[1, 2, 3], [4, 5, 6]])\n\nIn [3]: b = np.array([[9, 8, 7], [6, 5, 4]])\n\nIn [4]: np.concatenate((a, b))\nOut[4]: \narray([[1, 2, 3],\n       [4, 5, 6],\n       [9, 8, 7],\n       [6, 5, 4]])\nIn [1]: a = np.array([1, 2, 3])\n\nIn [2]: b = np.array([4, 5, 6])\n\nIn [3]: np.vstack((a, b))\nOut[3]: \narray([[1, 2, 3],\n       [4, 5, 6]])\n"}, {"idx": "webquery-test-6", "doc": "Python creating a dictionary of lists", "code": "&gt;&gt;&gt; from collections import defaultdict\n&gt;&gt;&gt; d = defaultdict(list)\n&gt;&gt;&gt; a = ['1', '2']\n&gt;&gt;&gt; for i in a:\n...   for j in range(int(i), int(i) + 2):\n...     d[j].append(i)\n...\n&gt;&gt;&gt; d\ndefaultdict(&lt;type 'list'&gt;, {1: ['1'], 2: ['1', '2'], 3: ['2']})\n&gt;&gt;&gt; d.items()\n[(1, ['1']), (2, ['1', '2']), (3, ['2'])]\n"}, {"idx": "webquery-test-7", "doc": "sklearn error ValueError: Input contains NaN, infinity or a value too large for dtype('float64')", "code": "np.isnan(mat.any()) #and gets False\nnp.isfinite(mat.all()) #and gets True\nnp.any(np.isnan(mat))\nnp.all(np.isfinite(mat))\nany"}, {"idx": "webquery-test-8", "doc": "What is the difference between pyenv, virtualenv, anaconda?", "code": "pippippippippippippippippippippyenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvvirtualenvconda install &lt;packagename&gt;conda install &lt;packagename&gt;conda install &lt;packagename&gt;conda install &lt;packagename&gt;conda install &lt;packagename&gt;"}, {"idx": "webquery-test-9", "doc": "Replacing Pandas or Numpy Nan with a None to use with MysqlDB", "code": "wheredf1 = df.where(pd.notnull(df), None)\nobjectIn [1]: df = pd.DataFrame([1, np.nan])\n\nIn [2]: df\nOut[2]: \n    0\n0   1\n1 NaN\n\nIn [3]: df1 = df.where(pd.notnull(df), None)\n\nIn [4]: df1\nOut[4]: \n      0\n0     1\n1  None\ndtypedtypedtypedf1 = df.astype(object).replace(np.nan, 'None')\nreplacereplace"}, {"idx": "webquery-test-10", "doc": "Different ways of clearing lists", "code": "&gt;&gt;&gt; a = [1, 2, 3]\n&gt;&gt;&gt; b = a\n&gt;&gt;&gt; a = []\n&gt;&gt;&gt; print(a)\n[]\n&gt;&gt;&gt; print(b)\n[1, 2, 3]\n&gt;&gt;&gt; a = [1, 2, 3]\n&gt;&gt;&gt; b = a\n&gt;&gt;&gt; del a[:]      # equivalent to   del a[0:len(a)]\n&gt;&gt;&gt; print(a)\n[]\n&gt;&gt;&gt; print(b)\n[]\n&gt;&gt;&gt; a is b\nTrue\n&gt;&gt;&gt; a[:] = []\n"}, {"idx": "webquery-test-11", "doc": "How to deep copy a list?", "code": "E0_copyE0_copyE0_copyE0_copycopy.deepcopy(...)deepcopy(x, memo=None, _nil=[])\n    Deep copy operation on arbitrary Python objects.\n&gt;&gt;&gt; a = [[1, 2, 3], [4, 5, 6]]\n&gt;&gt;&gt; b = list(a)\n&gt;&gt;&gt; a\n[[1, 2, 3], [4, 5, 6]]\n&gt;&gt;&gt; b\n[[1, 2, 3], [4, 5, 6]]\n&gt;&gt;&gt; a[0][1] = 10\n&gt;&gt;&gt; a\n[[1, 10, 3], [4, 5, 6]]\n&gt;&gt;&gt; b   # b changes too -&gt; Not a deepcopy.\n[[1, 10, 3], [4, 5, 6]]\ndeepcopy&gt;&gt;&gt; import copy\n&gt;&gt;&gt; b = copy.deepcopy(a)\n&gt;&gt;&gt; a\n[[1, 10, 3], [4, 5, 6]]\n&gt;&gt;&gt; b\n[[1, 10, 3], [4, 5, 6]]\n&gt;&gt;&gt; a[0][1] = 9\n&gt;&gt;&gt; a\n[[1, 9, 3], [4, 5, 6]]\n&gt;&gt;&gt; b    # b doesn't change -&gt; Deep Copy\n[[1, 10, 3], [4, 5, 6]]\nlist(...)list(...)list(...)"}, {"idx": "webquery-test-12", "doc": "How to preserve timezone when parsing date/time strings with strptime()?", "code": "&gt;&gt;&gt; from dateutil import parser\n&gt;&gt;&gt; parser.parse(\"Tue Jun 22 07:46:22 EST 2010\")\ndatetime.datetime(2010, 6, 22, 7, 46, 22, tzinfo=tzlocal())\n&gt;&gt;&gt; parser.parse(\"Fri, 11 Nov 2011 03:18:09 -0400\")\ndatetime.datetime(2011, 11, 11, 3, 18, 9, tzinfo=tzoffset(None, -14400))\n&gt;&gt;&gt; parser.parse(\"Sun\")\ndatetime.datetime(2011, 12, 18, 0, 0)\n&gt;&gt;&gt; parser.parse(\"10-11-08\")\ndatetime.datetime(2008, 10, 11, 0, 0)\nstrptime()"}, {"idx": "webquery-test-1", "doc": "How do I get python's pprint to return a string instead of printing?", "code": "&gt;&gt;&gt; import pprint\n&gt;&gt;&gt; people = [\n...     {\"first\": \"Brian\", \"last\": \"Kernighan\"}, \n...     {\"first\": \"Dennis\", \"last\": \"Richie\"},\n... ]\n&gt;&gt;&gt; pprint.pformat(people, indent=4)\n\"[   {   'first': 'Brian', 'last': 'Kernighan'},\\n    {   'first': 'Dennis', 'last': 'Richie'}]\"\n"}, {"idx": "webquery-test-2", "doc": "pass **kwargs argument to another function with **kwargs", "code": "kwargskwargsdict**"}, {"idx": "webquery-test-3", "doc": "How can I print variable and string on same line in Python?", "code": ",print(\"If there was a birth every 7 seconds, there would be: \", births, \"births\")\n,&gt;&gt;&gt; print(\"foo\", \"bar\", \"spam\")\nfoo bar spam\nprint(\"If there was a birth every 7 seconds, there would be: {} births\".format(births))\n&gt;&gt;&gt; print(\"{:d} {:03d} {:&gt;20f}\".format(1, 2, 1.1))\n1 002             1.100000\n  ^^^\n  0's padded to 2\n&gt;&gt;&gt; births = 4\n&gt;&gt;&gt; print(\"If there was a birth every 7 seconds, there would be: \", births, \"births\")\nIf there was a birth every 7 seconds, there would be:  4 births\n\n# formatting\n&gt;&gt;&gt; print(\"If there was a birth every 7 seconds, there would be: {} births\".format(births))\nIf there was a birth every 7 seconds, there would be: 4 births\n"}, {"idx": "webquery-test-4", "doc": "Create a .csv file with values from a Python list", "code": "import csv\n\nwith open(..., 'wb') as myfile:\n    wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)\n    wr.writerow(mylist)\nwbwbwith open(..., 'w', newline='') as myfile:\n     wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)\n     wr.writerow(mylist)\n"}, {"idx": "webquery-test-5", "doc": "Pandas get topmost n records within each group", "code": "df.groupby('id').head(2)\n       id  value\nid             \n1  0   1      1\n   1   1      2 \n2  3   2      1\n   4   2      2\n3  7   3      1\n4  8   4      1\ndf.groupby('id').head(2).reset_index(drop=True)\n    id  value\n0   1      1\n1   1      2\n2   2      1\n3   2      2\n4   3      1\n5   4      1\n"}, {"idx": "webquery-test-6", "doc": "Programmatically saving image to Django ImageField", "code": "from django.core.files import File  # you need this somewhere\nimport urllib\n\n\n# The following actually resides in a method of my model\n\nresult = urllib.urlretrieve(image_url) # image_url is a URL to an image\n\n# self.photo is the ImageField\nself.photo.save(\n    os.path.basename(self.url),\n    File(open(result[0], 'rb'))\n    )\n\nself.save()\nclass CachedImage(models.Model):\n    url = models.CharField(max_length=255, unique=True)\n    photo = models.ImageField(upload_to=photo_path, blank=True)\n\n    def cache(self):\n        \"\"\"Store image locally if we have a URL\"\"\"\n\n        if self.url and not self.photo:\n            result = urllib.urlretrieve(self.url)\n            self.photo.save(\n                    os.path.basename(self.url),\n                    File(open(result[0], 'rb'))\n                    )\n            self.save()\n"}, {"idx": "webquery-test-7", "doc": "Getting the docstring from a function", "code": "help(my_func)\nmy_func.__doc__\n"}, {"idx": "webquery-test-8", "doc": "How to get exit code when using Python subprocess communicate method?", "code": "Popen.communicatePopen.communicatePopen.returncode \n  The child return code, set by poll() and wait() (and indirectly by communicate()). \n  A None value indicates that the process hasn\u2019t terminated yet.\n\n  A negative value -N indicates that the child was terminated by signal N (Unix only).\nimport subprocess as sp\nchild = sp.Popen(openRTSP + opts.split(), stdout=sp.PIPE)\nstreamdata = child.communicate()[0]\nrc = child.returncode\nwait"}, {"idx": "webquery-test-9", "doc": "Round to 5 (or other number) in Python", "code": "def myround(x, base=5):\n    return base * round(x/base)\nround(x/5)basefloat(x)float(x)float(x)float(x)def myround(x, base=5):\n    return int(base * round(float(x)/base))\n"}, {"idx": "webquery-test-10", "doc": "List of unique dictionaries", "code": "idid&gt;&gt;&gt; L=[\n... {'id':1,'name':'john', 'age':34},\n... {'id':1,'name':'john', 'age':34},\n... {'id':2,'name':'hanna', 'age':30},\n... ]\n&gt;&gt;&gt; {v['id']:v for v in L}.values()\n[{'age': 34, 'id': 1, 'name': 'john'}, {'age': 30, 'id': 2, 'name': 'hanna'}]\n&gt;&gt;&gt; L=[\n... {'id':1,'name':'john', 'age':34},\n... {'id':1,'name':'john', 'age':34},\n... {'id':2,'name':'hanna', 'age':30},\n... ] \n&gt;&gt;&gt; list({v['id']:v for v in L}.values())\n[{'age': 34, 'id': 1, 'name': 'john'}, {'age': 30, 'id': 2, 'name': 'hanna'}]\n&gt;&gt;&gt; L=[\n... {'id':1,'name':'john', 'age':34},\n... {'id':1,'name':'john', 'age':34},\n... {'id':2,'name':'hanna', 'age':30},\n... ] \n&gt;&gt;&gt; dict((v['id'],v) for v in L).values()\n[{'age': 34, 'id': 1, 'name': 'john'}, {'age': 30, 'id': 2, 'name': 'hanna'}]\n"}, {"idx": "webquery-test-11", "doc": "Apply vs transform on a group object", "code": "applyapplytransformtransformapplyapplyapplyapplytransformtransformapplyapplyimport pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'State':['Texas', 'Texas', 'Florida', 'Florida'], \n                   'a':[4,5,1,3], 'b':[6,10,3,11]})\n\n     State  a   b\n0    Texas  4   6\n1    Texas  5  10\n2  Florida  1   3\n3  Florida  3  11\ndef inspect(x):\n    print(type(x))\n    raise\napplyapplydf.groupby('State').apply(inspect)\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRuntimeError\ninspecttransformdf.groupby('State').transform(inspect)\n&lt;class 'pandas.core.series.Series'&gt;\n&lt;class 'pandas.core.series.Series'&gt;\nRuntimeError\ntransformtransformtransformtransformdef subtract_two(x):\n    return x['a'] - x['b']\n\ndf.groupby('State').transform(subtract_two)\nKeyError: ('a', 'occurred at index a')\naadf.groupby('State').apply(subtract_two)\n\nState     \nFlorida  2   -2\n         3   -8\nTexas    0   -2\n         1   -5\ndtype: int64\nprintprintprintfrom IPython.display import display\ndef subtract_two(x):\n    display(x)\n    return x['a'] - x['b']\ntransformtransformdef return_three(x):\n    return np.array([1, 2, 3])\n\ndf.groupby('State').transform(return_three)\nValueError: transform must return a scalar value for each group\ndef rand_group_len(x):\n    return np.random.rand(len(x))\n\ndf.groupby('State').transform(rand_group_len)\n\n          a         b\n0  0.962070  0.151440\n1  0.440956  0.782176\n2  0.642218  0.483257\n3  0.056047  0.238208\ntransformtransformdef group_sum(x):\n    return x.sum()\n\ndf.groupby('State').transform(group_sum)\n\n   a   b\n0  9  16\n1  9  16\n2  4  14\n3  4  14\n"}, {"idx": "webquery-test-12", "doc": "Creating Threads in python", "code": "Threadfrom threading import Thread\nfrom time import sleep\n\ndef threaded_function(arg):\n    for i in range(arg):\n        print(\"running\")\n        sleep(1)\n\n\nif __name__ == \"__main__\":\n    thread = Thread(target = threaded_function, args = (10, ))\n    thread.start()\n    thread.join()\n    print(\"thread finished...exiting\")\n"}, {"idx": "webquery-test-13", "doc": "Parsing HTML using Python", "code": "try: \n    from BeautifulSoup import BeautifulSoup\nexcept ImportError:\n    from bs4 import BeautifulSoup\nhtml = #the HTML code you've written above\nparsed_html = BeautifulSoup(html)\nprint(parsed_html.body.find('div', attrs={'class':'container'}).text)\n"}, {"idx": "webquery-test-14", "doc": "Identifying the dependency relationship for python packages installed with pip", "code": "$ pipdeptree\nLookupy==0.1\nwsgiref==0.1.2\nargparse==1.2.1\npsycopg2==2.5.2\nFlask-Script==0.6.6\n  - Flask [installed: 0.10.1]\n    - Werkzeug [required: &gt;=0.7, installed: 0.9.4]\n    - Jinja2 [required: &gt;=2.4, installed: 2.7.2]\n      - MarkupSafe [installed: 0.18]\n    - itsdangerous [required: &gt;=0.21, installed: 0.23]\nalembic==0.6.2\n  - SQLAlchemy [required: &gt;=0.7.3, installed: 0.9.1]\n  - Mako [installed: 0.9.1]\n    - MarkupSafe [required: &gt;=0.9.2, installed: 0.18]\nipython==2.0.0\nslugify==0.0.1\nredis==2.9.1\npip install pipdeptree\n-r-r$ pipdeptree -r -p Werkzeug\nWerkzeug==0.11.15\n  - Flask==0.12 [requires: Werkzeug&gt;=0.7]\n"}, {"idx": "webquery-test-15", "doc": "How to modify list entries during for loop?", "code": "a = ['a',' b', 'c ', ' d ']\n\nfor i, s in enumerate(a):\n    a[i] = s.strip()\n\nprint(a) # -&gt; ['a', 'b', 'c', 'd']\na[:] = [s.strip() for s in a]\nlistb = ['a', ' b', 'c ', ' d ']\n\nfor i, s in enumerate(b):\n    if s.strip() != b[i]:  # leading or trailing whitespace?\n        del b[i]\n\nprint(b)  # -&gt; ['a', 'c ']  # WRONG!\nb = ['a',' b', 'c ', ' d ']\n\nb[:] = [entry for entry in b if entry.strip() == entry]\n\nprint(b)  # -&gt; ['a']  # CORRECT\n"}, {"idx": "webquery-test-16", "doc": "How to convert comma-delimited string to list in Python?", "code": "&gt;&gt;&gt; my_string = 'A,B,C,D,E'\n&gt;&gt;&gt; my_list = my_string.split(\",\")\n&gt;&gt;&gt; print my_list\n['A', 'B', 'C', 'D', 'E']\n&gt;&gt;&gt; print tuple(my_list)\n('A', 'B', 'C', 'D', 'E')\n&gt;&gt;&gt; my_list.append('F')\n&gt;&gt;&gt; print my_list\n['A', 'B', 'C', 'D', 'E', 'F']\n"}, {"idx": "webquery-test-17", "doc": "Split a string by a delimiter in python", "code": "str.splitstr.split&gt;&gt;&gt; \"MATCHES__STRING\".split(\"__\")\n['MATCHES', 'STRING']\n"}, {"idx": "webquery-test-18", "doc": "Getting individual colors from a color map in matplotlib", "code": "cmapimport matplotlib\n\ncmap = matplotlib.cm.get_cmap('Spectral')\n\nrgba = cmap(0.5)\nprint(rgba) # (0.99807766255210428, 0.99923106502084169, 0.74602077638401709, 1.0)\ncmap.set_under()cmap.set_under()np.nannp.nannp.nan[0.0, 1.0][0.0, 1.0][0.0, 1.0][0.0, 1.0]import matplotlib\n\nnorm = matplotlib.colors.Normalize(vmin=10.0, vmax=20.0)\n\nprint(norm(15.0)) # 0.5\n"}, {"idx": "webquery-test-1", "doc": "How do I get current URL in Selenium Webdriver 2 Python?", "code": "print browser.current_url\nprint(driver.current_url)\n"}, {"idx": "webquery-test-2", "doc": "Multiple aggregations of the same column using pandas GroupBy.agg()", "code": "df.groupby('dummy').agg(\n    Mean=('returns', np.mean),\n    Sum=('returns', np.sum))\npandasIn [20]: df.groupby(\"dummy\").agg({\"returns\": [np.mean, np.sum]})\nOut[20]:         \n           mean       sum\ndummy                    \n1      0.036901  0.369012\nIn [21]: df.groupby('dummy').agg({'returns':\n                                  {'Mean': np.mean, 'Sum': np.sum}})\nOut[21]: \n        returns          \n           Mean       Sum\ndummy                    \n1      0.036901  0.369012\n"}, {"idx": "webquery-test-3", "doc": "How to create a dictionary of two pandas DataFrame columns", "code": "In [9]: pd.Series(df.Letter.values,index=df.Position).to_dict()\nOut[9]: {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e'}\nIn [6]: df = pd.DataFrame(randint(0,10,10000).reshape(5000,2),columns=list('AB'))\n\nIn [7]: %timeit dict(zip(df.A,df.B))\n1000 loops, best of 3: 1.27 ms per loop\n\nIn [8]: %timeit pd.Series(df.A.values,index=df.B).to_dict()\n1000 loops, best of 3: 987 us per loop\n"}, {"idx": "webquery-test-4", "doc": "Wrap long lines in Python", "code": "def fun():\n    print(('{0} Here is a really long '\n           'sentence with {1}').format(3, 5))\n"}, {"idx": "webquery-test-5", "doc": "SQLAlchemy: engine, connection and session difference", "code": "SELECT * FROM tablenameSELECTSELECTSELECT.execute().execute().execute().execute().execute().execute().execute()"}, {"idx": "webquery-test-6", "doc": "In Python, how do I indicate I'm overriding a method?", "code": "def overrides(interface_class):\n    def overrider(method):\n        assert(method.__name__ in dir(interface_class))\n        return method\n    return overrider\nclass MySuperInterface(object):\n    def my_method(self):\n        print 'hello world!'\n\n\nclass ConcreteImplementer(MySuperInterface):\n    @overrides(MySuperInterface)\n    def my_method(self):\n        print 'hello kitty!'\nclass ConcreteFaultyImplementer(MySuperInterface):\n    @overrides(MySuperInterface)\n    def your_method(self):\n        print 'bye bye!'\n\n&gt;&gt; AssertionError!!!!!!!\n"}, {"idx": "webquery-test-7", "doc": "Is there a difference between using a dict literal and a dict constructor?", "code": "dictdictdictdictdict"}, {"idx": "webquery-test-8", "doc": "What's the purpose of Django setting \u2018SECRET_KEY\u2019?", "code": "&gt;grep -Inr SECRET_KEY *\nconf/global_settings.py:255:SECRET_KEY = ''\nconf/project_template/settings.py:61:SECRET_KEY = ''\ncontrib/auth/tokens.py:54:        hash = sha_constructor(settings.SECRET_KEY + unicode(user.id) +\ncontrib/comments/forms.py:86:        info = (content_type, object_pk, timestamp, settings.SECRET_KEY)\ncontrib/formtools/utils.py:15:    order, pickles the result with the SECRET_KEY setting, then takes an md5\ncontrib/formtools/utils.py:32:    data.append(settings.SECRET_KEY)\ncontrib/messages/storage/cookie.py:112:        SECRET_KEY, modified to make it unique for the present purpose.\ncontrib/messages/storage/cookie.py:114:        key = 'django.contrib.messages' + settings.SECRET_KEY\ncontrib/sessions/backends/base.py:89:        pickled_md5 = md5_constructor(pickled + settings.SECRET_KEY).hexdigest()\ncontrib/sessions/backends/base.py:95:        if md5_constructor(pickled + settings.SECRET_KEY).hexdigest() != tamper_check:\ncontrib/sessions/backends/base.py:134:        # Use settings.SECRET_KEY as added salt.\ncontrib/sessions/backends/base.py:143:                       settings.SECRET_KEY)).hexdigest()\ncontrib/sessions/models.py:16:        pickled_md5 = md5_constructor(pickled + settings.SECRET_KEY).hexdigest()\ncontrib/sessions/models.py:59:        if md5_constructor(pickled + settings.SECRET_KEY).hexdigest() != tamper_check:\ncore/management/commands/startproject.py:32:        # Create a random SECRET_KEY hash, and put it in the main settings.\ncore/management/commands/startproject.py:37:        settings_contents = re.sub(r\"(?&lt;=SECRET_KEY = ')'\", secret_key + \"'\", settings_contents)\nmiddleware/csrf.py:38:                % (randrange(0, _MAX_CSRF_KEY), settings.SECRET_KEY)).hexdigest()\nmiddleware/csrf.py:41:    return md5_constructor(settings.SECRET_KEY + session_id).hexdigest()\n"}, {"idx": "webquery-test-9", "doc": "Convert string to Python class object?", "code": "import sys\n\ndef str_to_class(classname):\n    return getattr(sys.modules[__name__], classname)\n"}, {"idx": "webquery-test-10", "doc": "Is there a library function for Root mean square error (RMSE) in python?", "code": "sklearn.metricssklearn.metricssklearn.metricssklearn.metricssklearn.metricssklearn.metricsfrom sklearn.metrics import mean_squared_error\n\nrms = mean_squared_error(y_actual, y_predicted, squared=False)\nsklearn.metricssklearn.metricsfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\nrms = sqrt(mean_squared_error(y_actual, y_predicted))\n"}, {"idx": "webquery-test-11", "doc": "Find column whose name contains a specific string", "code": "DataFrame.columnsimport pandas as pd\n\ndata = {'spike-2': [1,2,3], 'hey spke': [4,5,6], 'spiked-in': [7,8,9], 'no': [10,11,12]}\ndf = pd.DataFrame(data)\n\nspike_cols = [col for col in df.columns if 'spike' in col]\nprint(list(df.columns))\nprint(spike_cols)\n['hey spke', 'no', 'spike-2', 'spiked-in']\n['spike-2', 'spiked-in']\ndf.columnsdf.columnsdf.columnsdf.columnsdf.columnsdf.columnsdf2 = df.filter(regex='spike')\nprint(df2)\n   spike-2  spiked-in\n0        1          7\n1        2          8\n2        3          9\n"}, {"idx": "webquery-test-12", "doc": "Drop all duplicate rows across multiple columns in Python Pandas", "code": "import pandas as pd\ndf = pd.DataFrame({\"A\":[\"foo\", \"foo\", \"foo\", \"bar\"], \"B\":[0,1,1,1], \"C\":[\"A\",\"A\",\"B\",\"A\"]})\ndf.drop_duplicates(subset=['A', 'C'], keep=False)\n"}, {"idx": "webquery-test-13", "doc": "Writing a Python list of lists to a csv file", "code": "import csv\n\nwith open(\"output.csv\", \"wb\") as f:\n    writer = csv.writer(f)\n    writer.writerows(a)\naaimport csv\n\nwith open(\"out.csv\", \"w\", newline=\"\") as f:\n    writer = csv.writer(f)\n    writer.writerows(a)\n"}, {"idx": "webquery-test-14", "doc": "Why does Python code use len() function instead of a length method?", "code": "__len__()len()len()len()"}, {"idx": "webquery-test-15", "doc": "How to ignore deprecation warnings in Python", "code": "import warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \n"}, {"idx": "webquery-test-16", "doc": "Fatal error in launcher: Unable to create process using \"\"C:\\Program Files (x86)\\Python33\\python.exe\" \"C:\\Program Files (x86)\\Python33\\pip.exe\"\"", "code": "python -m pip install XXX \n"}, {"idx": "webquery-test-17", "doc": "NameError: name 'reduce' is not defined in Python", "code": "functools"}, {"idx": "webquery-test-18", "doc": "Execute code when Django starts ONCE only?", "code": "myapp/apps.pyfrom django.apps import AppConfig\nclass MyAppConfig(AppConfig):\n    name = 'myapp'\n    verbose_name = \"My Application\"\n    def ready(self):\n        pass # startup code here\nmyapp/__init__.pydefault_app_config = 'myapp.apps.MyAppConfig'\nmyapp/__init__.pydef startup():\n    pass # load a big thing\n\nstartup()\n./manage.py runserver"}, {"idx": "webquery-test-19", "doc": "How do I raise the same Exception with a custom message in Python?", "code": "try:\n    1 / 0\nexcept ZeroDivisionError as e:\n    raise Exception('Smelly socks') from e\nTraceback (most recent call last):\n  File \"test.py\", line 2, in &lt;module&gt;\n    1 / 0\nZeroDivisionError: division by zero\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"test.py\", line 4, in &lt;module&gt;\n    raise Exception('Smelly socks') from e\nException: Smelly socks\n__cause__try:\n    1 / 0\nexcept ZeroDivisionError as e:\n    raise Exception('Smelly socks').with_traceback(e.__traceback__)\nTraceback (most recent call last):\n  File \"test.py\", line 2, in &lt;module&gt;\n    1 / 0\nZeroDivisionError: division by zero\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"test.py\", line 4, in &lt;module&gt;\n    raise Exception('Smelly socks').with_traceback(e.__traceback__)\n  File \"test.py\", line 2, in &lt;module&gt;\n    1 / 0\nException: Smelly socks\n"}, {"idx": "webquery-test-20", "doc": "Find the unique values in a column and then sort them", "code": "sorted(iterable)import pandas as pd\ndf = pd.DataFrame({'A':[1,1,3,2,6,2,8]})\na = df['A'].unique()\nprint(sorted(a))\n[1, 2, 3, 6, 8]\n"}, {"idx": "webquery-test-1", "doc": "How to check a string for specific characters?", "code": "s'$' in s        # found\n'$' not in s    # not found\n\n# original answer given, but less Pythonic than the above...\ns.find('$')==-1 # not found\ns.find('$')!=-1 # found\npattern = re.compile(r'\\d\\$,')\nif pattern.findall(s):\n    print('Found')\nelse\n    print('Not found')\nchars = set('0123456789$,')\nif any((c in chars) for c in s):\n    print('Found')\nelse:\n    print('Not Found')\n'$' in s"}, {"idx": "webquery-test-2", "doc": "Turn Pandas Multi-Index into column", "code": ".reset_index()df = df.reset_index()  \n"}, {"idx": "webquery-test-3", "doc": "How to count the number of true elements in a NumPy bool array", "code": "boolarr.sum()\nnumpy.count_nonzero(boolarr)\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; boolarr = np.array([[0, 0, 1], [1, 0, 1], [1, 0, 1]], dtype=np.bool)\n&gt;&gt;&gt; boolarr\narray([[False, False,  True],\n       [ True, False,  True],\n       [ True, False,  True]], dtype=bool)\n\n&gt;&gt;&gt; boolarr.sum()\n5\nboolbool&gt;&gt;&gt; np.count_nonzero(boolarr)\n5\n"}, {"idx": "webquery-test-4", "doc": "Sorting a Python list by two fields", "code": "listsorted_list = sorted(list, key=lambda x: (x[0], -x[1]))\n"}, {"idx": "webquery-test-5", "doc": "Counting unique values in a column in pandas dataframe like in Qlik?", "code": "nuniquedf['hID'].nunique()\n5\ncountdf['hID'].count()\n8\nsizedf['hID'].size\n8\ndf.loc[df['mID']=='A','hID'].agg(['nunique','count','size'])\nquerydf.query('mID == \"A\"')['hID'].agg(['nunique','count','size'])\nnunique    5\ncount      5\nsize       5\nName: hID, dtype: int64\n"}, {"idx": "webquery-test-6", "doc": "How to choose an AWS profile when using boto3 to connect to CloudFront", "code": "    dev = boto3.session.Session(profile_name='dev')\n    boto3.setup_default_session(profile_name='dev')\n    $ AWS_PROFILE=dev ipython\n    &gt;&gt;&gt; import boto3\n    &gt;&gt;&gt; s3dev = boto3.resource('s3')\n"}, {"idx": "webquery-test-7", "doc": "_tkinter.TclError: no display name and no $DISPLAY environment variable", "code": "import matplotlib\nmatplotlib.use('Agg')\n.config/matplotlib/matplotlibrc.config/matplotlib/matplotlibrcecho \"backend: Agg\" &gt; ~/.config/matplotlib/matplotlibrc\nssh -X remoteMachineexport DISPLAY=mymachine.com:0.0"}, {"idx": "webquery-test-8", "doc": "How to make an immutable object in Python?", "code": "Immutable = collections.namedtuple(\"Immutable\", [\"a\", \"b\"])\n[0][0][0]namedtuplenamedtuplenamedtuple"}, {"idx": "webquery-test-9", "doc": "How to plot in multiple subplots", "code": "subplotssubplotsimport matplotlib.pyplot as plt\n\nx = range(10)\ny = range(10)\n\nfig, ax = plt.subplots(nrows=2, ncols=2)\n\nfor row in ax:\n    for col in row:\n        col.plot(x, y)\n\nplt.show()\nfig = plt.figure()\n\nplt.subplot(2, 2, 1)\nplt.plot(x, y)\n\nplt.subplot(2, 2, 2)\nplt.plot(x, y)\n\nplt.subplot(2, 2, 3)\nplt.plot(x, y)\n\nplt.subplot(2, 2, 4)\nplt.plot(x, y)\n\nplt.show()\n"}, {"idx": "webquery-test-10", "doc": "Python function attributes - uses and abuses", "code": "class Foo(WebService):\n    @webmethod\n    def bar(self, arg1, arg2):\n         ...\ndef webmethod(func):\n    func.is_webmethod = True\n    return func\n"}, {"idx": "webquery-test-11", "doc": "What's a correct and good way to implement __hash__()?", "code": "__hash__()class A:\n    def __key(self):\n        return (self.attr_a, self.attr_b, self.attr_c)\n\n    def __hash__(self):\n        return hash(self.__key())\n\n    def __eq__(self, other):\n        if isinstance(other, A):\n            return self.__key() == other.__key()\n        return NotImplemented\n__hash__"}, {"idx": "webquery-test-12", "doc": "In Python, what happens when you import inside of a function?", "code": "from my_module import my_function as f"}, {"idx": "webquery-test-13", "doc": "Concurrent.futures vs Multiprocessing in Python 3", "code": "concurrent.futuresfrom concurrent.futures import ProcessPoolExecutor\ndef pool_factorizer_map(nums, nprocs):\n    # Let the executor divide the work among processes by using 'map'.\n    with ProcessPoolExecutor(max_workers=nprocs) as executor:\n        return {num:factors for num, factors in\n                                zip(nums,\n                                    executor.map(factorize_naive, nums))}\nmultiprocessingimport multiprocessing as mp\ndef mp_factorizer_map(nums, nprocs):\n    with mp.Pool(nprocs) as pool:\n        return {num:factors for num, factors in\n                                zip(nums,\n                                    pool.map(factorize_naive, nums))}\nmultiprocessing.PoolPoolconcurrent.futures"}, {"idx": "webquery-test-14", "doc": "How to remove frame from matplotlib (pyplot.figure vs matplotlib.figure ) (frameon=False Problematic in matplotlib)", "code": "ax.axis('off')spinesspinesax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(False)\nxx ax.get_xaxis().set_ticks([])\n ax.get_yaxis().set_ticks([])\n"}, {"idx": "webquery-test-15", "doc": "Check if a word is in a string in Python", "code": "if word in mystring: \n   print('success')\n"}, {"idx": "webquery-test-16", "doc": "How to get the last N rows of a pandas DataFrame?", "code": "DataFrame.tailDataFrame.tail"}, {"idx": "webquery-test-17", "doc": "How to do a recursive sub-folder search and return files in a list?", "code": "dirpathdirpathdirpathdirpathimport os\nresult = [os.path.join(dp, f) for dp, dn, filenames in os.walk(PATH) for f in filenames if os.path.splitext(f)[1] == '.txt']\nglobimport os\nfrom glob import glob\nresult = [y for x in os.walk(PATH) for y in glob(os.path.join(x[0], '*.txt'))]\nfrom itertools import chain\nresult = (chain.from_iterable(glob(os.path.join(x[0], '*.txt')) for x in os.walk('.')))\nfrom pathlib import Path\nresult = list(Path(\".\").rglob(\"*.[tT][xX][tT]\"))\n"}, {"idx": "webquery-test-18", "doc": "How to add a string in a certain position?", "code": "&gt;&gt;&gt; s='355879ACB6'\n&gt;&gt;&gt; s[4:4] = '-'\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'str' object does not support item assignment\n&gt;&gt;&gt; s[:4] + '-' + s[4:]\n'3558-79ACB6'\n"}, {"idx": "webquery-test-19", "doc": "Purpose of #!/usr/bin/python3 shebang", "code": "#!/usr/bin/python3python3python3python3python3python3python3chmod +x script.pychmod +x script.pychmod +x script.py#!/usr/bin/env python3"}, {"idx": "webquery-test-20", "doc": "if A vs if A is not None:", "code": "if A:\nA.__bool__()A.__bool__()object.__bool__(self)object.__bool__(self)object.__bool__(self)object.__bool__(self)object.__bool__(self)object.__bool__(self)object.__bool__(self)if A is not None:\nAA"}, {"idx": "webquery-test-21", "doc": "Convert columns into rows with Pandas", "code": "meltdf.melt(id_vars=[\"location\", \"name\"], \n        var_name=\"Date\", \n        value_name=\"Value\")\n\n  location    name        Date  Value\n0        A  \"test\"    Jan-2010     12\n1        B   \"foo\"    Jan-2010     18\n2        A  \"test\"    Feb-2010     20\n3        B   \"foo\"    Feb-2010     20\n4        A  \"test\"  March-2010     30\n5        B   \"foo\"  March-2010     25\npd.melt&gt;&gt;&gt; df\n  location  name  Jan-2010  Feb-2010  March-2010\n0        A  test        12        20          30\n1        B   foo        18        20          25\n&gt;&gt;&gt; df2 = pd.melt(df, id_vars=[\"location\", \"name\"], \n                  var_name=\"Date\", value_name=\"Value\")\n&gt;&gt;&gt; df2\n  location  name        Date  Value\n0        A  test    Jan-2010     12\n1        B   foo    Jan-2010     18\n2        A  test    Feb-2010     20\n3        B   foo    Feb-2010     20\n4        A  test  March-2010     30\n5        B   foo  March-2010     25\n&gt;&gt;&gt; df2 = df2.sort([\"location\", \"name\"])\n&gt;&gt;&gt; df2\n  location  name        Date  Value\n0        A  test    Jan-2010     12\n2        A  test    Feb-2010     20\n4        A  test  March-2010     30\n1        B   foo    Jan-2010     18\n3        B   foo    Feb-2010     20\n5        B   foo  March-2010     25\n.reset_index(drop=True)pd.DataFrame.sortpd.DataFrame.sort"}, {"idx": "webquery-test-22", "doc": "Find p-value (significance) in scikit-learn LinearRegression", "code": "import pandas as pd\nimport numpy as np\nfrom sklearn import datasets, linear_model\nfrom sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm\nfrom scipy import stats\n\ndiabetes = datasets.load_diabetes()\nX = diabetes.data\ny = diabetes.target\n\nX2 = sm.add_constant(X)\nest = sm.OLS(y, X2)\nest2 = est.fit()\nprint(est2.summary())\n                         OLS Regression Results                            \n==============================================================================\nDep. Variable:                      y   R-squared:                       0.518\nModel:                            OLS   Adj. R-squared:                  0.507\nMethod:                 Least Squares   F-statistic:                     46.27\nDate:                Wed, 08 Mar 2017   Prob (F-statistic):           3.83e-62\nTime:                        10:08:24   Log-Likelihood:                -2386.0\nNo. Observations:                 442   AIC:                             4794.\nDf Residuals:                     431   BIC:                             4839.\nDf Model:                          10                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst        152.1335      2.576     59.061      0.000     147.071     157.196\nx1           -10.0122     59.749     -0.168      0.867    -127.448     107.424\nx2          -239.8191     61.222     -3.917      0.000    -360.151    -119.488\nx3           519.8398     66.534      7.813      0.000     389.069     650.610\nx4           324.3904     65.422      4.958      0.000     195.805     452.976\nx5          -792.1842    416.684     -1.901      0.058   -1611.169      26.801\nx6           476.7458    339.035      1.406      0.160    -189.621    1143.113\nx7           101.0446    212.533      0.475      0.635    -316.685     518.774\nx8           177.0642    161.476      1.097      0.273    -140.313     494.442\nx9           751.2793    171.902      4.370      0.000     413.409    1089.150\nx10           67.6254     65.984      1.025      0.306     -62.065     197.316\n==============================================================================\nOmnibus:                        1.506   Durbin-Watson:                   2.029\nProb(Omnibus):                  0.471   Jarque-Bera (JB):                1.404\nSkew:                           0.017   Prob(JB):                        0.496\nKurtosis:                       2.726   Cond. No.                         227.\n==============================================================================\nlm = LinearRegression()\nlm.fit(X,y)\nparams = np.append(lm.intercept_,lm.coef_)\npredictions = lm.predict(X)\n\nnewX = pd.DataFrame({\"Constant\":np.ones(len(X))}).join(pd.DataFrame(X))\nMSE = (sum((y-predictions)**2))/(len(newX)-len(newX.columns))\n\n# Note if you don't want to use a DataFrame replace the two lines above with\n# newX = np.append(np.ones((len(X),1)), X, axis=1)\n# MSE = (sum((y-predictions)**2))/(len(newX)-len(newX[0]))\n\nvar_b = MSE*(np.linalg.inv(np.dot(newX.T,newX)).diagonal())\nsd_b = np.sqrt(var_b)\nts_b = params/ sd_b\n\np_values =[2*(1-stats.t.cdf(np.abs(i),(len(newX)-len(newX[0])))) for i in ts_b]\n\nsd_b = np.round(sd_b,3)\nts_b = np.round(ts_b,3)\np_values = np.round(p_values,3)\nparams = np.round(params,4)\n\nmyDF3 = pd.DataFrame()\nmyDF3[\"Coefficients\"],myDF3[\"Standard Errors\"],myDF3[\"t values\"],myDF3[\"Probabilities\"] = [params,sd_b,ts_b,p_values]\nprint(myDF3)\n    Coefficients  Standard Errors  t values  Probabilities\n0       152.1335            2.576    59.061         0.000\n1       -10.0122           59.749    -0.168         0.867\n2      -239.8191           61.222    -3.917         0.000\n3       519.8398           66.534     7.813         0.000\n4       324.3904           65.422     4.958         0.000\n5      -792.1842          416.684    -1.901         0.058\n6       476.7458          339.035     1.406         0.160\n7       101.0446          212.533     0.475         0.635\n8       177.0642          161.476     1.097         0.273\n9       751.2793          171.902     4.370         0.000\n10       67.6254           65.984     1.025         0.306\n"}, {"idx": "webquery-test-1", "doc": "Object of custom type as dictionary key", "code": "__hash____hash__class MyThing:\n    def __init__(self,name,location,length):\n        self.name = name\n        self.location = location\n        self.length = length\n\n    def __hash__(self):\n        return hash((self.name, self.location))\n\n    def __eq__(self, other):\n        return (self.name, self.location) == (other.name, other.location)\n\n    def __ne__(self, other):\n        # Not strictly necessary, but to avoid having both x==y and x!=y\n        # True at the same time\n        return not(self == other)\n"}, {"idx": "webquery-test-2", "doc": "How do I write good/correct package __init__.py files", "code": "__all____all____all____all__import *import *import *foo.py - contains classes related to foo such as fooFactory, tallFoo, shortFoo\nfoo/\n    __init__.py\n    foofactories.py\n    tallFoos.py\n    shortfoos.py\n    mediumfoos.py\n    santaslittlehelperfoo.py\n    superawsomefoo.py\n    anotherfoo.py\n__all__ = ['foofactories', 'tallFoos', 'shortfoos', 'medumfoos',\n           'santaslittlehelperfoo', 'superawsomefoo', 'anotherfoo']\n# deprecated to keep older scripts who import this from breaking\nfrom foo.foofactories import fooFactory\nfrom foo.tallfoos import tallFoo\nfrom foo.shortfoos import shortFoo\nfrom foo import fooFactory, tallFoo, shortFoo\n"}, {"idx": "webquery-test-3", "doc": "Automatic creation date for Django model form objects", "code": "auto_nowauto_nowauto_nowauto_nowclass MyModel(models.Model):\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n"}, {"idx": "webquery-test-4", "doc": "How can I one hot encode in Python?", "code": "pd.get_dummiesimport pandas as pd\ns = pd.Series(list('abca'))\npd.get_dummies(s)\nOut[]: \n     a    b    c\n0  1.0  0.0  0.0\n1  0.0  1.0  0.0\n2  0.0  0.0  1.0\n3  1.0  0.0  0.0\nimport pandas as pd\n        \ndf = pd.DataFrame({\n          'A':['a','b','a'],\n          'B':['b','a','c']\n        })\ndf\nOut[]: \n   A  B\n0  a  b\n1  b  a\n2  a  c\n\n# Get one hot encoding of columns B\none_hot = pd.get_dummies(df['B'])\n# Drop column B as it is now encoded\ndf = df.drop('B',axis = 1)\n# Join the encoded df\ndf = df.join(one_hot)\ndf  \nOut[]: \n       A  a  b  c\n    0  a  0  1  0\n    1  b  1  0  0\n    2  a  0  0  1\nOneHotEncoderOneHotEncoderOneHotEncoderOneHotEncoder&gt;&gt;&gt; from sklearn.preprocessing import OneHotEncoder\n&gt;&gt;&gt; enc = OneHotEncoder()\n&gt;&gt;&gt; enc.fit([[0, 0, 3], [1, 1, 0], [0, 2, 1], [1, 0, 2]])   \nOneHotEncoder(categorical_features='all', dtype=&lt;class 'numpy.float64'&gt;,\n   handle_unknown='error', n_values='auto', sparse=True)\n&gt;&gt;&gt; enc.n_values_\narray([2, 3, 4])\n&gt;&gt;&gt; enc.feature_indices_\narray([0, 2, 5, 9], dtype=int32)\n&gt;&gt;&gt; enc.transform([[0, 1, 1]]).toarray()\narray([[ 1.,  0.,  0.,  1.,  0.,  0.,  1.,  0.,  0.]])\n"}, {"idx": "webquery-test-5", "doc": "How do I initialize weights in PyTorch?", "code": "torch.nn.initconv1 = torch.nn.Conv2d(...)\ntorch.nn.init.xavier_uniform(conv1.weight)\nconv1.weight.dataconv1.weight.dataconv1.weight.data.fill_(0.01)\nconv1.bias.data.fill_(0.01)\nnn.Sequentialnn.Sequentialtorch.nn.Module.applytorch.nn.Module.applyfnfndef init_weights(m):\n    if isinstance(m, nn.Linear):\n        torch.nn.init.xavier_uniform(m.weight)\n        m.bias.data.fill_(0.01)\n\nnet = nn.Sequential(nn.Linear(2, 2), nn.Linear(2, 2))\nnet.apply(init_weights)\n"}, {"idx": "webquery-test-6", "doc": "How to replace NaNs by preceding or next values in pandas DataFrame?", "code": "fillnafillna&gt;&gt;&gt; df = pd.DataFrame([[1, 2, 3], [4, None, None], [None, None, 9]])\n&gt;&gt;&gt; df.fillna(method='ffill')\n   0  1  2\n0  1  2  3\n1  4  2  3\n2  4  2  9\nbfillinplace=Truedf.fillna(method='ffill', inplace=True)\n"}, {"idx": "webquery-test-7", "doc": "Case insensitive replace", "code": "string&gt;&gt;&gt; import re\n&gt;&gt;&gt; insensitive_hippo = re.compile(re.escape('hippo'), re.IGNORECASE)\n&gt;&gt;&gt; insensitive_hippo.sub('giraffe', 'I want a hIPpo for my birthday')\n'I want a giraffe for my birthday'\n"}, {"idx": "webquery-test-8", "doc": "How to do a scatter plot with empty circles in Python?", "code": "Optional kwargs control the Collection properties; in particular:\n\n    edgecolors:\n        The string \u2018none\u2019 to plot faces with no outlines\n    facecolors:\n        The string \u2018none\u2019 to plot unfilled outlines\nimport matplotlib.pyplot as plt \nimport numpy as np \n\nx = np.random.randn(60) \ny = np.random.randn(60)\n\nplt.scatter(x, y, s=80, facecolors='none', edgecolors='r')\nplt.show()\nmarkeredgecolormarkeredgecolor"}, {"idx": "webquery-test-9", "doc": "How to add hovering annotations to a plot", "code": "import matplotlib.pyplot as plt\nimport numpy as np; np.random.seed(1)\n\nx = np.random.rand(15)\ny = np.random.rand(15)\nnames = np.array(list(\"ABCDEFGHIJKLMNO\"))\nc = np.random.randint(1,5,size=15)\n\nnorm = plt.Normalize(1,4)\ncmap = plt.cm.RdYlGn\n\nfig,ax = plt.subplots()\nsc = plt.scatter(x,y,c=c, s=100, cmap=cmap, norm=norm)\n\nannot = ax.annotate(\"\", xy=(0,0), xytext=(20,20),textcoords=\"offset points\",\n                    bbox=dict(boxstyle=\"round\", fc=\"w\"),\n                    arrowprops=dict(arrowstyle=\"-&gt;\"))\nannot.set_visible(False)\n\ndef update_annot(ind):\n\n    pos = sc.get_offsets()[ind[\"ind\"][0]]\n    annot.xy = pos\n    text = \"{}, {}\".format(\" \".join(list(map(str,ind[\"ind\"]))), \n                           \" \".join([names[n] for n in ind[\"ind\"]]))\n    annot.set_text(text)\n    annot.get_bbox_patch().set_facecolor(cmap(norm(c[ind[\"ind\"][0]])))\n    annot.get_bbox_patch().set_alpha(0.4)\n\n\ndef hover(event):\n    vis = annot.get_visible()\n    if event.inaxes == ax:\n        cont, ind = sc.contains(event)\n        if cont:\n            update_annot(ind)\n            annot.set_visible(True)\n            fig.canvas.draw_idle()\n        else:\n            if vis:\n                annot.set_visible(False)\n                fig.canvas.draw_idle()\n\nfig.canvas.mpl_connect(\"motion_notify_event\", hover)\n\nplt.show()\nplotplotimport matplotlib.pyplot as plt\r\nimport numpy as np; np.random.seed(1)\r\n\r\nx = np.sort(np.random.rand(15))\r\ny = np.sort(np.random.rand(15))\r\nnames = np.array(list(\"ABCDEFGHIJKLMNO\"))\r\n\r\nnorm = plt.Normalize(1,4)\r\ncmap = plt.cm.RdYlGn\r\n\r\nfig,ax = plt.subplots()\r\nline, = plt.plot(x,y, marker=\"o\")\r\n\r\nannot = ax.annotate(\"\", xy=(0,0), xytext=(-20,20),textcoords=\"offset points\",\r\n                    bbox=dict(boxstyle=\"round\", fc=\"w\"),\r\n                    arrowprops=dict(arrowstyle=\"-&gt;\"))\r\nannot.set_visible(False)\r\n\r\ndef update_annot(ind):\r\n    x,y = line.get_data()\r\n    annot.xy = (x[ind[\"ind\"][0]], y[ind[\"ind\"][0]])\r\n    text = \"{}, {}\".format(\" \".join(list(map(str,ind[\"ind\"]))), \r\n                           \" \".join([names[n] for n in ind[\"ind\"]]))\r\n    annot.set_text(text)\r\n    annot.get_bbox_patch().set_alpha(0.4)\r\n\r\n\r\ndef hover(event):\r\n    vis = annot.get_visible()\r\n    if event.inaxes == ax:\r\n        cont, ind = line.contains(event)\r\n        if cont:\r\n            update_annot(ind)\r\n            annot.set_visible(True)\r\n            fig.canvas.draw_idle()\r\n        else:\r\n            if vis:\r\n                annot.set_visible(False)\r\n                fig.canvas.draw_idle()\r\n\r\nfig.canvas.mpl_connect(\"motion_notify_event\", hover)\r\n\r\nplt.show()"}, {"idx": "webquery-test-10", "doc": "When and why should I use a namedtuple instead of a dictionary?", "code": "dictdictclass Container:\n    def __init__(self, name, date, foo, bar):\n        self.name = name\n        self.date = date\n        self.foo = foo\n        self.bar = bar\n\nmycontainer = Container(name, date, foo, bar)\n__init__Container = namedtuple('Container', ['name', 'date', 'foo', 'bar'])\n\nmycontainer = Container(name, date, foo, bar)\ndictmynamedtuple.fieldname\nmydict['fieldname']\nmynamedtuple = MyNamedTuple(firstvalue, secondvalue)\nmydict = {'fieldname': firstvalue, 'secondfield': secondvalue}\nnamedtuplenamedtuplenamedtuple"}, {"idx": "webquery-test-11", "doc": "How does tuple comparison work in Python?", "code": "[1,2] == (1,2)[1,2] == (1,2)[1,2] == (1,2)[1,2] == (1,2)&lt;&lt;"}, {"idx": "webquery-test-12", "doc": "Lists in ConfigParser", "code": "[Foo]\nfibs: [1,1,2,3,5,8,13]\n&gt;&gt;&gt; json.loads(config.get(\"Foo\",\"fibs\"))\n[1, 1, 2, 3, 5, 8, 13]\n[Bar]\nfiles_to_check = [\n     \"/path/to/file1\",\n     \"/path/to/file2\",\n     \"/path/to/another file with space in the name\"\n     ]\n"}, {"idx": "webquery-test-13", "doc": "How to increment a datetime by one day?", "code": "date = datetime.datetime(2003,8,1,12,4,5)\nfor i in range(5): \n    date += datetime.timedelta(days=1)\n    print(date) \n"}, {"idx": "webquery-test-14", "doc": "Is there a decorator to simply cache function return values?", "code": "@functools.lru_cache(maxsize=100, typed=False)from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    if n &lt; 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\n&gt;&gt;&gt; print([fib(n) for n in range(16)])\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n\n&gt;&gt;&gt; print(fib.cache_info())\nCacheInfo(hits=28, misses=16, maxsize=None, currsize=16)\nfunctools32functools32functools32functools32"}, {"idx": "webquery-test-15", "doc": "Python: Why is functools.partial necessary?", "code": "functools.partiallambdalambdalambdalambdalambdalambdalambdalambdalambda&gt;&gt;&gt; import functools\n&gt;&gt;&gt; f = functools.partial(int, base=2)\n&gt;&gt;&gt; f.args\n()\n&gt;&gt;&gt; f.func\n&lt;type 'int'&gt;\n&gt;&gt;&gt; f.keywords\n{'base': 2}\n&gt;&gt;&gt; \nfunctools.partial&gt;&gt;&gt; f('23', base=10)\n23\nlambda s: int(s, base=2)&gt;&gt;&gt; f = lambda s, **k: int(s, **dict({'base': 2}, **k))\nlambdalambdalambda&gt;&gt;&gt; f = [f for f in (lambda f: int(s, base=2),)\n           if setattr(f, 'keywords', {'base': 2}) is None][0]\n"}, {"idx": "webquery-test-16", "doc": "Iterate over object attributes in python", "code": "&gt;&gt;&gt; class Cls(object):\n...     foo = 1\n...     bar = 'hello'\n...     def func(self):\n...         return 'call me'\n...\n&gt;&gt;&gt; obj = Cls()\ndir&gt;&gt;&gt; dir(obj)\n['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'bar', 'foo', 'func']\n&gt;&gt;&gt; [a for a in dir(obj) if not a.startswith('__')]\n['bar', 'foo', 'func']\n&gt;&gt;&gt; filter(lambda a: not a.startswith('__'), dir(obj))\n['bar', 'foo', 'func']\ncallable&gt;&gt;&gt; [a for a in dir(obj) if not a.startswith('__') and not callable(getattr(obj, a))]\n['bar', 'foo']\n&gt;&gt;&gt; set(dir(Cls)) - set(dir(object))\nset(['__module__', 'bar', 'func', '__dict__', 'foo', '__weakref__'])\n"}, {"idx": "webquery-test-17", "doc": "JSON to pandas DataFrame", "code": "json_normalize()json_normalize()from urllib2 import Request, urlopen\nimport json\n\nimport pandas as pd    \n\npath1 = '42.974049,-81.205203|42.974298,-81.195755'\nrequest=Request('http://maps.googleapis.com/maps/api/elevation/json?locations='+path1+'&amp;sensor=false')\nresponse = urlopen(request)\nelevations = response.read()\ndata = json.loads(elevations)\ndf = pd.json_normalize(data['results'])\n"}, {"idx": "webquery-test-18", "doc": "What is the best way to exit a function (which has no return value) in python before the function ends (e.g. a check fails)?", "code": "return\nreturn None\nNoneNoneNone"}, {"idx": "webquery-test-1", "doc": "What is the best way to exit a function (which has no return value) in python before the function ends (e.g. a check fails)?", "code": "return\nreturn None\nNoneNoneNone"}, {"idx": "webquery-test-2", "doc": "When is \"i += x\" different from \"i = i + x\" in Python?", "code": "i+=+=+=+=+=+=__iadd____iadd____iadd__i = 1\ni += 1\niiiia = [1, 2, 3]\nb = a\nb += [1, 2, 3]\nprint(a)  # [1, 2, 3, 1, 2, 3]\nprint(b)  # [1, 2, 3, 1, 2, 3]\na = [1, 2, 3]\nb = a\nb = b + [1, 2, 3]\nprint(a)  # [1, 2, 3]\nprint(b)  # [1, 2, 3, 1, 2, 3]\nbbbbbbbbbbbx + yx + yx + yx + yx + yx + yx + yx + yfoo_instance += bar_instanceFooFooFoofoo_instance = bar_instance.__radd__(bar_instance, foo_instance)foo_instance + bar_instancefoo_instance + bar_instancefoo_instance + bar_instancefoo_instance + bar_instancefoo_instance + bar_instancefoo_instance + bar_instancefoo_instance + bar_instancefoo_instance + bar_instancefoo_instance + bar_instancefoo_instance + bar_instance"}, {"idx": "webquery-test-3", "doc": "How can I specify working directory for popen", "code": "subprocess.Popensubprocess.Popensubprocess.Popensubprocess.Popensubprocess.Popensubprocess.Popen(r'c:\\mytool\\tool.exe', cwd=r'd:\\test\\local')\nimport osos.path.dirname(os.path.realpath(__file__)) \n"}, {"idx": "webquery-test-4", "doc": "has_next in Python iterators?", "code": "StopIterationStopIteration&gt;&gt;&gt; a = iter('hi')\n&gt;&gt;&gt; print next(a, None)\nh\n&gt;&gt;&gt; print next(a, None)\ni\n&gt;&gt;&gt; print next(a, None)\nNone\nNone"}, {"idx": "webquery-test-5", "doc": "What is the purpose of the \"send\" function on Python generators?", "code": "&gt;&gt;&gt; def double_inputs():\n...     while True:\n...         x = yield\n...         yield x * 2\n...\n&gt;&gt;&gt; gen = double_inputs()\n&gt;&gt;&gt; next(gen)       # run up to the first yield\n&gt;&gt;&gt; gen.send(10)    # goes into 'x' variable\n20\n&gt;&gt;&gt; next(gen)       # run up to the next yield\n&gt;&gt;&gt; gen.send(6)     # goes into 'x' again\n12\n&gt;&gt;&gt; next(gen)       # run up to the next yield\n&gt;&gt;&gt; gen.send(94.3)  # goes into 'x' again\n188.5999999999999\nyield@defer.inlineCallbacks@defer.inlineCallbacks\ndef doStuff():\n    result = yield takesTwoSeconds()\n    nextResult = yield takesTenSeconds(result * 10)\n    defer.returnValue(nextResult / 10)\ntakesTwoSeconds()takesTwoSeconds()takesTwoSeconds()takesTwoSeconds()def doStuff():\n    returnDeferred = defer.Deferred()\n    def gotNextResult(nextResult):\n        returnDeferred.callback(nextResult / 10)\n    def gotResult(result):\n        takesTenSeconds(result * 10).addCallback(gotNextResult)\n    takesTwoSeconds().addCallback(gotResult)\n    return returnDeferred\n"}, {"idx": "webquery-test-6", "doc": "Convert [key1,val1,key2,val2] to a dict?", "code": "b = dict(zip(a[::2], a[1::2]))\nafrom itertools import izip\ni = iter(a)\nb = dict(izip(i, i))\nrange()range()b = {a[i]: a[i+1] for i in range(0, len(a), 2)}\niter()/izip()iter()/izip()iter()/izip()i = iter(a)\nb = dict(zip(i, i))\n:=b = dict(zip(i := iter(a), i))\n"}, {"idx": "webquery-test-7", "doc": "How do I draw a grid onto a plot in Python?", "code": "pyplot.gridx = numpy.arange(0, 1, 0.05)\ny = numpy.power(x, 2)\n\nfig = plt.figure()\nax = fig.gca()\nax.set_xticks(numpy.arange(0, 1, 0.1))\nax.set_yticks(numpy.arange(0, 1., 0.1))\nplt.scatter(x, y)\nplt.grid()\nplt.show()\nax.xaxis.gridax.xaxis.grid"}, {"idx": "webquery-test-8", "doc": "Difference between except: and except Exception as e:", "code": "&gt;&gt;&gt; def catch():\n...     try:\n...         asd()\n...     except Exception as e:\n...         print e.message, e.args\n... \n&gt;&gt;&gt; catch()\nglobal name 'asd' is not defined (\"global name 'asd' is not defined\",)\nBaseExceptionBaseExceptionBaseExceptionBaseException&gt;&gt;&gt; def catch():\n...     try:\n...         raise BaseException()\n...     except Exception as e:\n...         print e.message, e.args\n... \n&gt;&gt;&gt; catch()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 3, in catch\nBaseException\n&gt;&gt;&gt; def catch():\n...     try:\n...         raise BaseException()\n...     except:\n...         pass\n... \n&gt;&gt;&gt; catch()\n&gt;&gt;&gt; \n"}, {"idx": "webquery-test-9", "doc": "Specifying and saving a figure with exact size in pixels", "code": "my_dpi=96plt.figure(figsize=(800/my_dpi, 800/my_dpi), dpi=my_dpi)\ndpidpiplt.savefig('my_fig.png', dpi=my_dpi)\nplt.savefig('my_fig.png', dpi=my_dpi * 10)\nplt.figure(figsize=(3.841, 7.195), dpi=100)\n( your code ...)\nplt.savefig('myfig.png', dpi=1000)\ndpi=1000"}, {"idx": "webquery-test-10", "doc": "Typical AngularJS workflow and project structure (with Python Flask)", "code": "app\n|-- app.py\n|-- static\n    |-- css\n    |-- img\n    |-- js\n|-- templates\n@app.route(\"/\")\ndef index():\n    return send_file('templates/index.html')\n    return make_response(open('templates/index.html').read())\napp\n|-- app.py\n|-- static\n    |-- css\n    |-- img\n    |-- js\n        |-- app.js, controllers.js, etc.\n    |-- lib\n        |-- angular\n            |-- angular.js, etc.\n    |-- partials\n|-- templates\n    |-- index.html\n&lt;script src=\"static/lib/angular/angular.js\"&gt;&lt;/script&gt;\n"}, {"idx": "webquery-test-11", "doc": "Class has no objects member", "code": "pylint-djangopylint-djangopip install pylint-django\n{\"python.linting.pylintArgs\": [\n     \"--load-plugins=pylint_django\"\n],}\n"}, {"idx": "webquery-test-12", "doc": "Python glob multiple filetypes", "code": "import glob\ntypes = ('*.pdf', '*.cpp') # the tuple of file types\nfiles_grabbed = []\nfor files in types:\n    files_grabbed.extend(glob.glob(files))\n\n# files_grabbed is the list of pdf and cpp files\n"}, {"idx": "webquery-test-13", "doc": "What is the syntax to insert one list into another list in python?", "code": "append&gt;&gt;&gt; x = [1,2,3]\n&gt;&gt;&gt; y = [4,5,6]\n&gt;&gt;&gt; x.append(y)\n&gt;&gt;&gt; x\n[1, 2, 3, [4, 5, 6]]\n&gt;&gt;&gt; x = [1,2,3]\n&gt;&gt;&gt; y = [4,5,6]\n&gt;&gt;&gt; x + y\n[1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt; x.extend(y)\n&gt;&gt;&gt; x\n[1, 2, 3, 4, 5, 6] \n"}, {"idx": "webquery-test-14", "doc": "Plotting a 2D heatmap", "code": "imshow()imshow()imshow()interpolationimport matplotlib.pyplot as plt\nimport numpy as np\n\na = np.random.random((16, 16))\nplt.imshow(a, cmap='hot', interpolation='nearest')\nplt.show()\n"}, {"idx": "webquery-test-15", "doc": "Display a decimal in scientific notation", "code": "from decimal import Decimal\n\n'%.2E' % Decimal('40800000000.00000000000000')\n\n# returns '4.08E+10'\ndef format_e(n):\n    a = '%E' % n\n    return a.split('E')[0].rstrip('0').rstrip('.') + 'E' + a.split('E')[1]\n\nformat_e(Decimal('40800000000.00000000000000'))\n# '4.08E+10'\n\nformat_e(Decimal('40000000000.00000000000000'))\n# '4E+10'\n\nformat_e(Decimal('40812300000.00000000000000'))\n# '4.08123E+10'\n"}, {"idx": "webquery-test-16", "doc": "Label axes on Seaborn Barplot", "code": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfake = pd.DataFrame({'cat': ['red', 'green', 'blue'], 'val': [1, 2, 3]})\nax = sns.barplot(x = 'val', y = 'cat', \n              data = fake, \n              color = 'black')\nax.set(xlabel='common xlabel', ylabel='common ylabel')\nplt.show()\n"}, {"idx": "webquery-test-17", "doc": "python pandas: apply a function with arguments to a series", "code": "my_series.apply(your_function, args=(2,3,4), extra_kw=1)\nfunctools.partial&gt;&gt;&gt; import functools\n&gt;&gt;&gt; import operator\n&gt;&gt;&gt; add_3 = functools.partial(operator.add,3)\n&gt;&gt;&gt; add_3(2)\n5\n&gt;&gt;&gt; add_3(7)\n10\npartialmy_series.apply((lambda x: your_func(a,b,c,d,...,x)))\npartial"}, {"idx": "webquery-test-18", "doc": "How to assert two list contain the same elements in Python?", "code": "unittest.TestCase.assertItemsEqualunittest.TestCase.assertItemsEqualassertCountEqualassertCountEqualimport unittest\n\n\nclass TestListElements(unittest.TestCase):\n    def setUp(self):\n        self.expected = ['foo', 'bar', 'baz']\n        self.result = ['baz', 'foo', 'bar']\n\n    def test_count_eq(self):\n        \"\"\"Will succeed\"\"\"\n        self.assertCountEqual(self.result, self.expected)\n\n    def test_list_eq(self):\n        \"\"\"Will fail\"\"\"\n        self.assertListEqual(self.result, self.expected)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"}, {"idx": "webquery-test-19", "doc": "Python memory leaks", "code": "set_debug"}, {"idx": "webquery-test-1", "doc": "How to update SQLAlchemy row entry?", "code": "UPDATEUPDATE1) user.no_of_logins += 1\n   session.commit()\n   \n2) session.query(User).\\\n       filter(User.username == form.username.data).\\\n       update({'no_of_logins': User.no_of_logins + 1})\n   session.commit()\n\n3) conn = engine.connect()\n   stmt = User.update().\\\n       values(no_of_logins=User.no_of_logins + 1).\\\n       where(User.username == form.username.data)\n   conn.execute(stmt)\n\n4) setattr(user, 'no_of_logins', user.no_of_logins + 1)\n   session.commit()\n"}, {"idx": "webquery-test-2", "doc": "super() fails with error: TypeError \"argument 1 must be type, not classobj\" when parent does not inherit from object", "code": "class B(object):\nsuper()super()classobjclassobjTypeError: super() argument 1 must be type, not classobjclass OldStyle:\n    pass\n\nclass NewStyle(object):\n    pass\n\nprint type(OldStyle)  # prints: &lt;type 'classobj'&gt;\n\nprint type(NewStyle) # prints &lt;type 'type'&gt;\n"}, {"idx": "webquery-test-3", "doc": "How to get different colored lines for different plots in a single figure", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nplt.plot(x, x)\nplt.plot(x, 2 * x)\nplt.plot(x, 3 * x)\nplt.plot(x, 4 * x)\nplt.show()\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nplt.plot(x, x)\nplt.plot(x, 2 * x)\nplt.plot(x, 3 * x)\nplt.plot(x, 4 * x)\n\nplt.legend(['y = x', 'y = 2x', 'y = 3x', 'y = 4x'], loc='upper left')\n\nplt.show()\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\n\nplt.gca().set_color_cycle(['red', 'green', 'blue', 'yellow'])\n\nplt.plot(x, x)\nplt.plot(x, 2 * x)\nplt.plot(x, 3 * x)\nplt.plot(x, 4 * x)\n\nplt.legend(['y = x', 'y = 2x', 'y = 3x', 'y = 4x'], loc='upper left')\n\nplt.show()\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nnum_plots = 20\n\n# Have a look at the colormaps here and decide which one you'd like:\n# http://matplotlib.org/1.2.1/examples/pylab_examples/show_colormaps.html\ncolormap = plt.cm.gist_ncar\nplt.gca().set_prop_cycle(plt.cycler('color', plt.cm.jet(np.linspace(0, 1, num_plots))))\n\n# Plot several different functions...\nx = np.arange(10)\nlabels = []\nfor i in range(1, num_plots + 1):\n    plt.plot(x, i * x + 5 * i)\n    labels.append(r'$y = %ix + %i$' % (i, 5*i))\n\n# I'm basically just demonstrating several different legend options here...\nplt.legend(labels, ncol=4, loc='upper center', \n           bbox_to_anchor=[0.5, 1.1], \n           columnspacing=1.0, labelspacing=0.0,\n           handletextpad=0.0, handlelength=1.5,\n           fancybox=True, shadow=True)\n\nplt.show()\n"}, {"idx": "webquery-test-4", "doc": "How do I catch a numpy warning like it's an exception (not just for testing)?", "code": "printprint&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; np.array([1])/0   #'warn' mode\n__main__:1: RuntimeWarning: divide by zero encountered in divide\narray([0])\n&gt;&gt;&gt; np.seterr(all='print')\n{'over': 'warn', 'divide': 'warn', 'invalid': 'warn', 'under': 'ignore'}\n&gt;&gt;&gt; np.array([1])/0   #'print' mode\nWarning: divide by zero encountered in divide\narray([0])\nstdoutstdoutnumpy.seterr(all='raise')numpy.seterr(all='raise')warnings&gt;&gt;&gt; import warnings\n&gt;&gt;&gt; \n&gt;&gt;&gt; warnings.filterwarnings('error')\n&gt;&gt;&gt; \n&gt;&gt;&gt; try:\n...     warnings.warn(Warning())\n... except Warning:\n...     print 'Warning was raised as an exception!'\n... \nWarning was raised as an exception!\nfilterwarningsfilterwarningsfilterwarnings&gt;&gt;&gt; import warnings\n&gt;&gt;&gt; with warnings.catch_warnings():\n...     warnings.filterwarnings('error')\n...     try:\n...         warnings.warn(Warning())\n...     except Warning: print 'Raised!'\n... \nRaised!\n&gt;&gt;&gt; try:\n...     warnings.warn(Warning())\n... except Warning: print 'Not raised!'\n... \n__main__:2: Warning: \n"}, {"idx": "webquery-test-5", "doc": "\"pip install --editable ./\" vs \"python setup.py develop\"", "code": "setup.pypip install -esetup.py develop"}, {"idx": "webquery-test-6", "doc": "How can I scroll a web page using selenium webdriver in python?", "code": "driver.execute_script(\"window.scrollTo(0, Y)\") \ndriver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\nSCROLL_PAUSE_TIME = 0.5\n\n# Get scroll height\nlast_height = driver.execute_script(\"return document.body.scrollHeight\")\n\nwhile True:\n    # Scroll down to bottom\n    driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n\n    # Wait to load page\n    time.sleep(SCROLL_PAUSE_TIME)\n\n    # Calculate new scroll height and compare with last scroll height\n    new_height = driver.execute_script(\"return document.body.scrollHeight\")\n    if new_height == last_height:\n        break\n    last_height = new_height\nlabel.sendKeys(Keys.PAGE_DOWN);\n"}, {"idx": "webquery-test-7", "doc": "How to get current available GPUs in tensorflow?", "code": "device_lib.list_local_devices()device_lib.list_local_devices()from tensorflow.python.client import device_lib\n\ndef get_available_gpus():\n    local_device_protos = device_lib.list_local_devices()\n    return [x.name for x in local_device_protos if x.device_type == 'GPU']\ndevice_lib.list_local_devices()device_lib.list_local_devices()device_lib.list_local_devices()"}, {"idx": "webquery-test-8", "doc": "How can I get dictionary key as variable directly in Python (not by searching from value)?", "code": "for key in mydictionary:\n   print \"key: %s , value: %s\" % (key, mydictionary[key])\n"}, {"idx": "webquery-test-9", "doc": "python dataframe pandas drop column using int", "code": "idf.drop(df.columns[i], axis=1)\ndf = df.iloc[:, [j for j, c in enumerate(df.columns) if j != i]]\n"}, {"idx": "webquery-test-10", "doc": "How do I get the \"id\" after INSERT into MySQL database with Python?", "code": "cursor.lastrowidcursor.lastrowid"}, {"idx": "webquery-test-11", "doc": "Efficient way to apply multiple filters to pandas DataFrame or Series", "code": "In [11]: df.loc[df['col1'] &gt;= 1, 'col1']\nOut[11]: \n1    1\n2    2\nName: col1\n\nIn [12]: df[df['col1'] &gt;= 1]\nOut[12]: \n   col1  col2\n1     1    11\n2     2    12\n\nIn [13]: df[(df['col1'] &gt;= 1) &amp; (df['col1'] &lt;=1 )]\nOut[13]: \n   col1  col2\n1     1    11\nIn [14]: def b(x, col, op, n): \n             return op(x[col],n)\n\nIn [15]: def f(x, *b):\n             return x[(np.logical_and(*b))]\n\nIn [16]: b1 = b(df, 'col1', ge, 1)\n\nIn [17]: b2 = b(df, 'col1', le, 1)\n\nIn [18]: f(df, b1, b2)\nOut[18]: \n   col1  col2\n1     1    11\nIn [21]: df.query('col1 &lt;= 1 &amp; 1 &lt;= col1')\nOut[21]:\n   col1  col2\n1     1    11\n"}, {"idx": "webquery-test-12", "doc": "How do you get the magnitude of a vector in Numpy?", "code": "numpy.linalg.normnumpy.linalg.normimport numpy as np\nx = np.array([1,2,3,4,5])\nnp.linalg.norm(x)\nordnp.linalg.norm(x,ord=1)\n"}, {"idx": "webquery-test-13", "doc": "How to get the python.exe location programmatically?", "code": "&gt;&gt;&gt; import sys\n&gt;&gt;&gt; print(sys.executable)\nC:\\path\\to\\python.exe\n&gt;&gt;&gt; import sys\n&gt;&gt;&gt; print sys.executable\n/usr/bin/python\n"}, {"idx": "webquery-test-14", "doc": "Could not install packages due to an EnvironmentError: [Errno 13]", "code": "pip3 install package_name--userpip3 install package_name --user\nvirtualenv enviroment_name -p python3\nsource enviroment_name/bin/activate\npippip install package_name\n"}, {"idx": "webquery-test-15", "doc": "Difference between exit(0) and exit(1) in Python", "code": "exit(0)exit(1)"}, {"idx": "webquery-test-1", "doc": "How to split a dos path into its components in Python", "code": "import os\npath = os.path.normpath(path)\npath.split(os.sep)\nos.sep"}, {"idx": "webquery-test-2", "doc": "Trying to mock datetime.date.today(), but not working", "code": "pip install freezegun\nfrom freezegun import freeze_time\n\n@freeze_time(\"2012-01-01\")\ndef test_something():\n\n    from datetime import datetime\n    print(datetime.now()) #  2012-01-01 00:00:00\n\n    from datetime import date\n    print(date.today()) #  2012-01-01\nfrom datetime import datetime\n\ndef other_method():\n    print(datetime.now())    \nfrom freezegun import freeze_time\n\n@freeze_time(\"2012-01-01\")\ndef test_something():\n\n    import other_module\n    other_module.other_method()\n$ python main.py\n# 2012-01-01\n"}, {"idx": "webquery-test-3", "doc": "How to erase the file contents of text file in Python?", "code": "open('file.txt', 'w').close()\nf = open('file.txt', 'r+')\nf.truncate(0) # need '0' when using r+\n"}, {"idx": "webquery-test-4", "doc": "How do I use method overloading in Python?", "code": "class A:\n    def stackoverflow(self, i='some_default_value'):\n        print 'only method'\n\nob=A()\nob.stackoverflow(2)\nob.stackoverflow()\n&gt;&gt;&gt; from functools import singledispatch\n&gt;&gt;&gt; @singledispatch\n... def fun(arg, verbose=False):\n...     if verbose:\n...         print(\"Let me just say,\", end=\" \")\n...     print(arg)\n&gt;&gt;&gt; @fun.register(int)\n... def _(arg, verbose=False):\n...     if verbose:\n...         print(\"Strength in numbers, eh?\", end=\" \")\n...     print(arg)\n...\n&gt;&gt;&gt; @fun.register(list)\n... def _(arg, verbose=False):\n...     if verbose:\n...         print(\"Enumerate this:\")\n...     for i, elem in enumerate(arg):\n...         print(i, elem)\n"}, {"idx": "webquery-test-5", "doc": "What is the inverse function of zip in python?", "code": "lst1, lst2 = zip(*zipped_list)\n*zipped_lista = [1,2,3]\nb = [4,5,6]\nzipped_list = zip(a,b)[(1,4), (2,5), (3,6)]\n*zipped_list(1,4), (2,5), (3,6)\nzip(*zipped_list)[(1, 2, 3), (4, 5, 6)]\n"}, {"idx": "webquery-test-6", "doc": "Ignoring NaNs with str.contains", "code": "In [11]: df = pd.DataFrame([[\"foo1\"], [\"foo2\"], [\"bar\"], [np.nan]], columns=['a'])\n\nIn [12]: df.a.str.contains(\"foo\")\nOut[12]:\n0     True\n1     True\n2    False\n3      NaN\nName: a, dtype: object\n\nIn [13]: df.a.str.contains(\"foo\", na=False)\nOut[13]:\n0     True\n1     True\n2    False\n3    False\nName: a, dtype: bool\nstr.replaceIn [21]: df.loc[df.a.str.contains(\"foo\", na=False)]\nOut[21]:\n      a\n0  foo1\n1  foo2\n"}, {"idx": "webquery-test-7", "doc": "Extract a part of the filepath (a directory) in Python", "code": "import os\n## first file in current dir (with full path)\nfile = os.path.join(os.getcwd(), os.listdir(os.getcwd())[0])\nfile\nos.path.dirname(file) ## directory of file\nos.path.dirname(os.path.dirname(file)) ## directory of directory of file\n...\ndir = os.path.dirname(os.path.dirname(file)) ## dir of dir of file\n## once you're at the directory level you want, with the desired directory as the final path node:\ndirname1 = os.path.basename(dir) \ndirname2 = os.path.split(dir)[1] ## if you look at the documentation, this is exactly what os.path.basename does.\n"}, {"idx": "webquery-test-8", "doc": "In Python, how do I iterate over a dictionary in sorted key order?", "code": "&gt;&gt;&gt; d = {\"x\":2, \"h\":15, \"a\":2222}\n&gt;&gt;&gt; it = iter(sorted(d.iteritems()))\n&gt;&gt;&gt; it.next()\n('a', 2222)\n&gt;&gt;&gt; it.next()\n('h', 15)\n&gt;&gt;&gt; it.next()\n('x', 2)\n&gt;&gt;&gt;\nfor key, value in d.iteritems(): ...&gt;&gt;&gt; d = {\"x\":2, \"h\":15, \"a\":2222}\n&gt;&gt;&gt; for key, value in sorted(d.iteritems()):\n&gt;&gt;&gt;     print(key, value)\n('a', 2222)\n('h', 15)\n('x', 2)\n&gt;&gt;&gt;\nd.items()d.items()"}, {"idx": "webquery-test-9", "doc": "anaconda update all possible packages?", "code": "conda update --all\n-c conda-forgeconda create -n myenvconda create -n myenvconda create -n myenv"}, {"idx": "webquery-test-10", "doc": "In TensorFlow, what is the difference between Session.run() and Tensor.eval()?", "code": "TensorTensorTensort = tf.constant(42.0)\nsess = tf.Session()\nwith sess.as_default():   # or `with sess:` to close on exit\n    assert sess is tf.get_default_session()\n    assert t.eval() == sess.run(t)\nsess.run()t = tf.constant(42.0)\nu = tf.constant(37.0)\ntu = tf.mul(t, u)\nut = tf.mul(u, t)\nwith sess.as_default():\n   tu.eval()  # runs one step\n   ut.eval()  # runs one step\n   sess.run([tu, ut])  # evaluates both tensors in a single step\nevalevaleval"}, {"idx": "webquery-test-11", "doc": "How to skip iterations in a loop?", "code": "continue"}, {"idx": "webquery-test-12", "doc": "How to get first element in a list of tuples?", "code": "&gt;&gt;&gt; a = [(1, u'abc'), (2, u'def')]\n&gt;&gt;&gt; [i[0] for i in a]\n[1, 2]\n"}, {"idx": "webquery-test-13", "doc": "Shell Script: Execute a python program from within a shell script", "code": "python path/to/the/python_script.py\n#!/bin/sh\npython python_script.py\nchmod u+x job.shchmod u+x job.sh"}, {"idx": "webquery-test-14", "doc": "VSCode -- how to set working directory for debugging a Python program", "code": "launch.json\"cwd\": \"${fileDirname}\"\nfileDirnamePython: Current File (Integrated Terminal)Python: Current File (Integrated Terminal)Python: Current File (Integrated Terminal){\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n    {\n            \"name\": \"Python: Current File (Integrated Terminal)\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"program\": \"${file}\",\n            \"console\": \"integratedTerminal\",\n            \"cwd\": \"${fileDirname}\"\n    }, \n\n    //... other settings, but I modified the \"Current File\" setting above ...\n}\nlaunch.jsonlaunch.jsonlaunch.jsonlaunch.jsonlaunch.jsonlaunch.json"}, {"idx": "webquery-test-15", "doc": "Seeing escape characters when pressing the arrow keys in python shell", "code": "readlinepip install readline\n"}, {"idx": "webquery-test-16", "doc": "Is it possible to implement a Python for range loop without an iterator variable?", "code": "def loop(f,n):\n    for i in xrange(n): f()\n\nloop(lambda: &lt;insert expression here&gt;, 5)\ni_for _ in range(n):\n    do_something()\n_&gt;&gt;&gt; 1+2\n3\n&gt;&gt;&gt; _\n3\n&gt;&gt;&gt; for _ in xrange(10): pass\n...\n&gt;&gt;&gt; _\n9\n&gt;&gt;&gt; 1+2\n3\n&gt;&gt;&gt; _\n9\nidentifier ::= (letter|\"_\") (letter | digit | \"_\")*\n"}, {"idx": "webquery-test-17", "doc": "Is it possible to specify your own distance function using scikit-learn K-Means Clustering?", "code": "#!/usr/bin/env python\n# kmeans.py using any of the 20-odd metrics in scipy.spatial.distance\n# kmeanssample 2 pass, first sample sqrt(N)\n\nfrom __future__ import division\nimport random\nimport numpy as np\nfrom scipy.spatial.distance import cdist  # $scipy/spatial/distance.py\n    # http://docs.scipy.org/doc/scipy/reference/spatial.html\nfrom scipy.sparse import issparse  # $scipy/sparse/csr.py\n\n__date__ = \"2011-11-17 Nov denis\"\n    # X sparse, any cdist metric: real app ?\n    # centres get dense rapidly, metrics in high dim hit distance whiteout\n    # vs unsupervised / semi-supervised svm\n\n#...............................................................................\ndef kmeans( X, centres, delta=.001, maxiter=10, metric=\"euclidean\", p=2, verbose=1 ):\n    \"\"\" centres, Xtocentre, distances = kmeans( X, initial centres ... )\n    in:\n        X N x dim  may be sparse\n        centres k x dim: initial centres, e.g. random.sample( X, k )\n        delta: relative error, iterate until the average distance to centres\n            is within delta of the previous average distance\n        maxiter\n        metric: any of the 20-odd in scipy.spatial.distance\n            \"chebyshev\" = max, \"cityblock\" = L1, \"minkowski\" with p=\n            or a function( Xvec, centrevec ), e.g. Lqmetric below\n        p: for minkowski metric -- local mod cdist for 0 &lt; p &lt; 1 too\n        verbose: 0 silent, 2 prints running distances\n    out:\n        centres, k x dim\n        Xtocentre: each X -&gt; its nearest centre, ints N -&gt; k\n        distances, N\n    see also: kmeanssample below, class Kmeans below.\n    \"\"\"\n    if not issparse(X):\n        X = np.asanyarray(X)  # ?\n    centres = centres.todense() if issparse(centres) \\\n        else centres.copy()\n    N, dim = X.shape\n    k, cdim = centres.shape\n    if dim != cdim:\n        raise ValueError( \"kmeans: X %s and centres %s must have the same number of columns\" % (\n            X.shape, centres.shape ))\n    if verbose:\n        print \"kmeans: X %s  centres %s  delta=%.2g  maxiter=%d  metric=%s\" % (\n            X.shape, centres.shape, delta, maxiter, metric)\n    allx = np.arange(N)\n    prevdist = 0\n    for jiter in range( 1, maxiter+1 ):\n        D = cdist_sparse( X, centres, metric=metric, p=p )  # |X| x |centres|\n        xtoc = D.argmin(axis=1)  # X -&gt; nearest centre\n        distances = D[allx,xtoc]\n        avdist = distances.mean()  # median ?\n        if verbose &gt;= 2:\n            print \"kmeans: av |X - nearest centre| = %.4g\" % avdist\n        if (1 - delta) * prevdist &lt;= avdist &lt;= prevdist \\\n        or jiter == maxiter:\n            break\n        prevdist = avdist\n        for jc in range(k):  # (1 pass in C)\n            c = np.where( xtoc == jc )[0]\n            if len(c) &gt; 0:\n                centres[jc] = X[c].mean( axis=0 )\n    if verbose:\n        print \"kmeans: %d iterations  cluster sizes:\" % jiter, np.bincount(xtoc)\n    if verbose &gt;= 2:\n        r50 = np.zeros(k)\n        r90 = np.zeros(k)\n        for j in range(k):\n            dist = distances[ xtoc == j ]\n            if len(dist) &gt; 0:\n                r50[j], r90[j] = np.percentile( dist, (50, 90) )\n        print \"kmeans: cluster 50 % radius\", r50.astype(int)\n        print \"kmeans: cluster 90 % radius\", r90.astype(int)\n            # scale L1 / dim, L2 / sqrt(dim) ?\n    return centres, xtoc, distances\n\n#...............................................................................\ndef kmeanssample( X, k, nsample=0, **kwargs ):\n    \"\"\" 2-pass kmeans, fast for large N:\n        1) kmeans a random sample of nsample ~ sqrt(N) from X\n        2) full kmeans, starting from those centres\n    \"\"\"\n        # merge w kmeans ? mttiw\n        # v large N: sample N^1/2, N^1/2 of that\n        # seed like sklearn ?\n    N, dim = X.shape\n    if nsample == 0:\n        nsample = max( 2*np.sqrt(N), 10*k )\n    Xsample = randomsample( X, int(nsample) )\n    pass1centres = randomsample( X, int(k) )\n    samplecentres = kmeans( Xsample, pass1centres, **kwargs )[0]\n    return kmeans( X, samplecentres, **kwargs )\n\ndef cdist_sparse( X, Y, **kwargs ):\n    \"\"\" -&gt; |X| x |Y| cdist array, any cdist metric\n        X or Y may be sparse -- best csr\n    \"\"\"\n        # todense row at a time, v slow if both v sparse\n    sxy = 2*issparse(X) + issparse(Y)\n    if sxy == 0:\n        return cdist( X, Y, **kwargs )\n    d = np.empty( (X.shape[0], Y.shape[0]), np.float64 )\n    if sxy == 2:\n        for j, x in enumerate(X):\n            d[j] = cdist( x.todense(), Y, **kwargs ) [0]\n    elif sxy == 1:\n        for k, y in enumerate(Y):\n            d[:,k] = cdist( X, y.todense(), **kwargs ) [0]\n    else:\n        for j, x in enumerate(X):\n            for k, y in enumerate(Y):\n                d[j,k] = cdist( x.todense(), y.todense(), **kwargs ) [0]\n    return d\n\ndef randomsample( X, n ):\n    \"\"\" random.sample of the rows of X\n        X may be sparse -- best csr\n    \"\"\"\n    sampleix = random.sample( xrange( X.shape[0] ), int(n) )\n    return X[sampleix]\n\ndef nearestcentres( X, centres, metric=\"euclidean\", p=2 ):\n    \"\"\" each X -&gt; nearest centre, any metric\n            euclidean2 (~ withinss) is more sensitive to outliers,\n            cityblock (manhattan, L1) less sensitive\n    \"\"\"\n    D = cdist( X, centres, metric=metric, p=p )  # |X| x |centres|\n    return D.argmin(axis=1)\n\ndef Lqmetric( x, y=None, q=.5 ):\n    # yes a metric, may increase weight of near matches; see ...\n    return (np.abs(x - y) ** q) .mean() if y is not None \\\n        else (np.abs(x) ** q) .mean()\n\n#...............................................................................\nclass Kmeans:\n    \"\"\" km = Kmeans( X, k= or centres=, ... )\n        in: either initial centres= for kmeans\n            or k= [nsample=] for kmeanssample\n        out: km.centres, km.Xtocentre, km.distances\n        iterator:\n            for jcentre, J in km:\n                clustercentre = centres[jcentre]\n                J indexes e.g. X[J], classes[J]\n    \"\"\"\n    def __init__( self, X, k=0, centres=None, nsample=0, **kwargs ):\n        self.X = X\n        if centres is None:\n            self.centres, self.Xtocentre, self.distances = kmeanssample(\n                X, k=k, nsample=nsample, **kwargs )\n        else:\n            self.centres, self.Xtocentre, self.distances = kmeans(\n                X, centres, **kwargs )\n\n    def __iter__(self):\n        for jc in range(len(self.centres)):\n            yield jc, (self.Xtocentre == jc)\n\n#...............................................................................\nif __name__ == \"__main__\":\n    import random\n    import sys\n    from time import time\n\n    N = 10000\n    dim = 10\n    ncluster = 10\n    kmsample = 100  # 0: random centres, &gt; 0: kmeanssample\n    kmdelta = .001\n    kmiter = 10\n    metric = \"cityblock\"  # \"chebyshev\" = max, \"cityblock\" L1,  Lqmetric\n    seed = 1\n\n    exec( \"\\n\".join( sys.argv[1:] ))  # run this.py N= ...\n    np.set_printoptions( 1, threshold=200, edgeitems=5, suppress=True )\n    np.random.seed(seed)\n    random.seed(seed)\n\n    print \"N %d  dim %d  ncluster %d  kmsample %d  metric %s\" % (\n        N, dim, ncluster, kmsample, metric)\n    X = np.random.exponential( size=(N,dim) )\n        # cf scikits-learn datasets/\n    t0 = time()\n    if kmsample &gt; 0:\n        centres, xtoc, dist = kmeanssample( X, ncluster, nsample=kmsample,\n            delta=kmdelta, maxiter=kmiter, metric=metric, verbose=2 )\n    else:\n        randomcentres = randomsample( X, ncluster )\n        centres, xtoc, dist = kmeans( X, randomcentres,\n            delta=kmdelta, maxiter=kmiter, metric=metric, verbose=2 )\n    print \"%.0f msec\" % ((time() - t0) * 1000)\n\n    # also ~/py/np/kmeans/test-kmeans.py\ncosinedistance( X, Y ) = 1 - X . Y = Euclidean distance |X - Y|^2 / 2\n[44 37  9  5  5] %"}, {"idx": "webquery-test-18", "doc": "Get list of pandas dataframe columns based on data type", "code": "groupby&gt;&gt;&gt; df = pd.DataFrame([[1, 2.3456, 'c', 'd', 78]], columns=list(\"ABCDE\"))\n&gt;&gt;&gt; df\n   A       B  C  D   E\n0  1  2.3456  c  d  78\n\n[1 rows x 5 columns]\n&gt;&gt;&gt; df.dtypes\nA      int64\nB    float64\nC     object\nD     object\nE      int64\ndtype: object\n&gt;&gt;&gt; g = df.columns.to_series().groupby(df.dtypes).groups\n&gt;&gt;&gt; g\n{dtype('int64'): ['A', 'E'], dtype('float64'): ['B'], dtype('O'): ['C', 'D']}\n&gt;&gt;&gt; {k.name: v for k, v in g.items()}\n{'object': ['C', 'D'], 'int64': ['A', 'E'], 'float64': ['B']}\n"}, {"idx": "webquery-test-19", "doc": "Calculating Pearson correlation and significance in Python", "code": "scipy.statsfrom pydoc import help\nfrom scipy.stats.stats import pearsonr\nhelp(pearsonr)\n\n&gt;&gt;&gt;\nHelp on function pearsonr in module scipy.stats.stats:\n\npearsonr(x, y)\n Calculates a Pearson correlation coefficient and the p-value for testing\n non-correlation.\n\n The Pearson correlation coefficient measures the linear relationship\n between two datasets. Strictly speaking, Pearson's correlation requires\n that each dataset be normally distributed. Like other correlation\n coefficients, this one varies between -1 and +1 with 0 implying no\n correlation. Correlations of -1 or +1 imply an exact linear\n relationship. Positive correlations imply that as x increases, so does\n y. Negative correlations imply that as x increases, y decreases.\n\n The p-value roughly indicates the probability of an uncorrelated system\n producing datasets that have a Pearson correlation at least as extreme\n as the one computed from these datasets. The p-values are not entirely\n reliable but are probably reasonable for datasets larger than 500 or so.\n\n Parameters\n ----------\n x : 1D array\n y : 1D array the same length as x\n\n Returns\n -------\n (Pearson's correlation coefficient,\n  2-tailed p-value)\n\n References\n ----------\n http://www.statsoft.com/textbook/glosp.html#Pearson%20Correlation\n"}, {"idx": "webquery-test-20", "doc": "Difference between two dates in Python", "code": "---from datetime import datetime\n\ndef days_between(d1, d2):\n    d1 = datetime.strptime(d1, \"%Y-%m-%d\")\n    d2 = datetime.strptime(d2, \"%Y-%m-%d\")\n    return abs((d2 - d1).days)\n"}, {"idx": "webquery-test-1", "doc": "How to keep a Python script output window open?", "code": "python myscript.py\npython myscript.py\npython myscript.py\npython myscript.py\npython myscript.py\n"}, {"idx": "webquery-test-2", "doc": "How to put individual tags for a matplotlib scatter plot?", "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nN = 10\ndata = np.random.random((N, 4))\nlabels = ['point{0}'.format(i) for i in range(N)]\n\nplt.subplots_adjust(bottom = 0.1)\nplt.scatter(\n    data[:, 0], data[:, 1], marker='o', c=data[:, 2], s=data[:, 3] * 1500,\n    cmap=plt.get_cmap('Spectral'))\n\nfor label, x, y in zip(labels, data[:, 0], data[:, 1]):\n    plt.annotate(\n        label,\n        xy=(x, y), xytext=(-20, 20),\n        textcoords='offset points', ha='right', va='bottom',\n        bbox=dict(boxstyle='round,pad=0.5', fc='yellow', alpha=0.5),\n        arrowprops=dict(arrowstyle = '-&gt;', connectionstyle='arc3,rad=0'))\n\nplt.show()\n"}, {"idx": "webquery-test-3", "doc": "Usage of sys.stdout.flush() method", "code": "sys.stdout.flush()"}, {"idx": "webquery-test-4", "doc": "python: Change the scripts working directory to the script's own directory", "code": "import os\nos.chdir(\"/home/udi/foo\")\nos.pathimport os\n\nabspath = os.path.abspath(__file__)\ndname = os.path.dirname(abspath)\nos.chdir(dname)\n"}, {"idx": "webquery-test-5", "doc": "What is the maximum float in Python?", "code": "floatfloat&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.float_info\nsys.floatinfo(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2\n250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsil\non=2.2204460492503131e-16, radix=2, rounds=1)\nsys.float_info.max&gt;&gt;&gt; sys.float_info.max\n1.7976931348623157e+308\n&gt;&gt;&gt; infinity = float(\"inf\")\n&gt;&gt;&gt; infinity\ninf\n&gt;&gt;&gt; infinity / 10000\ninf\nlong"}, {"idx": "webquery-test-6", "doc": "What are Flask Blueprints, exactly?", "code": "# An example\nfrom flask import Blueprint\n\ntree_mold = Blueprint(\"mold\", __name__)\n\n@tree_mold.route(\"/leaves\")\ndef leaves():\n    return \"This tree has leaves\"\n\n@tree_mold.route(\"/roots\")\ndef roots():\n    return \"And roots as well\"\n\n@tree_mold.route(\"/rings\")\n@tree_mold.route(\"/rings/&lt;int:year&gt;\")\ndef rings(year=None):\n    return \"Looking at the rings for {year}\".format(year=year)\nfrom tree_workshop import tree_mold\n\napp.register_blueprint(tree_mold, url_prefix=\"/oak\")\napp.register_blueprint(tree_mold, url_prefix=\"/fir\")\napp.register_blueprint(tree_mold, url_prefix=\"/ash\")\nregister_blueprintregister_blueprint"}, {"idx": "webquery-test-7", "doc": "Create a list with initial capacity in Python", "code": "def doAppend( size=10000 ):\n    result = []\n    for i in range(size):\n        message= \"some unique object %d\" % ( i, )\n        result.append(message)\n    return result\n\ndef doAllocate( size=10000 ):\n    result=size*[None]\n    for i in range(size):\n        message= \"some unique object %d\" % ( i, )\n        result[i]= message\n    return result\nsimple append 0.0102\npre-allocate  0.0098\n"}, {"idx": "webquery-test-8", "doc": "How to make good reproducible pandas examples", "code": "In [1]: df = pd.DataFrame([[1, 2], [1, 3], [4, 6]], columns=['A', 'B'])\nIn [1]: df = pd.DataFrame([[1, 2], [1, 3], [4, 6]], columns=['A', 'B'])\nIn [1]: df = pd.DataFrame([[1, 2], [1, 3], [4, 6]], columns=['A', 'B'])\nIn [1]: df = pd.DataFrame([[1, 2], [1, 3], [4, 6]], columns=['A', 'B'])\nIn [1]: df = pd.DataFrame([[1, 2], [1, 3], [4, 6]], columns=['A', 'B'])\nIn [1]: df = pd.DataFrame([[1, 2], [1, 3], [4, 6]], columns=['A', 'B'])\nIn [1]: df = pd.DataFrame([[1, 2], [1, 3], [4, 6]], columns=['A', 'B'])\nIn [1]: df = pd.DataFrame([[1, 2], [1, 3], [4, 6]], columns=['A', 'B'])\nIn [1]: df = pd.DataFrame([[1, 2], [1, 3], [4, 6]], columns=['A', 'B'])\nIn [1]: df = pd.DataFrame([[1, 2], [1, 3], [4, 6]], columns=['A', 'B'])\nIn [1]: df = pd.DataFrame([[1, 2], [1, 3], [4, 6]], columns=['A', 'B'])\nIn [1]: df = pd.DataFrame([[1, 2], [1, 3], [4, 6]], columns=['A', 'B'])\nIn [11]: df\nOut[11]:\n     C\nA B\n1 2  3\n  2  6\nIn [11]: df\nOut[11]:\n     C\nA B\n1 2  3\n  2  6\nIn [11]: df\nOut[11]:\n     C\nA B\n1 2  3\n  2  6\nIn [11]: df\nOut[11]:\n     C\nA B\n1 2  3\n  2  6\ndf = pd.read_csv('my_secret_file.csv')  # ideally with lots of parsing options\n"}, {"idx": "webquery-test-9", "doc": "Having options in argparse with a dash", "code": "argparse------args.pm_export"}, {"idx": "webquery-test-10", "doc": "pandas loc vs. iloc vs. at vs. iat?", "code": "atatatat"}, {"idx": "webquery-test-11", "doc": "Numpy: Get random set of rows from 2D array", "code": "&gt;&gt;&gt; A = np.random.randint(5, size=(10,3))\n&gt;&gt;&gt; A\narray([[1, 3, 0],\n       [3, 2, 0],\n       [0, 2, 1],\n       [1, 1, 4],\n       [3, 2, 2],\n       [0, 1, 0],\n       [1, 3, 1],\n       [0, 4, 1],\n       [2, 4, 2],\n       [3, 3, 1]])\n&gt;&gt;&gt; idx = np.random.randint(10, size=2)\n&gt;&gt;&gt; idx\narray([7, 6])\n&gt;&gt;&gt; A[idx,:]\narray([[0, 4, 1],\n       [1, 3, 1]])\nA[np.random.randint(A.shape[0], size=2), :]\nA[np.random.choice(A.shape[0], 2, replace=False), :]\n"}, {"idx": "webquery-test-12", "doc": "pandas dataframe columns scaling with sklearn", "code": "pandaspandas&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; from sklearn.preprocessing import MinMaxScaler\n\n\n&gt;&gt;&gt; scaler = MinMaxScaler()\n\n&gt;&gt;&gt; dfTest = pd.DataFrame({'A':[14.00,90.20,90.95,96.27,91.21],\n                           'B':[103.02,107.26,110.35,114.23,114.68],\n                           'C':['big','small','big','small','small']})\n\n&gt;&gt;&gt; dfTest[['A', 'B']] = scaler.fit_transform(dfTest[['A', 'B']])\n\n&gt;&gt;&gt; dfTest\n          A         B      C\n0  0.000000  0.000000    big\n1  0.926219  0.363636  small\n2  0.935335  0.628645    big\n3  1.000000  0.961407  small\n4  0.938495  1.000000  small\n"}, {"idx": "webquery-test-13", "doc": "How can I access \"static\" class variables within methods in Python?", "code": "barbarbarbarbar"}, {"idx": "webquery-test-14", "doc": "Downloading a picture via urllib and python", "code": "import urllib\nurllib.urlretrieve(\"http://www.gunnerkrigg.com//comics/00000001.jpg\", \"00000001.jpg\")\nimport urllib.request\nurllib.request.urlretrieve(\"http://www.gunnerkrigg.com//comics/00000001.jpg\", \"00000001.jpg\")\n"}, {"idx": "webquery-test-15", "doc": "Keras, How to get the output of each layer?", "code": "model.layers[index].outputfrom keras import backend as K\n\ninp = model.input                                           # input placeholder\noutputs = [layer.output for layer in model.layers]          # all layer outputs\nfunctors = [K.function([inp, K.learning_phase()], [out]) for out in outputs]    # evaluation functions\n\n# Testing\ntest = np.random.random(input_shape)[np.newaxis,...]\nlayer_outs = [func([test, 1.]) for func in functors]\nprint layer_outs\nlearning_phaselearning_phaselearning_phaselearning_phaseK.functionK.learning_phase()from keras import backend as K\n\ninp = model.input                                           # input placeholder\noutputs = [layer.output for layer in model.layers]          # all layer outputs\nfunctors = [K.function([inp], [out]) for out in outputs]    # evaluation functions\n\n# Testing\ntest = np.random.random(input_shape)[np.newaxis,...]\nlayer_outs = [func([test]) for func in functors]\nprint layer_outs\nfrom keras import backend as K\n\ninp = model.input                                           # input placeholder\noutputs = [layer.output for layer in model.layers]          # all layer outputs\nfunctor = K.function([inp, K.learning_phase()], outputs )   # evaluation function\n\n# Testing\ntest = np.random.random(input_shape)[np.newaxis,...]\nlayer_outs = functor([test, 1.])\nprint layer_outs\n"}, {"idx": "webquery-test-16", "doc": "datetime dtypes in pandas read_csv", "code": "pandas.read_csv()pandas.read_csv()date_parserdate_parserheaders = ['col1', 'col2', 'col3', 'col4']\ndtypes = {'col1': 'str', 'col2': 'str', 'col3': 'str', 'col4': 'float'}\nparse_dates = ['col1', 'col2']\npd.read_csv(file, sep='\\t', header=None, names=headers, dtype=dtypes, parse_dates=parse_dates)\ncol1col1pandas.read_csv()pandas.read_csv()date_parser = pd.datetools.to_datetime\ndate_parser = pd.datetools.to_datetime()\npd.datetools.to_datetimepd.datetools.to_datetime"}, {"idx": "webquery-test-17", "doc": "Python: Fetch first 10 results from a list", "code": "list[:10]\nlist"}, {"idx": "webquery-test-18", "doc": "How to test if a string contains one of the substrings in a list, in pandas?", "code": "|||searchforsearchfor&gt;&gt;&gt; searchfor = ['og', 'at']\n&gt;&gt;&gt; s[s.str.contains('|'.join(searchfor))]\n0    cat\n1    hat\n2    dog\n3    fog\ndtype: object\n$$re.escape&gt;&gt;&gt; import re\n&gt;&gt;&gt; matches = ['$money', 'x^y']\n&gt;&gt;&gt; safe_matches = [re.escape(m) for m in matches]\n&gt;&gt;&gt; safe_matches\n['\\\\$money', 'x\\\\^y']\nstr.contains"}, {"idx": "webquery-test-1", "doc": "Plotting in a non-blocking way with Matplotlib", "code": "plt.ion()plt.ion()plt.ion()plt.ion()import numpy as np\nfrom matplotlib import pyplot as plt\n\ndef main():\n    plt.axis([-50,50,0,10000])\n    plt.ion()\n    plt.show()\n\n    x = np.arange(-50, 51)\n    for pow in range(1,5):   # plot x^1, x^2, ..., x^4\n        y = [Xi**pow for Xi in x]\n        plt.plot(x, y)\n        plt.draw()\n        plt.pause(0.001)\n        input(\"Press [enter] to continue.\")\n\nif __name__ == '__main__':\n    main()\n"}, {"idx": "webquery-test-2", "doc": "Python 'If not' syntax", "code": "if bar is not Noneif bar is not Noneif bar is not Noneif bar is not Noneif bar is not Noneif bar is not None"}, {"idx": "webquery-test-3", "doc": "Retrieving parameters from a URL", "code": "import urlparse\n\nurl = 'https://www.example.com/some_path?some_key=some_value'\nparsed = urlparse.urlparse(url)\ncaptured_value = urlparse.parse_qs(parsed.query)['some_key'][0]\n\nprint captured_value\nfrom urllib.parse import urlparse\nfrom urllib.parse import parse_qs\n\nurl = 'https://www.example.com/some_path?some_key=some_value'\nparsed_url = urlparse(url)\ncaptured_value = parse_qs(parsed_url.query)['some_key'][0]\n\nprint(captured_value)\nparse_qsparse_qsparse_qs"}, {"idx": "webquery-test-4", "doc": "How do I concatenate text files in Python?", "code": "filenames = ['file1.txt', 'file2.txt', ...]\nwith open('path/to/output/file', 'w') as outfile:\n    for fname in filenames:\n        with open(fname) as infile:\n            for line in infile:\n                outfile.write(line)\nfilenames = ['file1.txt', 'file2.txt', ...]\nwith open('path/to/output/file', 'w') as outfile:\n    for fname in filenames:\n        with open(fname) as infile:\n            outfile.write(infile.read())\nfilenames = ['file1.txt', 'file2.txt', ...]\nwith open('path/to/output/file', 'w') as outfile:\n    for line in itertools.chain.from_iterable(itertools.imap(open, filnames)):\n        outfile.write(line)\n"}, {"idx": "webquery-test-5", "doc": "Python: finding an element in a list", "code": "&gt;&gt;&gt; li\n['a', 'b', 'new', 'mpilgrim', 'z', 'example', 'new', 'two', 'elements']\n&gt;&gt;&gt; li.index(\"example\")\n5\n"}, {"idx": "webquery-test-6", "doc": "add a string prefix to each value in a string column using Pandas", "code": "df['col'] = 'str' + df['col'].astype(str)\n&gt;&gt;&gt; df = pd.DataFrame({'col':['a',0]})\n&gt;&gt;&gt; df\n  col\n0   a\n1   0\n&gt;&gt;&gt; df['col'] = 'str' + df['col'].astype(str)\n&gt;&gt;&gt; df\n    col\n0  stra\n1  str0\n"}, {"idx": "webquery-test-7", "doc": "pandas: multiple conditions while indexing data frame - unexpected behavior", "code": "df1df1 = df[(df.a != -1) &amp; (df.b != -1)]\ndf.adf.adf2df2 = df[(df.a != -1) | (df.b != -1)]\ndf.adf.adf['a'][1] = -1df['a'][1] = -1df['a'][1] = -1"}, {"idx": "webquery-test-8", "doc": "How to access a dictionary element in a Django template?", "code": "choices = {'key1':'val1', 'key2':'val2'}\n&lt;ul&gt;\n{% for key, value in choices.items %} \n  &lt;li&gt;{{key}} - {{value}}&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n.items.items.items"}, {"idx": "webquery-test-9", "doc": "How to know which Python is running in Jupyter notebook?", "code": "from platform import python_version\n\nprint(python_version())\n3.6.5\n"}, {"idx": "webquery-test-10", "doc": "Python pip install fails: invalid command egg_info", "code": "egg_infopip install Distributepip install --upgrade setuptoolspip install --upgrade setuptools"}, {"idx": "webquery-test-11", "doc": "How to change the name of a Django app?", "code": "views.pyviews.pyviews.pyviews.pyviews.pyviews.pyviews.pyviews.pyviews.pyviews.pyviews.pyviews.pyviews.pyviews.pyviews.pyviews.pyviews.pyviews.pyviews.pyviews.pyImportError: No module named ..."}, {"idx": "webquery-test-12", "doc": "pandas resample documentation", "code": "B         business day frequency\nC         custom business day frequency (experimental)\nD         calendar day frequency\nW         weekly frequency\nM         month end frequency\nSM        semi-month end frequency (15th and end of month)\nBM        business month end frequency\nCBM       custom business month end frequency\nMS        month start frequency\nSMS       semi-month start frequency (1st and 15th)\nBMS       business month start frequency\nCBMS      custom business month start frequency\nQ         quarter end frequency\nBQ        business quarter endfrequency\nQS        quarter start frequency\nBQS       business quarter start frequency\nA         year end frequency\nBA, BY    business year end frequency\nAS, YS    year start frequency\nBAS, BYS  business year start frequency\nBH        business hour frequency\nH         hourly frequency\nT, min    minutely frequency\nS         secondly frequency\nL, ms     milliseconds\nU, us     microseconds\nN         nanoseconds\nhowhow"}, {"idx": "webquery-test-13", "doc": "Getting list of lists into pandas DataFrame", "code": "pd.DataFramedf = pd.DataFrame(table, columns=headers)\ndf\n\n   Heading1  Heading2\n0         1         2\n1         3         4\n"}, {"idx": "webquery-test-14", "doc": "How can I use if/else in a dictionary comprehension?", "code": "A if test else B{ (some_key if condition else default_key):(something_if_true if condition\n          else something_if_false) for key, value in dict_.items() }\nif"}, {"idx": "webquery-test-1", "doc": "Open S3 object as a string with Boto3", "code": "readimport boto3\n\ns3 = boto3.resource('s3')\n\nobj = s3.Object(bucket, key)\nobj.get()['Body'].read().decode('utf-8') \n"}, {"idx": "webquery-test-2", "doc": "python capitalize first letter only", "code": "&gt;&gt;&gt; 'bob'.title()\n'Bob'\n&gt;&gt;&gt; 'sandy'.title()\n'Sandy'\n&gt;&gt;&gt; '1bob'.title()\n'1Bob'\n&gt;&gt;&gt; '1sandy'.title()\n'1Sandy'\n&gt;&gt;&gt; '1bob sandy'.title()\n'1Bob Sandy'\n&gt;&gt;&gt; '1JoeBob'.title()\n'1Joebob'\n.capitalize().capitalize()"}, {"idx": "webquery-test-3", "doc": "Add missing dates to pandas dataframe", "code": "Series.reindeximport pandas as pd\n\nidx = pd.date_range('09-01-2013', '09-30-2013')\n\ns = pd.Series({'09-02-2013': 2,\n               '09-03-2013': 10,\n               '09-06-2013': 5,\n               '09-07-2013': 1})\ns.index = pd.DatetimeIndex(s.index)\n\ns = s.reindex(idx, fill_value=0)\nprint(s)\n2013-09-01     0\n2013-09-02     2\n2013-09-03    10\n2013-09-04     0\n2013-09-05     0\n2013-09-06     5\n2013-09-07     1\n2013-09-08     0\n...\n"}, {"idx": "webquery-test-4", "doc": "Suppress Scientific Notation in Numpy When Creating Array From Nested List", "code": "np.set_printoptions(suppress=True)\n"}, {"idx": "webquery-test-5", "doc": "Extracting specific columns in numpy array", "code": "11X = data[:, [1, 9]]\nx, y = data[:, 1], data[:, 9]\ndata[:, ['Column Name1','Column Name2']]\ndata.dtype.names"}, {"idx": "webquery-test-6", "doc": "Find element's index in pandas Series", "code": "&gt;&gt;&gt; myseries[myseries == 7]\n3    7\ndtype: int64\n&gt;&gt;&gt; myseries[myseries == 7].index[0]\n3\n"}, {"idx": "webquery-test-7", "doc": "Bulk package updates using Conda", "code": "conda update --allconda search --outdatedconda search --outdated"}, {"idx": "webquery-test-8", "doc": "Django: \"projects\" vs \"apps\"", "code": "startprojectstartprojectstartprojectstartprojectsite/\n    models.py\n    settings.py\n    tests.py\n    urls.py\n    views.py\n"}, {"idx": "webquery-test-9", "doc": "Why do you need explicitly have the \"self\" argument in a Python method?", "code": "this.self.__class__self.__class__"}, {"idx": "webquery-test-10", "doc": "How to limit the maximum value of a numeric field in a Django model?", "code": "from django.db.models import IntegerField, Model\nfrom django.core.validators import MaxValueValidator, MinValueValidator\n\nclass CoolModelBro(Model):\n    limited_integer_field = IntegerField(\n        default=1,\n        validators=[\n            MaxValueValidator(100),\n            MinValueValidator(1)\n        ]\n     )\nModelForm"}, {"idx": "webquery-test-11", "doc": "\"Cloning\" row or column vectors", "code": "numpy.tile&gt;&gt;&gt; tile(array([1,2,3]), (3, 1))\narray([[1, 2, 3],\n       [1, 2, 3],\n       [1, 2, 3]])\n&gt;&gt;&gt; tile(array([[1,2,3]]).transpose(), (1, 3))\narray([[1, 1, 1],\n       [2, 2, 2],\n       [3, 3, 3]])\n"}, {"idx": "webquery-test-12", "doc": "Integrating Python Poetry with Docker", "code": "poetrypoetrypoetrycurl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -\npoetrypoetrypoetrypip install 'poetry==$POETRY_VERSION'pyproject.toml[build-system]\n# Should be the same as `$POETRY_VERSION`:\nrequires = [\"poetry&gt;=1.0\"]\nbuild-backend = \"poetry.masonry.api\"\ndockerpyproject.tomlpyproject.tomlCOPY poetry.lock pyproject.toml /code/\npoetryvirtualenvvirtualenvvirtualenvDockerfilepoetry install $(test \"$YOUR_ENV\" == production &amp;&amp; echo \"--no-dev\")\n$YOUR_ENV$YOUR_ENV--no-interaction--no-interactionFROM python:3.6.6-alpine3.7\n\nARG YOUR_ENV\n\nENV YOUR_ENV=${YOUR_ENV} \\\n  PYTHONFAULTHANDLER=1 \\\n  PYTHONUNBUFFERED=1 \\\n  PYTHONHASHSEED=random \\\n  PIP_NO_CACHE_DIR=off \\\n  PIP_DISABLE_PIP_VERSION_CHECK=on \\\n  PIP_DEFAULT_TIMEOUT=100 \\\n  POETRY_VERSION=1.0.0\n\n# System deps:\nRUN pip install \"poetry==$POETRY_VERSION\"\n\n# Copy only requirements to cache them in docker layer\nWORKDIR /code\nCOPY poetry.lock pyproject.toml /code/\n\n# Project initialization:\nRUN poetry config virtualenvs.create false \\\n  &amp;&amp; poetry install $(test \"$YOUR_ENV\" == production &amp;&amp; echo \"--no-dev\") --no-interaction --no-ansi\n\n# Creating folders, and files for a project:\nCOPY . /code\npoetry"}, {"idx": "webquery-test-13", "doc": "How do I get IntelliJ to recognize common Python modules?", "code": "File -&gt; Project Structure -&gt; Project -&gt; Project SDK -&gt; new\nC:\\Python26C:\\Python26"}, {"idx": "webquery-test-14", "doc": "Random number between 0 and 1?", "code": "random.uniformimport random\nrandom.uniform(0, 1)\n"}, {"idx": "webquery-test-15", "doc": "How do I merge a list of dicts into a single dict?", "code": "&gt;&gt;&gt; result = {}\n&gt;&gt;&gt; for d in L:\n...    result.update(d)\n... \n&gt;&gt;&gt; result\n{'a':1,'c':1,'b':2,'d':2}\n# Python &gt;= 2.7\n{k: v for d in L for k, v in d.items()}\n\n# Python &lt; 2.7\ndict(pair for d in L for pair in d.items())\n"}, {"idx": "webquery-test-16", "doc": "Iterating through directories with Python", "code": "printimport os\nrootdir = 'C:/Users/sid/Desktop/test'\n\nfor subdir, dirs, files in os.walk(rootdir):\n    for file in files:\n        print(os.path.join(subdir, file))\n"}, {"idx": "webquery-test-17", "doc": "How can you dynamically create variables?", "code": "a = {}\nk = 0\nwhile k &lt; 10:\n    # dynamically create key\n    key = ...\n    # calculate value\n    value = ...\n    a[key] = value \n    k += 1\ncollections"}, {"idx": "webquery-test-1", "doc": "Pandas convert dataframe to array of tuples", "code": "list(data_set.itertuples(index=False))\nname=Nonelist(data_set.itertuples(index=False, name=None))\n"}, {"idx": "webquery-test-2", "doc": "Issue with virtualenv - cannot activate", "code": "sourcevenv\\Scripts\\activateactivate"}, {"idx": "webquery-test-3", "doc": "check if variable is dataframe", "code": "isinstanceif isinstance(x, pd.DataFrame):\n    ... # do something\nisinstanceNo:  type(x) is pd.DataFrame\nNo:  type(x) == pd.DataFrame\nYes: isinstance(x, pd.DataFrame)\nif obj.__class__.__name__ = 'DataFrame':\n    expect_problems_some_day()\nisinstanceisinstanceisinstanceisinstanceif isinstance(obj, basestring):\n    i_am_string(obj)\npandaspandasimport pandas as pd\nisinstance(var, pd.DataFrame)\n"}, {"idx": "webquery-test-4", "doc": "Accessing Object Memory Address", "code": "id()"}, {"idx": "webquery-test-5", "doc": "Why does PyCharm propose to change method to static?", "code": "@staticmethodself"}, {"idx": "webquery-test-6", "doc": "How to suppress scientific notation when printing float values?", "code": "''.format''.format&gt;&gt;&gt; a = -7.1855143557448603e-17\n&gt;&gt;&gt; '{:f}'.format(a)\n'-0.000000'\n&gt;&gt;&gt; '{:.20f}'.format(a)\n'-0.00000000000000007186'\n&gt;&gt;&gt; f'{a:.20f}'\n'-0.00000000000000007186'\n"}, {"idx": "webquery-test-7", "doc": "What's the difference between subprocess Popen and call (how can I use them)?", "code": "subprocess.Popensubprocess.Popenshell = Trueshell = Trueshell = Trueshell = Truesubprocess.Popensubprocess.PopenPopenPopenPopencallcallcallreturncode = call(*args, **kwargs) \nreturncode = Popen(*args, **kwargs).wait()\ncalldef call(*popenargs, timeout=None, **kwargs):\n    \"\"\"Run command with arguments.  Wait for command to complete or\n    timeout, then return the returncode attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    retcode = call([\"ls\", \"-l\"])\n    \"\"\"\n    with Popen(*popenargs, **kwargs) as p:\n        try:\n            return p.wait(timeout=timeout)\n        except:\n            p.kill()\n            p.wait()\n            raise\nPopen"}, {"idx": "webquery-test-8", "doc": "Finding the source code for built-in Python functions?", "code": "__file____file____file__inspect.getfileinspect.getfileinspect.getfileinspect.getfile"}, {"idx": "webquery-test-9", "doc": "Calling class staticmethod within the class body?", "code": "staticmethodstaticmethodclass Klass(object):\n\n    @staticmethod  # use as decorator\n    def stat_func():\n        return 42\n\n    _ANS = stat_func.__func__()  # call the staticmethod\n\n    def method(self):\n        ret = Klass.stat_func()\n        return ret\n&gt;&gt;&gt; class Foo(object):\n...     @staticmethod\n...     def foo():\n...         return 3\n...     global z\n...     z = foo\n\n&gt;&gt;&gt; z\n&lt;staticmethod object at 0x0000000002E40558&gt;\n&gt;&gt;&gt; Foo.foo\n&lt;function foo at 0x0000000002E3CBA8&gt;\n&gt;&gt;&gt; dir(z)\n['__class__', '__delattr__', '__doc__', '__format__', '__func__', '__get__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']\n&gt;&gt;&gt; z.__func__\n&lt;function foo at 0x0000000002E3CBA8&gt;\ndir"}, {"idx": "webquery-test-10", "doc": "Django - How to rename a model field using South?", "code": "db.rename_columnclass Migration:\n\n    def forwards(self, orm):\n        # Rename 'name' field to 'full_name'\n        db.rename_column('app_foo', 'name', 'full_name')\n\n\n\n\n    def backwards(self, orm):\n        # Rename 'full_name' field to 'name'\n        db.rename_column('app_foo', 'full_name', 'name')\ndb.rename_columnapp_projectitemapp_projectitemapp_projectitem"}, {"idx": "webquery-test-11", "doc": "Log exception with traceback in Python", "code": "logging.exceptionlogging.exceptionimport logging\nLOG_FILENAME = '/tmp/logging_example.out'\nlogging.basicConfig(filename=LOG_FILENAME, level=logging.DEBUG)\n\nlogging.debug('This message should go to the log file')\n\ntry:\n    run_my_stuff()\nexcept:\n    logging.exception('Got exception on main handler')\n    raise\n/tmp/logging_example.outDEBUG:root:This message should go to the log file\nERROR:root:Got exception on main handler\nTraceback (most recent call last):\n  File \"/tmp/teste.py\", line 9, in &lt;module&gt;\n    run_my_stuff()\nNameError: name 'run_my_stuff' is not defined\n"}, {"idx": "webquery-test-12", "doc": "Django optional url parameters", "code": "(?:/(?P&lt;title&gt;[a-zA-Z]+)/)?urlpatterns = patterns('',\n    url(r'^project_config/$', views.foo),\n    url(r'^project_config/(?P&lt;product&gt;\\w+)/$', views.foo),\n    url(r'^project_config/(?P&lt;product&gt;\\w+)/(?P&lt;project_id&gt;\\w+)/$', views.foo),\n)\ndef foo(request, optional_parameter=''):\n    # Your code goes here\n"}, {"idx": "webquery-test-13", "doc": "Hash Map in Python", "code": "streetno = {\"1\": \"Sachin Tendulkar\", \"2\": \"Dravid\", \"3\": \"Sehwag\", \"4\": \"Laxman\", \"5\": \"Kohli\"}\nstreetno = dict({\"1\": \"Sachin Tendulkar\", \"2\": \"Dravid\"}) \nstreetno = {}\nstreetno[\"1\"] = \"Sachin Tendulkar\" \n"}, {"idx": "webquery-test-14", "doc": "Hashing a dictionary?", "code": "sorted(d.items())sorted(d.items())json.dumps(d, sort_keys=True)\nseparatorsseparators"}, {"idx": "webquery-test-15", "doc": "argparse module How to add option without any argument?", "code": "action='store_true'&gt;&gt;&gt; from argparse import ArgumentParser\n&gt;&gt;&gt; p = ArgumentParser()\n&gt;&gt;&gt; _ = p.add_argument('-f', '--foo', action='store_true')\n&gt;&gt;&gt; args = p.parse_args()\n&gt;&gt;&gt; args.foo\nFalse\n&gt;&gt;&gt; args = p.parse_args(['-f'])\n&gt;&gt;&gt; args.foo\nTrue\n"}, {"idx": "webquery-test-16", "doc": "How to write bytes to file?", "code": "f = open('/tmp/output', 'wb')\n"}, {"idx": "webquery-test-1", "doc": "How to use newline '\\n' in f-string to format output in Python 3.6?", "code": "{}{}&gt;&gt;&gt; f'{\\}'\nSyntaxError: f-string expression part cannot include a backslash\n'\\n''\\n''\\n'names = ['Adam', 'Bob', 'Cyril']\nnl = '\\n'\ntext = f\"Winners are:{nl}{nl.join(names)}\"\nprint(text)\nWinners are:\nAdam\nBob\nCyril\nchr(10)chr(10)chr(10)'\\n'.joinn = \"\\n\".join(names)\ntext = f\"Winners are:\\n{n}\"\nff&gt;&gt;&gt; \"{\\\\} {*}\".format(**{\"\\\\\": 'Hello', \"*\": 'World!'})\n\"Hello World!\"\nprintprint"}, {"idx": "webquery-test-2", "doc": "What to put in a python module docstring?", "code": "help(yourmodule)help(yourmodule)help(yourmodule)\"\"\"This module does blah blah.\"\"\"\n\nclass Blah(object):\n  \"\"\"This class does blah blah.\"\"\"\n&gt;&gt;&gt; import x; help(x)\nHelp on module x:\n\nNAME\n    x - This module does blah blah.\n\nFILE\n    /tmp/x.py\n\nCLASSES\n    __builtin__.object\n        Blah\n\n    class Blah(__builtin__.object)\n     |  This class does blah blah.\n     |  \n     |  Data and other attributes defined here:\n     |  \n     |  __dict__ = &lt;dictproxy object&gt;\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__ = &lt;attribute '__weakref__' of 'Blah' objects&gt;\n     |      list of weak references to the object (if defined)\n"}, {"idx": "webquery-test-3", "doc": "Creating a dictionary from a csv file?", "code": "import csv\n\nwith open('coors.csv', mode='r') as infile:\n    reader = csv.reader(infile)\n    with open('coors_new.csv', mode='w') as outfile:\n        writer = csv.writer(outfile)\n        mydict = {rows[0]:rows[1] for rows in reader}\nmydict = dict((rows[0],rows[1]) for rows in reader)\n"}, {"idx": "webquery-test-4", "doc": "How to get UTC time in Python?", "code": "datetime.utcnow()from datetime import datetime\ndatetime.utcnow()\ntimedeltaclass datetime.timedelta([days[, seconds[, microseconds[, milliseconds[, minutes[, hours[, weeks]]]]]]])\n"}, {"idx": "webquery-test-5", "doc": "How to suppress Pandas Future warning ?", "code": "import warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nimport pandas\n"}, {"idx": "webquery-test-6", "doc": "python: SyntaxError: EOL while scanning string literal", "code": "\"\"\"\"\"\"\" a very long string ...... \n....that can span multiple lines\n\"\"\"\n"}, {"idx": "webquery-test-7", "doc": "Django self-referential foreign key", "code": "parent = models.ForeignKey(\"CategoryModel\")\nparent = models.ForeignKey(\"self\")\n"}, {"idx": "webquery-test-8", "doc": "Setting different color for each series in scatter plot on matplotlib", "code": "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n\nx = np.arange(10)\nys = [i+x+(i*x)**2 for i in range(10)]\n\ncolors = cm.rainbow(np.linspace(0, 1, len(ys)))\nfor y, c in zip(ys, colors):\n    plt.scatter(x, y, color=c)\nitertools.cycleitertools.cycleimport itertools\n\ncolors = itertools.cycle([\"r\", \"b\", \"g\"])\nfor y in ys:\n    plt.scatter(x, y, color=next(colors))\nzipcolors = iter(cm.rainbow(np.linspace(0, 1, len(ys))))\nfor y in ys:\n    plt.scatter(x, y, color=next(colors))\n"}, {"idx": "webquery-test-9", "doc": "Python data structure sort list alphabetically", "code": "[][][]In [1]: lst = ['Stem', 'constitute', 'Sedge', 'Eflux', 'Whim', 'Intrigue']\n\nIn [2]: sorted(lst)\nOut[2]: ['Eflux', 'Intrigue', 'Sedge', 'Stem', 'Whim', 'constitute']\nIn [4]: sorted(lst, key=str.lower)\nOut[4]: ['constitute', 'Eflux', 'Intrigue', 'Sedge', 'Stem', 'Whim']\nIn [12]: sorted(lst, reverse=True)\nOut[12]: ['constitute', 'Whim', 'Stem', 'Sedge', 'Intrigue', 'Eflux']\n\nIn [13]: sorted(lst, key=str.lower, reverse=True)\nOut[13]: ['Whim', 'Stem', 'Sedge', 'Intrigue', 'Eflux', 'constitute']\nstrstrstrstrstr"}, {"idx": "webquery-test-10", "doc": "Why does this UnboundLocalError occur (closure)?", "code": "counter += 1\ncountercountercountercountercountercountercountercountercounter"}, {"idx": "webquery-test-11", "doc": "Convert a python 'type' object to a string", "code": "print(type(some_object).__name__)\nprint(some_instance.__class__.__name__)\nclass A:\n    pass\nprint(type(A()))\n# prints &lt;type 'instance'&gt;\nprint(A().__class__.__name__)\n# prints A\ntype()type()type()type()"}, {"idx": "webquery-test-12", "doc": "Python memory usage of numpy arrays", "code": "array.nbytes&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; from sys import getsizeof\n&gt;&gt;&gt; a = [0] * 1024\n&gt;&gt;&gt; b = np.array(a)\n&gt;&gt;&gt; getsizeof(a)\n8264\n&gt;&gt;&gt; b.nbytes\n8192\n"}, {"idx": "webquery-test-13", "doc": "What is pyproject.toml file for?", "code": "pyproject.tomlpippippippipsetup.pysetup.py#!/usr/bin/env python\n\nimport setuptools\n\nif __name__ == \"__main__\":\n    setuptools.setup()\n"}, {"idx": "webquery-test-14", "doc": "How to get the seconds since epoch from the time + date output of gmtime()?", "code": "import time    \nepoch_time = int(time.time())\n"}, {"idx": "webquery-test-1", "doc": "How to condense if/else into one line in Python?", "code": "i = 5 if a &gt; 7 else 0\nif a &gt; 7:\n   i = 5\nelse:\n   i = 0\n"}, {"idx": "webquery-test-2", "doc": "How to compare type of an object in Python?", "code": "isinstance()\nisinstance(\"this is a string\", str)isinstance(\"this is a string\", str)"}, {"idx": "webquery-test-3", "doc": "How can I disable logging while running unit tests in Python Django?", "code": "logging.disable(logging.CRITICAL)\nCRITICALlogging.disable(logging.NOTSET)\n"}, {"idx": "webquery-test-4", "doc": "Generate random numbers with a given (numerical) distribution", "code": "scipy.stats.rv_discretescipy.stats.rv_discretescipy.stats.rv_discreteppnumpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])\nrandom.choices()"}, {"idx": "webquery-test-5", "doc": "Multiline f-string in Python", "code": "return (\n    f'{self.date} - {self.time}\\n'\n    f'Tags: {self.tags}\\n'\n    f'Text: {self.text}'\n)\njoin()"}, {"idx": "webquery-test-6", "doc": "How to list imported modules?", "code": "import sys\nsys.modules.keys()\nglobals()import types\ndef imports():\n    for name, val in globals().items():\n        if isinstance(val, types.ModuleType):\n            yield val.__name__\nfrom x import yfrom x import yfrom x import y"}, {"idx": "webquery-test-7", "doc": "Why does Pycharm's inspector complain about \"d = {}\"?", "code": "dic = {}\ndic['aaa'] = 5\ndic = {'aaa': 5}\ndict()dict()dic = dict()\ndic['aaa'] = 5\n"}, {"idx": "webquery-test-8", "doc": "How to implement an ordered, default dict?", "code": "from collections import OrderedDict, Callable\n\nclass DefaultOrderedDict(OrderedDict):\n    # Source: http://stackoverflow.com/a/6190500/562769\n    def __init__(self, default_factory=None, *a, **kw):\n        if (default_factory is not None and\n           not isinstance(default_factory, Callable)):\n            raise TypeError('first argument must be callable')\n        OrderedDict.__init__(self, *a, **kw)\n        self.default_factory = default_factory\n\n    def __getitem__(self, key):\n        try:\n            return OrderedDict.__getitem__(self, key)\n        except KeyError:\n            return self.__missing__(key)\n\n    def __missing__(self, key):\n        if self.default_factory is None:\n            raise KeyError(key)\n        self[key] = value = self.default_factory()\n        return value\n\n    def __reduce__(self):\n        if self.default_factory is None:\n            args = tuple()\n        else:\n            args = self.default_factory,\n        return type(self), args, None, None, self.items()\n\n    def copy(self):\n        return self.__copy__()\n\n    def __copy__(self):\n        return type(self)(self.default_factory, self)\n\n    def __deepcopy__(self, memo):\n        import copy\n        return type(self)(self.default_factory,\n                          copy.deepcopy(self.items()))\n\n    def __repr__(self):\n        return 'OrderedDefaultDict(%s, %s)' % (self.default_factory,\n                                               OrderedDict.__repr__(self))\n"}, {"idx": "webquery-test-9", "doc": "How to find all positions of the maximum value in a list?", "code": "a.index(max(a))\na"}, {"idx": "webquery-test-10", "doc": "How do I get the different parts of a Flask request's url?", "code": "Requesthttp://www.example.com/myapplication\nhttp://www.example.com/myapplication\nhttp://www.example.com/myapplication\nfrom flask import request\n\n@app.route('/')\ndef index():\n    return request.base_url\n"}, {"idx": "webquery-test-11", "doc": "Remove unwanted parts from strings in a column", "code": "data['result'] = data['result'].map(lambda x: x.lstrip('+-').rstrip('aAbBcC'))\n"}, {"idx": "webquery-test-12", "doc": "Right way to reverse a pandas DataFrame?", "code": "data.reindex(index=data.index[::-1])\ndata.iloc[::-1]\nforfor idx in reversed(data.index):\n    print(idx, data.loc[idx, 'Even'], data.loc[idx, 'Odd'])\nfor idx in reversed(data.index):\n    print(idx, data.Even[idx], data.Odd[idx])\nreversedreversedreversedreversedreversedreversedreversed"}, {"idx": "webquery-test-13", "doc": "When should Flask.g be used?", "code": "gggggg"}, {"idx": "webquery-test-14", "doc": "Pipenv: Command Not Found", "code": "sudo -H pip install -U pipenv\n"}, {"idx": "webquery-test-15", "doc": "How to enumerate a range of numbers starting at 1", "code": "enumerate(range(2000, 2005), 1)\nstartr = xrange(2000, 2005)\nr2 = xrange(1, len(r) + 1)\nh = zip(r2, r)\nprint h\n"}, {"idx": "webquery-test-16", "doc": "Asynchronous Requests with Python requests", "code": "requestsrequestsasync.mapasync.mapfrom requests import async\n# If using requests &gt; v0.13.0, use\n# from grequests import async\n\nurls = [\n    'http://python-requests.org',\n    'http://httpbin.org',\n    'http://python-guide.org',\n    'http://kennethreitz.com'\n]\n\n# A simple task to do to each response object\ndef do_something(response):\n    print response.url\n\n# A list to hold our things to do via async\nasync_list = []\n\nfor u in urls:\n    # The \"hooks = {...\" part is where you define what you want to do\n    # \n    # Note the lack of parentheses following do_something, this is\n    # because the response will be used as the first argument automatically\n    action_item = async.get(u, hooks = {'response' : do_something})\n\n    # Add the task to our list of things to do via async\n    async_list.append(action_item)\n\n# Do our list of things to do via async\nasync.map(async_list)\n"}, {"idx": "webquery-test-17", "doc": "How to check if an object is a generator object in python?", "code": "&gt;&gt;&gt; import types\n&gt;&gt;&gt; types.GeneratorType\n&lt;class 'generator'&gt;\n&gt;&gt;&gt; gen = (i for i in range(10))\n&gt;&gt;&gt; isinstance(gen, types.GeneratorType)\nTrue\n"}, {"idx": "webquery-test-18", "doc": "In Python how should I test if a variable is None, True or False", "code": "if result is None:\n    print \"error parsing stream\"\nelif result:\n    print \"result pass\"\nelse:\n    print \"result fail\"\nmessages = {None: 'error', True: 'pass', False: 'fail'}\nprint messages[result]\nsimulatesimulate"}, {"idx": "webquery-test-1", "doc": "getting the index of a row in a pandas apply function", "code": "nameIn [182]:\n\ndf = pd.DataFrame([[1,2,3],[4,5,6]], columns=['a','b','c'])\ndef rowFunc(row):\n    return row['a'] + row['b'] * row['c']\n\ndef rowIndex(row):\n    return row.name\ndf['d'] = df.apply(rowFunc, axis=1)\ndf['rowIndex'] = df.apply(rowIndex, axis=1)\ndf\nOut[182]:\n   a  b  c   d  rowIndex\n0  1  2  3   7         0\n1  4  5  6  34         1\nIn [198]:\n\ndf['d'] = df['a'] + df['b'] * df['c']\ndf\nOut[198]:\n   a  b  c   d\n0  1  2  3   7\n1  4  5  6  34\n\nIn [199]:\n\n%timeit df['a'] + df['b'] * df['c']\n%timeit df.apply(rowIndex, axis=1)\n10000 loops, best of 3: 163 \u00b5s per loop\n1000 loops, best of 3: 286 \u00b5s per loop\nIn[15]:\ndf['d'],df['rowIndex'] = df['a'] + df['b'] * df['c'], df.index\ndf\n\nOut[15]: \n   a  b  c   d  rowIndex\n0  1  2  3   7         0\n1  4  5  6  34         1\nrowFuncIn[16]:\ndf['newCol'] = df['a'] + df['b'] + df['c'] + df.index\ndf\n\nOut[16]: \n   a  b  c   d  rowIndex  newCol\n0  1  2  3   7         0       6\n1  4  5  6  34         1      16\n"}, {"idx": "webquery-test-2", "doc": "NumPy or Pandas: Keeping array type as integer while having a NaN value", "code": "NaN"}, {"idx": "webquery-test-3", "doc": "How to get the latest file in a folder?", "code": "filesimport glob\nimport os\n\nlist_of_files = glob.glob('/path/to/folder/*') # * means all if need specific format then *.csv\nlatest_file = max(list_of_files, key=os.path.getctime)\nprint(latest_file)\n"}, {"idx": "webquery-test-4", "doc": "How to sort the letters in a string alphabetically in Python", "code": "&gt;&gt;&gt; a = 'ZENOVW'\n&gt;&gt;&gt; ''.join(sorted(a))\n'ENOVWZ'\n"}, {"idx": "webquery-test-5", "doc": "Pass a parameter to a fixture function", "code": "@pytest.fixture\ndef tester(request):\n    \"\"\"Create tester object\"\"\"\n    return MyTester(request.param)\n\n\nclass TestIt:\n    @pytest.mark.parametrize('tester', [['var1', 'var2']], indirect=True)\n    def test_tc1(self, tester):\n       tester.dothis()\n       assert 1\n"}, {"idx": "webquery-test-6", "doc": "Sound alarm when code finishes", "code": "import winsound\nduration = 1000  # milliseconds\nfreq = 440  # Hz\nwinsound.Beep(freq, duration)\nimport os\nduration = 1  # seconds\nfreq = 440  # Hz\nos.system('play -nq -t alsa synth {} sine {}'.format(duration, freq))\nsoxsudo apt install sox\nsudo port install sox\nimport os\nos.system('say \"your program has finished\"')\nimport os\nos.system('spd-say \"your program has finished\"')\nspeech-dispatchersudo apt install speech-dispatcher\n"}, {"idx": "webquery-test-7", "doc": "How do I get a list of column names from a psycopg2 cursor?", "code": "curs.execute(\"Select * FROM people LIMIT 0\")\ncolnames = [desc[0] for desc in curs.description]\n"}, {"idx": "webquery-test-8", "doc": "How can I return two values from a function in Python?", "code": "tupletupledef select_choice():\n    ...\n    return i, card  # or [i, card]\n\nmy_i, my_card = select_choice()\nreturn i, cardreturn i, cardreturn i, cardreturn i, cardSchema.loadsSchema.loadsSchema.loadsdata, errors = MySchema.loads(request.json())\nif errors:\n    ...\nresult = MySchema.loads(request.json())\nif result.errors:\n    ...\nelse:\n    # use `result.data`\ndictdef select_choice():\n    ...\n    return {'i': i, 'card': card, 'other_field': other_field, ...}\nclass ChoiceData():\n    def __init__(self, i, card, other_field, ...):\n        # you can put here some validation logic\n        self.i = i\n        self.card = card\n        self.other_field = other_field\n        ...\n\ndef select_choice():\n    ...\n    return ChoiceData(i, card, other_field, ...)\n\nchoice_data = select_choice()\nprint(choice_data.i, choice_data.card)\n"}, {"idx": "webquery-test-9", "doc": "Correct way to pause a Python program", "code": "raw_input()raw_input()import time\nprint(\"something\")\ntime.sleep(5.5)    # Pause 5.5 seconds\nprint(\"something\")\n"}, {"idx": "webquery-test-10", "doc": "DeprecationWarning: invalid escape sequence - what to use instead of \\d?", "code": "\\drr'\\nRevision: (\\d+)\\n'\n\\n\\n"}, {"idx": "webquery-test-11", "doc": "Run certain code every n seconds", "code": "import threading\n\ndef printit():\n  threading.Timer(5.0, printit).start()\n  print \"Hello, World!\"\n\nprintit()\n\n# continue with the rest of your code\n"}, {"idx": "webquery-test-12", "doc": "Return multiple columns from pandas apply()", "code": "axis=1axis=1def sizes(s):\n    s['size_kb'] = locale.format(\"%.1f\", s['size'] / 1024.0, grouping=True) + ' KB'\n    s['size_mb'] = locale.format(\"%.1f\", s['size'] / 1024.0 ** 2, grouping=True) + ' MB'\n    s['size_gb'] = locale.format(\"%.1f\", s['size'] / 1024.0 ** 3, grouping=True) + ' GB'\n    return s\n\ndf_test = df_test.append(rows_list)\ndf_test = df_test.apply(sizes, axis=1)\n"}, {"idx": "webquery-test-13", "doc": "Adding information to an exception?", "code": "raiseraiseraiseraise new_exc from original_exc\ntry:\n    return [permission() for permission in self.permission_classes]\nexcept TypeError as e:\n    raise TypeError(\"Make sure your view's 'permission_classes' are iterable. \"\n                    \"If you use '()' to generate a set with a single element \"\n                    \"make sure that there is a comma behind the one (element,).\") from e\n2017-09-06 16:50:14,797 [ERROR] django.request: Internal Server Error: /v1/sendEmail/\nTraceback (most recent call last):\nFile \"venv/lib/python3.4/site-packages/rest_framework/views.py\", line 275, in get_permissions\n    return [permission() for permission in self.permission_classes]\nTypeError: 'type' object is not iterable \n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n    # Traceback removed...\nTypeError: Make sure your view's Permission_classes are iterable. If \n     you use parens () to generate a set with a single element make \n     sure that there is a (comma,) behind the one element.\nTypeError"}, {"idx": "webquery-test-14", "doc": "Union of dict objects in Python", "code": "dict()dict(y, **x)\nxdict({'a' : 'y[a]'}, **{'a', 'x[a]'}) == {'a' : 'x[a]'}\n"}, {"idx": "webquery-test-15", "doc": "What's the difference between lists enclosed by square brackets and parentheses in Python?", "code": "&gt;&gt;&gt; x = [1,2]\n&gt;&gt;&gt; x.append(3)\n&gt;&gt;&gt; x\n[1, 2, 3]\n&gt;&gt;&gt; x = (1,2)\n&gt;&gt;&gt; x\n(1, 2)\n&gt;&gt;&gt; x.append(3)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'tuple' object has no attribute 'append'\n&gt;&gt;&gt; x = (1,2)\n&gt;&gt;&gt; y = [1,2]\n&gt;&gt;&gt; z = {}\n&gt;&gt;&gt; z[x] = 3\n&gt;&gt;&gt; z\n{(1, 2): 3}\n&gt;&gt;&gt; z[y] = 4\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unhashable type: 'list'\n&gt;&gt;&gt; x = (1,2)\n&gt;&gt;&gt; x += (3,)\n&gt;&gt;&gt; x\n(1, 2, 3)\n&gt;&gt;&gt; x = (1,2)\n&gt;&gt;&gt; y = x\n&gt;&gt;&gt; x += (3,)\n&gt;&gt;&gt; x\n(1, 2, 3)\n&gt;&gt;&gt; y\n(1, 2)\ny&gt;&gt;&gt; x = [1, 2]\n&gt;&gt;&gt; y = x\n&gt;&gt;&gt; x += [3]\n&gt;&gt;&gt; x\n[1, 2, 3]\n&gt;&gt;&gt; y\n[1, 2, 3]\n"}, {"idx": "webquery-test-16", "doc": "Negation in Python", "code": "notnotnotif not os.path.exists(\"/usr/share/sounds/blues\") :\n    proc = subprocess.Popen([\"mkdir\", \"/usr/share/sounds/blues\"])\n    proc.wait()\nsubprocesssubprocessblues_sounds_path = \"/usr/share/sounds/blues\"\nif not os.path.exists(blues_sounds_path):\n    try:\n        os.mkdir(blues_sounds_path)\n    except OSError:\n        # Handle the case where the directory could not be created.\n"}, {"idx": "webquery-test-17", "doc": "requirements.txt vs setup.py", "code": "requirements.txtpippip install -r requirements.txt\npippip freeze &gt; requirements.txt\npipsetup.pysetup.pysetup.pysetup.py"}, {"idx": "webquery-test-18", "doc": "Immutable vs Mutable types", "code": "x = 5.0\nx += 7.0\nprint x # 12.0\ns = 'foo'\ns += 'bar'\nprint s # foobar\nx = something # immutable type\nprint x\nfunc(x)\nprint x # prints the same thing\n\nx = something # mutable type\nprint x\nfunc(x)\nprint x # might print something different\n\nx = something # immutable type\ny = x\nprint x\n# some statement that operates on y\nprint x # prints the same thing\n\nx = something # mutable type\ny = x\nprint x\n# some statement that operates on y\nprint x # might print something different\nx = 'foo'\ny = x\nprint x # foo\ny += 'bar'\nprint x # foo\n\nx = [1, 2, 3]\ny = x\nprint x # [1, 2, 3]\ny += [3, 2, 1]\nprint x # [1, 2, 3, 3, 2, 1]\n\ndef func(val):\n    val += 'bar'\n\nx = 'foo'\nprint x # foo\nfunc(x)\nprint x # foo\n\ndef func(val):\n    val += [3, 2, 1]\n\nx = [1, 2, 3]\nprint x # [1, 2, 3]\nfunc(x)\nprint x # [1, 2, 3, 3, 2, 1]\n"}, {"idx": "webquery-test-1", "doc": "Google Colab: how to read data from my google drive?", "code": "from google.colab import drive\ndrive.mount('/content/drive')\n"}, {"idx": "webquery-test-2", "doc": "Format y axis as percent", "code": "PercentFormatterPercentFormatterimport ...\nimport matplotlib.ticker as mtick\n\nax = df['myvar'].plot(kind='bar')\nax.yaxis.set_major_formatter(mtick.PercentFormatter())\nPercentFormatter()PercentFormatter()PercentFormatter()PercentFormatter()PercentFormatter()PercentFormatter()NoneNoneNonePercentFormatter"}, {"idx": "webquery-test-3", "doc": "How to get the domain name of my site within a Django template?", "code": "from django.contrib.sites.models import Site\n\ncurrent_site = Site.objects.get_current()\ncurrent_site.domain\n"}, {"idx": "webquery-test-4", "doc": "type object 'datetime.datetime' has no attribute 'datetime'", "code": "datetime&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; datetime\n&lt;module 'datetime' from '/usr/lib/python2.6/lib-dynload/datetime.so'&gt;\n&gt;&gt;&gt; datetime.datetime(2001,5,1)\ndatetime.datetime(2001, 5, 1, 0, 0)\n&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; datetime\n&lt;type 'datetime.datetime'&gt;\n&gt;&gt;&gt; datetime.datetime(2001,5,1) # You shouldn't expect this to work \n                                # as you imported the type, not the module\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: type object 'datetime.datetime' has no attribute 'datetime'\n&gt;&gt;&gt; datetime(2001,5,1)\ndatetime.datetime(2001, 5, 1, 0, 0)\nfrom datetime import datetime"}, {"idx": "webquery-test-5", "doc": "Pretty Printing a pandas dataframe", "code": "DataFramefrom tabulate import tabulate\nimport pandas as pd\n\ndf = pd.DataFrame({'col_two' : [0.0001, 1e-005 , 1e-006, 1e-007],\n                   'column_3' : ['ABCD', 'ABCD', 'long string', 'ABCD']})\n\nprint(tabulate(df, headers='keys', tablefmt='psql'))\n\n+----+-----------+-------------+\n|    |   col_two | column_3    |\n|----+-----------+-------------|\n|  0 |    0.0001 | ABCD        |\n|  1 |    1e-05  | ABCD        |\n|  2 |    1e-06  | long string |\n|  3 |    1e-07  | ABCD        |\n+----+-----------+-------------+\nshowindex=\"never\"showindex=\"never\""}, {"idx": "webquery-test-6", "doc": "How do I turn a python datetime into a string, with readable format date?", "code": "my_datetime.strftime(\"%B %d, %Y\")\n"}, {"idx": "webquery-test-7", "doc": "What do ellipsis [...] mean in a list?", "code": "#1=#(1 #1# 2)\n#1=#1=[...][1, [2, [...], 3]]\nx = [1, [2, 3]]\nx[1][1:1] = [x[1]]\n\ny = [1, [2, 3]]\ny[1][1:1] = [y]\n\nprint(x)\nprint(y)\n"}, {"idx": "webquery-test-8", "doc": "What does %s mean in a Python format string?", "code": "%s#Python 2\nname = raw_input(\"who are you? \")\nprint \"hello %s\" % (name,)\n\n#Python 3+\nname = input(\"who are you? \")\nprint(\"hello %s\" % (name,))\n%s%s%s"}, {"idx": "webquery-test-9", "doc": "How do I install opencv using pip?", "code": "opencv-pythonpip install opencv-python\n"}, {"idx": "webquery-test-10", "doc": "Insert at first position of a list in Python", "code": "insertIn [1]: ls = [1,2,3]\n\nIn [2]: ls.insert(0, \"new\")\n\nIn [3]: ls\nOut[3]: ['new', 1, 2, 3]\n"}, {"idx": "webquery-test-11", "doc": "It is more efficient to use if-return-return or if-else-return?", "code": "returnifreturnreturn A+1 if A &gt; B else A-1\n"}, {"idx": "webquery-test-12", "doc": "Instance attribute attribute_name defined outside __init__", "code": "__init__NoneNone"}, {"idx": "webquery-test-13", "doc": "Get MD5 hash of big files in Python", "code": "def md5_for_file(f, block_size=2**20):\n    md5 = hashlib.md5()\n    while True:\n        data = f.read(block_size)\n        if not data:\n            break\n        md5.update(data)\n    return md5.digest()\ndef generate_file_md5(rootdir, filename, blocksize=2**20):\n    m = hashlib.md5()\n    with open( os.path.join(rootdir, filename) , \"rb\" ) as f:\n        while True:\n            buf = f.read(blocksize)\n            if not buf:\n                break\n            m.update( buf )\n    return m.hexdigest()\njacksum -a md5 &lt;filename&gt;\n"}, {"idx": "webquery-test-14", "doc": "How do I find numeric columns in Pandas?", "code": "select_dtypesnumerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n\nnewdf = df.select_dtypes(include=numerics)\n"}, {"idx": "webquery-test-15", "doc": "How to sort mongodb with pymongo", "code": ".sort().sort().sort()idid.sort([(\"field1\", pymongo.ASCENDING), (\"field2\", pymongo.DESCENDING)])\n"}, {"idx": "webquery-test-16", "doc": "How to add a title to a Seaborn boxplot", "code": "plt.title()plt.title()sns.boxplot('Day', 'Count', data=gg).set_title('lalala')\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ntips = sns.load_dataset(\"tips\")\nsns.boxplot(x=tips[\"total_bill\"]).set_title(\"LaLaLa\")\n\nplt.show()\nax = sns.boxplot('Day', 'Count', data=gg)\nax.set_title('lalala')\nax.set_ylabel('lololo')\n"}, {"idx": "webquery-test-17", "doc": "In Python, using argparse, allow only positive integers", "code": "typedef check_positive(value):\n    ivalue = int(value)\n    if ivalue &lt;= 0:\n        raise argparse.ArgumentTypeError(\"%s is an invalid positive int value\" % value)\n    return ivalue\n\nparser = argparse.ArgumentParser(...)\nparser.add_argument('foo', type=check_positive)\nperfect_squareperfect_square"}, {"idx": "webquery-test-18", "doc": "ImportError: numpy.core.multiarray failed to import", "code": "pip install -U numpy\n"}, {"idx": "webquery-test-19", "doc": "Does SQLAlchemy have an equivalent of Django's get_or_create?", "code": "def get_or_create(session, model, **kwargs):\n    instance = session.query(model).filter_by(**kwargs).first()\n    if instance:\n        return instance\n    else:\n        instance = model(**kwargs)\n        session.add(instance)\n        session.commit()\n        return instance\nclass Country(Base):\n    __tablename__ = 'countries'\n    id = Column(Integer, primary_key=True)\n    name = Column(String, unique=True)\nmyCountry = get_or_create(session, Country, name=countryName)\n"}, {"idx": "webquery-test-20", "doc": "What would a \"frozen dict\" be?", "code": "frozensettuple(sorted(kwargs.items()))import collections\n\nclass FrozenDict(collections.Mapping):\n    \"\"\"Don't forget the docstrings!!\"\"\"\n    \n    def __init__(self, *args, **kwargs):\n        self._d = dict(*args, **kwargs)\n        self._hash = None\n\n    def __iter__(self):\n        return iter(self._d)\n\n    def __len__(self):\n        return len(self._d)\n\n    def __getitem__(self, key):\n        return self._d[key]\n\n    def __hash__(self):\n        # It would have been simpler and maybe more obvious to \n        # use hash(tuple(sorted(self._d.iteritems()))) from this discussion\n        # so far, but this solution is O(n). I don't know what kind of \n        # n we are going to run into, but sometimes it's hard to resist the \n        # urge to optimize when it will gain improved algorithmic performance.\n        if self._hash is None:\n            hash_ = 0\n            for pair in self.items():\n                hash_ ^= hash(pair)\n            self._hash = hash_\n        return self._hash\n&gt;&gt;&gt; x = FrozenDict(a=1, b=2)\n&gt;&gt;&gt; y = FrozenDict(a=1, b=2)\n&gt;&gt;&gt; x is y\nFalse\n&gt;&gt;&gt; x == y\nTrue\n&gt;&gt;&gt; x == {'a': 1, 'b': 2}\nTrue\n&gt;&gt;&gt; d = {x: 'foo'}\n&gt;&gt;&gt; d[y]\n'foo'\n"}, {"idx": "webquery-test-21", "doc": "numpy max vs amax vs maximum", "code": "np.maxnp.maxnp.max&gt;&gt;&gt; a = np.array([[0, 1, 6],\n                  [2, 4, 1]])\n&gt;&gt;&gt; np.max(a)\n6\n&gt;&gt;&gt; np.max(a, axis=0) # max of each column\narray([2, 4, 6])\nnp.maximum&gt;&gt;&gt; b = np.array([3, 6, 1])\n&gt;&gt;&gt; c = np.array([4, 2, 9])\n&gt;&gt;&gt; np.maximum(b, c)\narray([4, 6, 9])\nnp.maximum&gt;&gt;&gt; d = np.array([2, 0, 3, -4, -2, 7, 9])\n&gt;&gt;&gt; np.maximum.accumulate(d)\narray([2, 2, 3, 3, 3, 7, 9])\nnp.maxnp.maximumnp.maximumnp.maximum&gt;&gt;&gt; np.maximum.reduce(d)\n9\n&gt;&gt;&gt; np.max(d)\n9\nnp.max()np.max()"}, {"idx": "webquery-test-1", "doc": "Lambda function in list comprehensions", "code": "[(lambda x: x*x)(x) for x in range(10)]\n[x*x for x in range(10)]\n"}, {"idx": "webquery-test-2", "doc": "Extract column value based on another column in Pandas", "code": "loclocIn [2]: df\nOut[2]:\n    A  B\n0  p1  1\n1  p1  2\n2  p3  3\n3  p2  4\n\nIn [3]: df.loc[df['B'] == 3, 'A']\nOut[3]:\n2    p3\nName: A, dtype: object\n\nIn [4]: df.loc[df['B'] == 3, 'A'].iloc[0]\nOut[4]: 'p3'\n"}, {"idx": "webquery-test-3", "doc": "How to delete a record by id in Flask-SQLAlchemy", "code": "User.query.filter_by(id=123).delete()\nUser.query.filter(User.id == 123).delete()\ncommitcommit"}, {"idx": "webquery-test-4", "doc": "Read specific columns from a csv file with csv module?", "code": "forfor row in reader:\n    content = list(row[i] for i in included_cols)\nprint content\nfor row in reader:\n        content = list(row[i] for i in included_cols)\n        print content\nimport pandas as pd\ndf = pd.read_csv(csv_file)\nsaved_column = df.column_name #you can also use df['column_name']\nNamesnames = df.Names\nfor"}, {"idx": "webquery-test-5", "doc": "How to access the local Django webserver from outside world", "code": "python manage.py runserver 0.0.0.0:8000\n80008080"}, {"idx": "webquery-test-6", "doc": "What does |= (ior) do in Python?", "code": "|=|s1s1&gt;&gt;&gt; s1 = s1 | s2                                           # 1\n&gt;&gt;&gt; s1 |= s2                                               # 2\n&gt;&gt;&gt; s1.__ior__(s2)                                         # 3\ns1||&gt;&gt;&gt; s1 = {\"a\", \"b\", \"c\"}\n&gt;&gt;&gt; s2 = {\"d\", \"e\", \"f\"}\n\n&gt;&gt;&gt; # OR, | \n&gt;&gt;&gt; s1 | s2\n{'a', 'b', 'c', 'd', 'e', 'f'}\n&gt;&gt;&gt; s1                                                     # `s1` is unchanged\n{'a', 'b', 'c'}\n\n&gt;&gt;&gt; # In-place OR, |=\n&gt;&gt;&gt; s1 |= s2\n&gt;&gt;&gt; s1                                                     # `s1` is reassigned\n{'a', 'b', 'c', 'd', 'e', 'f'}\n||d1d1&gt;&gt;&gt; d1 = d1 | d2                                           # 1\n&gt;&gt;&gt; d1 |= d2                                               # 2\nd1d1.update(d2)||&gt;&gt;&gt; d1 = {\"a\": 0, \"b\": 1, \"c\": 2}\n&gt;&gt;&gt; d2 = {\"c\": 20, \"d\": 30}\n\n&gt;&gt;&gt; # Merge, | \n&gt;&gt;&gt; d1 | d2\n{\"a\": 0, \"b\": 1, \"c\": 20, \"d\": 30}\n&gt;&gt;&gt; d1 \n{\"a\": 0, \"b\": 1, \"c\": 2}\n\n&gt;&gt;&gt; # Update, |=\n&gt;&gt;&gt; d1 |= d2\n&gt;&gt;&gt; d1 \n{\"a\": 0, \"b\": 1, \"c\": 20, \"d\": 30}\ncollections.Counterc1c1&gt;&gt;&gt; c1 = c1 | c2                                           # 1\n&gt;&gt;&gt; c1 |= c2                                               # 2\nc1||import collections as ct\n\n\n&gt;&gt;&gt; c1 = ct.Counter({2: 2, 3: 3})\n&gt;&gt;&gt; c2 = ct.Counter({1: 1, 3: 5})\n\n&gt;&gt;&gt; # Union, |    \n&gt;&gt;&gt; c1 | c2\nCounter({2: 2, 3: 5, 1: 1})\n&gt;&gt;&gt; c1\nCounter({2: 2, 3: 3})\n\n&gt;&gt;&gt; # In-place Union, |=\n&gt;&gt;&gt; c1 |= c2\n&gt;&gt;&gt; c1\nCounter({2: 2, 3: 5, 1: 1})\nn1n1&gt;&gt;&gt; n1 = n1 | n2                                           # 1\n&gt;&gt;&gt; n1 |= n2                                               # 2\nn1||&gt;&gt;&gt; n1 = 0\n&gt;&gt;&gt; n2 = 1\n\n&gt;&gt;&gt; # Bitwise OR, |\n&gt;&gt;&gt; n1 | n2\n1\n&gt;&gt;&gt; n1\n0\n\n&gt;&gt;&gt; # In-place Bitwise OR, |=\n&gt;&gt;&gt; n1 |= n2\n&gt;&gt;&gt; n1\n1\n11&gt;&gt;&gt; assert 1 == (1 | 1) == (1 | 0) == (0 | 1)\n&gt;&gt;&gt; assert 0 == (0 | 0)\n&gt;&gt;&gt; a = 10 \n&gt;&gt;&gt; b = 16 \n&gt;&gt;&gt; a | b\n26\n0b&gt;&gt;&gt; bin(a)\n'0b1010'\n&gt;&gt;&gt; bin(b)\n'0b10000'\n00001010\n10000\n-----\n11010\n&gt;&gt;&gt; int(0b11010)\n26\n&gt;&gt;&gt; a = 10                                   # 10, dec\n&gt;&gt;&gt; b = 0b10000                              # 16, bin\n&gt;&gt;&gt; c = 0xa                                  # 10, hex\n&gt;&gt;&gt; d = 0o20                                 # 16, oct\n\n&gt;&gt;&gt; a | b\n26\n&gt;&gt;&gt; c | d\n26\n__ior__()__ior__()__ior__()"}, {"idx": "webquery-test-7", "doc": "How do I annotate types in a for-loop?", "code": "forfori: int\nfor i in range(5):\n    pass\n"}, {"idx": "webquery-test-8", "doc": "Should conda, or conda-forge be used for Python environments?", "code": "conda-forgecondacondacondacondaconda install -c some-channel packagename\npackagenamepackagenameconda install some-channel::packagename\nsome-channelsome-channelsome-channelconda config --show channels\nconda configconda config --add channels some-channel\nsome-channelsome-channelsome-channelconda config --append channels some-channel\nconda config --remove channels some-channel\nconda config -h\nconda-forgeconda-forgeconda-forgeconda-forgeconda-forgeconda-forgeconda-forgeconda-forgeconda-forgeconda-forge"}, {"idx": "webquery-test-9", "doc": "What is the difference between pylab and pyplot?", "code": "pylab"}, {"idx": "webquery-test-10", "doc": "How do I count occurrence of unique values inside a list", "code": "from collections import Counter\n\nwords = ['a', 'b', 'c', 'a']\n\nCounter(words).keys() # equals to list(set(words))\nCounter(words).values() # counts the elements' frequency\n['a', 'c', 'b']\n[2, 1, 1]\n"}, {"idx": "webquery-test-11", "doc": "Syntax behind sorted(key=lambda: ...)", "code": "lambda input_variable(s): tasty one liner\nlambdaIn [1]: f00 = lambda x: x/2\n\nIn [2]: f00(10)\nOut[2]: 5.0\n\nIn [3]: (lambda x: x/2)(10)\nOut[3]: 5.0\n\nIn [4]: (lambda x, y: x / y)(10, 2)\nOut[4]: 5.0\n\nIn [5]: (lambda: 'amazing lambda')() # func with no args!\nOut[5]: 'amazing lambda'\nkeykeykeyIn [6]: mylist = [3, 6, 3, 2, 4, 8, 23]  # an example list\n# sorted(mylist, key=HowToSort)  # what we will be doing\n# mylist = [3, 6, 3, 2, 4, 8, 23]\nIn [7]: sorted(mylist)\nOut[7]: [2, 3, 3, 4, 6, 8, 23]  \n# all numbers are in ascending order (i.e.from low to high).\n# mylist = [3, 6, 3, 2, 4, 8, 23]\nIn [8]: sorted(mylist, key=lambda x: x % 2 == 0)\n\n# Quick Tip: The % operator returns the *remainder* of a division\n# operation. So the key lambda function here is saying \"return True \n# if x divided by 2 leaves a remainer of 0, else False\". This is a \n# typical way to check if a number is even or odd.\n\nOut[8]: [3, 3, 23, 6, 2, 4, 8]  \n# Does this sorted result make intuitive sense to you?\nsortedsortedsortedsortedsortedTrue == 1True == 1[3, 6, 3, 2, 4, 8, 23][3, 6, 3, 2, 4, 8, 23][0, 0, 0, 1, 1, 1, 1]In [9]: mylist = [(3, 5, 8), (6, 2, 8), (2, 9, 4), (6, 8, 5)]\nIn[10]: sorted(mylist, key=lambda x: x[1])\nsortedsortedsortedsorted[5, 2, 9, 8] # the second element of each tuple\n[2, 5, 8, 9]\nmylistOut[10]: [(6, 2, 8), (3, 5, 8), (6, 8, 5), (2, 9, 4)]\n# Notice the sorted pointer list is the same as the second index of each tuple in this final list\nsortsort"}, {"idx": "webquery-test-12", "doc": "Why can tuples contain mutable items?", "code": "s = ('www.python.org', 80)s = ('www.python.org', 80)"}, {"idx": "webquery-test-13", "doc": "How to sort two lists (which reference each other) in the exact same way", "code": "zip&gt;&gt;&gt; list1 = [3,2,4,1, 1]\n&gt;&gt;&gt; list2 = ['three', 'two', 'four', 'one', 'one2']\n&gt;&gt;&gt; list1, list2 = zip(*sorted(zip(list1, list2)))\n&gt;&gt;&gt; list1\n(1, 1, 2, 3, 4)\n&gt;&gt;&gt; list2 \n('one', 'one2', 'two', 'three', 'four')\n&gt;&gt;&gt; list1, list2 = (list(t) for t in zip(*sorted(zip(list1, list2))))\n&gt;&gt;&gt; list1\n[1, 1, 2, 3, 4]\n&gt;&gt;&gt; list2\n['one', 'one2', 'two', 'three', 'four']\n&gt;&gt;&gt; %timeit zip(*sorted(zip(list1, list2)))\n100000 loops, best of 3: 3.3 us per loop\n&gt;&gt;&gt; %timeit tups = zip(list1, list2); tups.sort(); zip(*tups)\n100000 loops, best of 3: 2.84 us per loop\n&gt;&gt;&gt; %timeit zip(*sorted(zip(list1, list2)))\n100 loops, best of 3: 8.09 ms per loop\n&gt;&gt;&gt; %timeit tups = zip(list1, list2); tups.sort(); zip(*tups)\n100 loops, best of 3: 8.51 ms per loop\nzipziplist1list1list1list1list1list2result1, result2 = zip(*sorted(zip(list1, list2), key=lambda x: x[0]))\nzip(*...)"}, {"idx": "webquery-test-14", "doc": "Convert a namedtuple into a dictionary", "code": "_asdict&gt;&gt;&gt; fields = ['name', 'population', 'coordinates', 'capital', 'state_bird']\n&gt;&gt;&gt; Town = collections.namedtuple('Town', fields)\n&gt;&gt;&gt; funkytown = Town('funky', 300, 'somewhere', 'lipps', 'chicken')\n&gt;&gt;&gt; funkytown._asdict()\nOrderedDict([('name', 'funky'),\n             ('population', 300),\n             ('coordinates', 'somewhere'),\n             ('capital', 'lipps'),\n             ('state_bird', 'chicken')])\n_make_make_make_make&gt;&gt;&gt; vars(funkytown)\nOrderedDict([('name', 'funky'),\n             ('population', 300),\n             ('coordinates', 'somewhere'),\n             ('capital', 'lipps'),\n             ('state_bird', 'chicken')])\n_asdict_asdict"}, {"idx": "webquery-test-15", "doc": "AttributeError(\"'str' object has no attribute 'read'\")", "code": "json.loadjson.loadjson.loadjson.load"}, {"idx": "webquery-test-16", "doc": "What is the meaning of \"Failed building wheel for X\" in pip install?", "code": "pip install wheel\nvenvsetup.py bdist_wheelsetup.py bdist_wheelsetup.py bdist_wheelsetup.py bdist_wheelsetup.py bdist_wheelsetup.py bdist_wheel"}, {"idx": "webquery-test-17", "doc": "Python if not == vs if !=", "code": "disnot ==  4           0 LOAD_FAST                0 (foo)\n              3 LOAD_FAST                1 (bar)\n              6 COMPARE_OP               2 (==)\n              9 UNARY_NOT           \n             10 RETURN_VALUE   \n!=  4           0 LOAD_FAST                0 (foo)\n              3 LOAD_FAST                1 (bar)\n              6 COMPARE_OP               3 (!=)\n              9 RETURN_VALUE   \nif foo != barif foo != barif foo != barif foo != barif foo != barnot ==  2           0 LOAD_FAST                0 (foo)\n              3 LOAD_FAST                1 (bar)\n              6 COMPARE_OP               2 (==)\n              9 POP_JUMP_IF_TRUE        16\n!=  2           0 LOAD_FAST                0 (foo)\n              3 LOAD_FAST                1 (bar)\n              6 COMPARE_OP               3 (!=)\n              9 POP_JUMP_IF_FALSE       16\n__eq____eq__x==yx==y&gt;&gt;&gt; class Dummy(object):\n    def __eq__(self, other):\n        return True\n    def __ne__(self, other):\n        return True\n\n\n&gt;&gt;&gt; not Dummy() == Dummy()\nFalse\n&gt;&gt;&gt; Dummy() != Dummy()\nTrue\nx != yx != y"}, {"idx": "webquery-test-18", "doc": "How to keep index when using pandas merge", "code": "In [5]: a.reset_index().merge(b, how=\"left\").set_index('index')\nOut[5]:\n       col1  to_merge_on  col2\nindex\na         1            1     1\nb         2            3     2\nc         3            4   NaN\naaa"}, {"idx": "webquery-test-19", "doc": "Parse a .py file, read the AST, modify it, then write back the modified source code", "code": "ast"}, {"idx": "webquery-test-1", "doc": "Creating a simple XML file using python", "code": "import xml.etree.cElementTree as ET\n\nroot = ET.Element(\"root\")\ndoc = ET.SubElement(root, \"doc\")\n\nET.SubElement(doc, \"field1\", name=\"blah\").text = \"some value1\"\nET.SubElement(doc, \"field2\", name=\"asdfasd\").text = \"some vlaue2\"\n\ntree = ET.ElementTree(root)\ntree.write(\"filename.xml\")\n"}, {"idx": "webquery-test-2", "doc": "How to change the datetime format in Pandas", "code": "dt.strftimedt.strftimedt.strftimedt.strftimedt.strftimeimport pandas as pd\n\ndf = pd.DataFrame({'DOB': {0: '26/1/2016', 1: '26/1/2016'}})\nprint (df)\n         DOB\n0  26/1/2016 \n1  26/1/2016\n\ndf['DOB'] = pd.to_datetime(df.DOB)\nprint (df)\n         DOB\n0 2016-01-26\n1 2016-01-26\n\ndf['DOB1'] = df['DOB'].dt.strftime('%m/%d/%Y')\nprint (df)\n         DOB        DOB1\n0 2016-01-26  01/26/2016\n1 2016-01-26  01/26/2016\n"}, {"idx": "webquery-test-3", "doc": "Numpy first occurrence of value greater than existing value", "code": "np.argmax(aa&gt;5)\nargmaxargmaxIn [2]: N = 10000\n\nIn [3]: aa = np.arange(-N,N)\n\nIn [4]: timeit np.argmax(aa&gt;N/2)\n100000 loops, best of 3: 52.3 us per loop\n\nIn [5]: timeit np.where(aa&gt;N/2)[0][0]\n10000 loops, best of 3: 141 us per loop\n\nIn [6]: timeit np.nonzero(aa&gt;N/2)[0][0]\n10000 loops, best of 3: 142 us per loop\n"}, {"idx": "webquery-test-4", "doc": "os.makedirs doesn't understand \"~\" in my path", "code": "my_dir = os.path.expanduser('~/some_dir')\n"}, {"idx": "webquery-test-5", "doc": "Are lists thread-safe?", "code": "L[0] += 1\n+="}, {"idx": "webquery-test-6", "doc": "How to unnest (explode) a column in a pandas DataFrame, into multiple rows", "code": "objectpandas.DataFrame.explodedf.explode('B')\n\n       A  B\n    0  1  1\n    1  1  2\n    0  2  1\n    1  2  2\nlistlistlistlistdf = pd.DataFrame({'A': [1, 2, 3, 4],'B': [[1, 2], [1, 2], [], np.nan]})\ndf.B = df.B.fillna({i: [] for i in df.index})  # replace NaN with []\ndf.explode('B')\n\n   A    B\n0  1    1\n0  1    2\n1  2    1\n1  2    2\n2  3  NaN\n3  4  NaN\napply + pd.Seriesdf.set_index('A').B.apply(pd.Series).stack().reset_index(level=0).rename(columns={0:'B'})\nOut[463]:\n   A  B\n0  1  1\n1  1  2\n0  2  1\n1  2  2\nrepeatrepeatdf=pd.DataFrame({'A':df.A.repeat(df.B.str.len()),'B':np.concatenate(df.B.values)})\ndf\nOut[465]:\n   A  B\n0  1  1\n0  1  2\n1  2  1\n1  2  2\njoinjoinjoins=pd.DataFrame({'B':np.concatenate(df.B.values)},index=df.index.repeat(df.B.str.len()))\ns.join(df.drop('B',1),how='left')\nOut[477]:\n   B  A\n0  1  1\n0  2  1\n1  1  2\n1  2  2\nreindexs.join(df.drop('B',1),how='left').reindex(columns=df.columns)\nlistpd.DataFrame([[x] + [z] for x, y in df.values for z in y],columns=df.columns)\nOut[488]:\n   A  B\n0  1  1\n1  1  2\n2  2  1\n3  2  2\ns=pd.DataFrame([[x] + [z] for x, y in zip(df.index,df.B) for z in y])\ns.merge(df,left_on=0,right_index=True)\nOut[491]:\n   0  1  A       B\n0  0  1  1  [1, 2]\n1  0  2  1  [1, 2]\n2  1  1  2  [1, 2]\n3  1  2  2  [1, 2]\nreindexreindexdf.reindex(df.index.repeat(df.B.str.len())).assign(B=np.concatenate(df.B.values))\nOut[554]:\n   A  B\n0  1  1\n0  1  2\n1  2  1\n1  2  2\n\n#df.loc[df.index.repeat(df.B.str.len())].assign(B=np.concatenate(df.B.values))\ndf=pd.DataFrame({'A':[1,2],'B':[[1,2],[3,4]]})\nfrom collections import ChainMap\nd = dict(ChainMap(*map(dict.fromkeys, df['B'], df['A'])))\npd.DataFrame(list(d.items()),columns=df.columns[::-1])\nOut[574]:\n   B  A\n0  1  1\n1  2  1\n2  3  2\n3  4  2\nnumpynewvalues=np.dstack((np.repeat(df.A.values,list(map(len,df.B.values))),np.concatenate(df.B.values)))\npd.DataFrame(data=newvalues[0],columns=df.columns)\n   A  B\n0  1  1\n1  1  2\n2  2  1\n3  2  2\nitertoolsitertoolsitertoolsfrom itertools import cycle,chain\nl=df.values.tolist()\nl1=[list(zip([x[0]], cycle(x[1])) if len([x[0]]) &gt; len(x[1]) else list(zip(cycle([x[0]]), x[1]))) for x in l]\npd.DataFrame(list(chain.from_iterable(l1)),columns=df.columns)\n   A  B\n0  1  1\n1  1  2\n2  2  1\n3  2  2\ndf=pd.DataFrame({'A':[1,2],'B':[[1,2],[3,4]],'C':[[1,2],[3,4]]})\ndf\nOut[592]:\n   A       B       C\n0  1  [1, 2]  [1, 2]\n1  2  [3, 4]  [3, 4]\ndef unnesting(df, explode):\n    idx = df.index.repeat(df[explode[0]].str.len())\n    df1 = pd.concat([\n        pd.DataFrame({x: np.concatenate(df[x].values)}) for x in explode], axis=1)\n    df1.index = idx\n\n    return df1.join(df.drop(explode, 1), how='left')\n\n\nunnesting(df,['B','C'])\nOut[609]:\n   B  C  A\n0  1  1  1\n0  2  2  1\n1  3  3  2\n1  4  4  2\npd.DataFramedf.join(pd.DataFrame(df.B.tolist(),index=df.index).add_prefix('B_'))\nOut[33]:\n   A       B       C  B_0  B_1\n0  1  [1, 2]  [1, 2]    1    2\n1  2  [3, 4]  [3, 4]    3    4\ndef unnesting(df, explode, axis):\n    if axis==1:\n        idx = df.index.repeat(df[explode[0]].str.len())\n        df1 = pd.concat([\n            pd.DataFrame({x: np.concatenate(df[x].values)}) for x in explode], axis=1)\n        df1.index = idx\n\n        return df1.join(df.drop(explode, 1), how='left')\n    else :\n        df1 = pd.concat([\n                         pd.DataFrame(df[x].tolist(), index=df.index).add_prefix(x) for x in explode], axis=1)\n        return df1.join(df.drop(explode, 1), how='left')\nunnesting(df, ['B','C'], axis=0)\nOut[36]:\n   B0  B1  C0  C1  A\n0   1   2   1   2  1\n1   3   4   3   4  2\ndef unnesting(df, explode, axis):\n    if axis==1:\n        df1 = pd.concat([df[x].explode() for x in explode], axis=1)\n        return df1.join(df.drop(explode, 1), how='left')\n    else :\n        df1 = pd.concat([\n                         pd.DataFrame(df[x].tolist(), index=df.index).add_prefix(x) for x in explode], axis=1)\n        return df1.join(df.drop(explode, 1), how='left')\n"}, {"idx": "webquery-test-7", "doc": "ipython notebook clear cell output in code", "code": "IPython.display.clear_outputfrom IPython.display import clear_output\n\nfor i in range(10):\n    clear_output(wait=True)\n    print(\"Hello World!\")\nHello World!"}, {"idx": "webquery-test-8", "doc": "How to read first N lines of a file?", "code": "with open(\"datafile\") as myfile:\n    head = [next(myfile) for x in range(N)]\nprint(head)\nwith open(\"datafile\") as myfile:\n    head = [next(myfile) for x in xrange(N)]\nprint head\nfrom itertools import islice\n\nwith open(\"datafile\") as myfile:\n    head = list(islice(myfile, N))\nprint(head)\n"}, {"idx": "webquery-test-9", "doc": "What is the most efficient way of counting occurrences in pandas?", "code": "df['word'].value_counts()df['word'].value_counts()df['word'].value_counts()df['word'].value_counts()"}, {"idx": "webquery-test-10", "doc": "How can I improve my paw detection?", "code": "def find_paws(data, smooth_radius=5, threshold=0.0001):\n    data = sp.ndimage.uniform_filter(data, smooth_radius)\n    thresh = data &gt; threshold\n    filled = sp.ndimage.morphology.binary_fill_holes(thresh)\n    coded_paws, num_paws = sp.ndimage.label(filled)\n    data_slices = sp.ndimage.find_objects(coded_paws)\n    return object_slices\nstructurestructurestructurestructurestructurestructurestructurestructureimport numpy as np\nimport scipy as sp\nimport scipy.ndimage\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle\n\ndef animate(input_filename):\n    \"\"\"Detects paws and animates the position and raw data of each frame\n    in the input file\"\"\"\n    # With matplotlib, it's much, much faster to just update the properties\n    # of a display object than it is to create a new one, so we'll just update\n    # the data and position of the same objects throughout this animation...\n\n    infile = paw_file(input_filename)\n\n    # Since we're making an animation with matplotlib, we need \n    # ion() instead of show()...\n    plt.ion()\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    fig.suptitle(input_filename)\n\n    # Make an image based on the first frame that we'll update later\n    # (The first frame is never actually displayed)\n    im = ax.imshow(infile.next()[1])\n\n    # Make 4 rectangles that we can later move to the position of each paw\n    rects = [Rectangle((0,0), 1,1, fc='none', ec='red') for i in range(4)]\n    [ax.add_patch(rect) for rect in rects]\n\n    title = ax.set_title('Time 0.0 ms')\n\n    # Process and display each frame\n    for time, frame in infile:\n        paw_slices = find_paws(frame)\n\n        # Hide any rectangles that might be visible\n        [rect.set_visible(False) for rect in rects]\n\n        # Set the position and size of a rectangle for each paw and display it\n        for slice, rect in zip(paw_slices, rects):\n            dy, dx = slice\n            rect.set_xy((dx.start, dy.start))\n            rect.set_width(dx.stop - dx.start + 1)\n            rect.set_height(dy.stop - dy.start + 1)\n            rect.set_visible(True)\n\n        # Update the image data and title of the plot\n        title.set_text('Time %0.2f ms' % time)\n        im.set_data(frame)\n        im.set_clim([frame.min(), frame.max()])\n        fig.canvas.draw()\n\ndef find_paws(data, smooth_radius=5, threshold=0.0001):\n    \"\"\"Detects and isolates contiguous regions in the input array\"\"\"\n    # Blur the input data a bit so the paws have a continous footprint \n    data = sp.ndimage.uniform_filter(data, smooth_radius)\n    # Threshold the blurred data (this needs to be a bit &gt; 0 due to the blur)\n    thresh = data &gt; threshold\n    # Fill any interior holes in the paws to get cleaner regions...\n    filled = sp.ndimage.morphology.binary_fill_holes(thresh)\n    # Label each contiguous paw\n    coded_paws, num_paws = sp.ndimage.label(filled)\n    # Isolate the extent of each paw\n    data_slices = sp.ndimage.find_objects(coded_paws)\n    return data_slices\n\ndef paw_file(filename):\n    \"\"\"Returns a iterator that yields the time and data in each frame\n    The infile is an ascii file of timesteps formatted similar to this:\n\n    Frame 0 (0.00 ms)\n    0.0 0.0 0.0\n    0.0 0.0 0.0\n\n    Frame 1 (0.53 ms)\n    0.0 0.0 0.0\n    0.0 0.0 0.0\n    ...\n    \"\"\"\n    with open(filename) as infile:\n        while True:\n            try:\n                time, data = read_frame(infile)\n                yield time, data\n            except StopIteration:\n                break\n\ndef read_frame(infile):\n    \"\"\"Reads a frame from the infile.\"\"\"\n    frame_header = infile.next().strip().split()\n    time = float(frame_header[-2][1:])\n    data = []\n    while True:\n        line = infile.next().strip().split()\n        if line == []:\n            break\n        data.append(line)\n    return time, np.array(data, dtype=np.float)\n\nif __name__ == '__main__':\n    animate('Overlapping paws.bin')\n    animate('Grouped up paws.bin')\n    animate('Normal measurement.bin')\n# This uses functions (and imports) in the previous code example!!\ndef paw_regions(infile):\n    # Read in and stack all data together into a 3D array\n    data, time = [], []\n    for t, frame in paw_file(infile):\n        time.append(t)\n        data.append(frame)\n    data = np.dstack(data)\n    time = np.asarray(time)\n\n    # Find and label the paw impacts\n    data_slices, coded_paws = find_paws(data, smooth_radius=4)\n\n    # Sort by time of initial paw impact... This way we can determine which\n    # paws are which relative to the first paw with a simple modulo 4.\n    # (Assuming a 4-legged dog, where all 4 paws contacted the sensor)\n    data_slices.sort(key=lambda dat_slice: dat_slice[2].start)\n\n    # Plot up a simple analysis\n    fig = plt.figure()\n    ax1 = fig.add_subplot(2,1,1)\n    annotate_paw_prints(time, data, data_slices, ax=ax1)\n    ax2 = fig.add_subplot(2,1,2)\n    plot_paw_impacts(time, data_slices, ax=ax2)\n    fig.suptitle(infile)\n\ndef plot_paw_impacts(time, data_slices, ax=None):\n    if ax is None:\n        ax = plt.gca()\n\n    # Group impacts by paw...\n    for i, dat_slice in enumerate(data_slices):\n        dx, dy, dt = dat_slice\n        paw = i%4 + 1\n        # Draw a bar over the time interval where each paw is in contact\n        ax.barh(bottom=paw, width=time[dt].ptp(), height=0.2, \n                left=time[dt].min(), align='center', color='red')\n    ax.set_yticks(range(1, 5))\n    ax.set_yticklabels(['Paw 1', 'Paw 2', 'Paw 3', 'Paw 4'])\n    ax.set_xlabel('Time (ms) Since Beginning of Experiment')\n    ax.yaxis.grid(True)\n    ax.set_title('Periods of Paw Contact')\n\ndef annotate_paw_prints(time, data, data_slices, ax=None):\n    if ax is None:\n        ax = plt.gca()\n\n    # Display all paw impacts (sum over time)\n    ax.imshow(data.sum(axis=2).T)\n\n    # Annotate each impact with which paw it is\n    # (Relative to the first paw to hit the sensor)\n    x, y = [], []\n    for i, region in enumerate(data_slices):\n        dx, dy, dz = region\n        # Get x,y center of slice...\n        x0 = 0.5 * (dx.start + dx.stop)\n        y0 = 0.5 * (dy.start + dy.stop)\n        x.append(x0); y.append(y0)\n\n        # Annotate the paw impacts         \n        ax.annotate('Paw %i' % (i%4 +1), (x0, y0),  \n            color='red', ha='center', va='bottom')\n\n    # Plot line connecting paw impacts\n    ax.plot(x,y, '-wo')\n    ax.axis('image')\n    ax.set_title('Order of Steps')\n"}, {"idx": "webquery-test-11", "doc": "How to update a plot in matplotlib", "code": "graph1.clear()graph1.clear()import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 6*np.pi, 100)\ny = np.sin(x)\n\n# You probably won't need this if you're embedding things in a tkinter plot...\nplt.ion()\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nline1, = ax.plot(x, y, 'r-') # Returns a tuple of line objects, thus the comma\n\nfor phase in np.linspace(0, 10*np.pi, 500):\n    line1.set_ydata(np.sin(x + phase))\n    fig.canvas.draw()\n    fig.canvas.flush_events()\n"}, {"idx": "webquery-test-12", "doc": "Calling a class function inside of __init__", "code": "self.parse_file()\nparse_file()def parse_file(self):\nparse_fileparse_file"}, {"idx": "webquery-test-13", "doc": "What is the pythonic way to avoid default parameters that are empty lists?", "code": "def my_func(working_list=None):\n    if working_list is None: \n        working_list = []\n\n    # alternative:\n    # working_list = [] if working_list is None else working_list\n\n    working_list.append(\"a\")\n    print(working_list)\nNone"}, {"idx": "webquery-test-14", "doc": "How to delete the last row of data of a pandas dataframe", "code": "df.drop(df.tail(n).index,inplace=True) # drop last n rows\ndf.drop(df.head(n).index,inplace=True) # drop first n rows\n"}, {"idx": "webquery-test-15", "doc": "argparse: identify which subparser was used", "code": "destdestsubparsers = parser.add_subparsers(help='commands')\nsubparsers = parser.add_subparsers(help='commands', dest='command')\nprint parser.parse_args([\"all\"])\nNamespace(command='all')\n"}, {"idx": "webquery-test-16", "doc": "How do I equalize the scales of the x-axis and y-axis?", "code": "Axes.set_aspectfrom matplotlib import pyplot as plt\nplt.plot(range(5))\nplt.xlim(-3, 3)\nplt.ylim(-3, 3)\nax = plt.gca()\nax.set_aspect('equal', adjustable='box')\nplt.draw()\n"}, {"idx": "webquery-test-17", "doc": "Numpy where function multiple conditions", "code": "dists[abs(dists - r - dr/2.) &lt;= dr/2.]\ndistdistdistdistdistwherewheredists[(dists &gt;= r) &amp; (dists &lt;= r+dr)]\n&amp;&amp;where dists[(np.where((dists &gt;= r) &amp; (dists &lt;= r + dr)))]\nnp.wherenp.wherenp.wherenp.wherenp.wherenp.wherenp.wherenp.wherenp.wherenp.wherenp.whereIn [230]: dists = np.arange(0,10,.5)\nIn [231]: r = 5\nIn [232]: dr = 1\n\nIn [233]: np.where(dists &gt;= r)\nOut[233]: (array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),)\n\nIn [234]: np.where(dists &lt;= r+dr)\nOut[234]: (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12]),)\n\nIn [235]: np.where(dists &gt;= r) and np.where(dists &lt;= r+dr)\nOut[235]: (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12]),)\nIn [236]: dists &gt;= r\nOut[236]: \narray([False, False, False, False, False, False, False, False, False,\n       False,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True], dtype=bool)\n\nIn [237]: dists &lt;= r + dr\nOut[237]: \narray([ True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True, False, False, False, False, False,\n       False, False], dtype=bool)\n\nIn [238]: (dists &gt;= r) &amp; (dists &lt;= r + dr)\nOut[238]: \narray([False, False, False, False, False, False, False, False, False,\n       False,  True,  True,  True, False, False, False, False, False,\n       False, False], dtype=bool)\nnp.whereIn [239]: np.where((dists &gt;= r) &amp; (dists &lt;= r + dr))\nOut[239]: (array([10, 11, 12]),)\n\nIn [240]: dists[np.where((dists &gt;= r) &amp; (dists &lt;= r + dr))]\nOut[240]: array([ 5. ,  5.5,  6. ])\nIn [241]: dists[(dists &gt;= r) &amp; (dists &lt;= r + dr)]\nOut[241]: array([ 5. ,  5.5,  6. ])\n"}, {"idx": "webquery-test-18", "doc": "Pandas every nth row", "code": "ilocdf.iloc[::5, :]\n"}, {"idx": "webquery-test-19", "doc": "How to read a .xlsx file using the pandas Library in iPython?", "code": "DataFramexl_file = pd.ExcelFile(file_name)\n\ndfs = {sheet_name: xl_file.parse(sheet_name) \n          for sheet_name in xl_file.sheet_names}\nsheet_name=Nonesheet_name=Nonedfs = pd.read_excel(file_name, sheet_name=None)\nsheetnamesheetnamedfs = pd.read_excel(file_name, sheetname=None)\n"}, {"idx": "webquery-test-20", "doc": "How do I correctly setup and teardown for my pytest class with tests?", "code": "yieldyieldimport pytest\n\n@pytest.fixture()\ndef resource():\n    print(\"setup\")\n    yield \"resource\"\n    print(\"teardown\")\n\nclass TestResource:\n    def test_that_depends_on_resource(self, resource):\n        print(\"testing {}\".format(resource))\n$ py.test --capture=no pytest_yield.py\n=== test session starts ===\nplatform darwin -- Python 2.7.10, pytest-3.0.2, py-1.4.31, pluggy-0.3.1\ncollected 1 items\n\npytest_yield.py setup\ntesting resource\n.teardown\n\n\n=== 1 passed in 0.01 seconds ===\nrequestrequestimport pytest\n\n@pytest.fixture()\ndef resource(request):\n    print(\"setup\")\n\n    def teardown():\n        print(\"teardown\")\n    request.addfinalizer(teardown)\n    \n    return \"resource\"\n\nclass TestResource:\n    def test_that_depends_on_resource(self, resource):\n        print(\"testing {}\".format(resource))\n"}, {"idx": "webquery-test-21", "doc": "Python Pandas merge only certain columns", "code": "df = pd.merge(df,df2[['Key_Column','Target_Column']],on='Key_Column', how='left')\n"}, {"idx": "webquery-test-22", "doc": "How to normalize a NumPy array to within a certain range?", "code": "# Normalize audio channels to between -1.0 and +1.0\naudio /= np.max(np.abs(audio),axis=0)\n# Normalize image to between 0 and 255\nimage *= (255.0/image.max())\n/=/=image *= 255.0/image.max()    # Uses 1 division and image.size multiplications\nimage /= image.max()/255.0    # Uses 1+image.size divisions\naudioaudioaudioimage = image.astype('float64')\n"}, {"idx": "webquery-test-1", "doc": "Logging within pytest tests", "code": "pytestpytestpytestpytestlog_cli_levellog_cli_levellog_cli_levellog_filelog_filelog_filelog_fileini-o OVERRIDE_INI, --override-ini=OVERRIDE_INI-o OVERRIDE_INI, --override-ini=OVERRIDE_INIlog_clilog_cli$ pytest -o log_cli=true ...\n# test_spam.py\n\nimport logging\n\nLOGGER = logging.getLogger(__name__)\n\n\ndef test_eggs():\n    LOGGER.info('eggs info')\n    LOGGER.warning('eggs warning')\n    LOGGER.error('eggs error')\n    LOGGER.critical('eggs critical')\n    assert True\npytestpytestINFOpyproject.toml[tool.pytest.ini_options]\nlog_cli = true\nlog_cli_level = \"INFO\"\nlog_cli_format = \"%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)\"\nlog_cli_date_format = \"%Y-%m-%d %H:%M:%S\"\npytest.ini[pytest]\nlog_cli = 1\nlog_cli_level = INFO\nlog_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)\nlog_cli_date_format=%Y-%m-%d %H:%M:%S\n$ pytest test_spam.py\n=============================== test session starts ================================\nplatform darwin -- Python 3.6.4, pytest-3.7.0, py-1.5.3, pluggy-0.7.1 -- /Users/hoefling/.virtualenvs/stackoverflow/bin/python3.6\ncachedir: .pytest_cache\nrootdir: /Users/hoefling/projects/private/stackoverflow/so-4673373, inifile: pytest.ini\ncollected 1 item\n\ntest_spam.py::test_eggs\n---------------------------------- live log call -----------------------------------\n2018-08-01 14:33:20 [    INFO] eggs info (test_spam.py:7)\n2018-08-01 14:33:20 [ WARNING] eggs warning (test_spam.py:8)\n2018-08-01 14:33:20 [   ERROR] eggs error (test_spam.py:9)\n2018-08-01 14:33:20 [CRITICAL] eggs critical (test_spam.py:10)\nPASSED                                                                        [100%]\n\n============================= 1 passed in 0.01 seconds =============================\nCRITICALCRITICALpyproject.toml[tool.pytest.ini_options]\nlog_cli = true\nlog_cli_level = \"CRITICAL\"\nlog_cli_format = \"%(message)s\"\n\nlog_file = \"pytest.log\"\nlog_file_level = \"DEBUG\"\nlog_file_format = \"%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)\"\nlog_file_date_format = \"%Y-%m-%d %H:%M:%S\"\npytest.ini[pytest]\nlog_cli = 1\nlog_cli_level = CRITICAL\nlog_cli_format = %(message)s\n\nlog_file = pytest.log\nlog_file_level = DEBUG\nlog_file_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)\nlog_file_date_format=%Y-%m-%d %H:%M:%S\n$ pytest test_spam.py\n=============================== test session starts ================================\nplatform darwin -- Python 3.6.4, pytest-3.7.0, py-1.5.3, pluggy-0.7.1 -- /Users/hoefling/.virtualenvs/stackoverflow/bin/python3.6\ncachedir: .pytest_cache\nrootdir: /Users/hoefling/projects/private/stackoverflow/so-4673373, inifile: pytest.ini\ncollected 1 item\n\ntest_spam.py::test_eggs\n---------------------------------- live log call -----------------------------------\neggs critical\nPASSED                                                                        [100%]\n\n============================= 1 passed in 0.01 seconds =============================\n\n$ cat pytest.log\n2018-08-01 14:38:09 [    INFO] eggs info (test_spam.py:7)\n2018-08-01 14:38:09 [ WARNING] eggs warning (test_spam.py:8)\n2018-08-01 14:38:09 [   ERROR] eggs error (test_spam.py:9)\n2018-08-01 14:38:09 [CRITICAL] eggs critical (test_spam.py:10)\npyproject.tomlpytestpytestpytestpytestpytestpytestpytest"}, {"idx": "webquery-test-2", "doc": "Pandas DataFrame column to list", "code": "Series.to_listimport pandas as pd\n\ndf = pd.DataFrame({'a': [1, 3, 5, 7, 4, 5, 6, 4, 7, 8, 9],\n                   'b': [3, 5, 6, 2, 4, 6, 7, 8, 7, 8, 9]})\n\nprint(df['a'].to_list())\n[1, 3, 5, 7, 4, 5, 6, 4, 7, 8, 9]\n&gt;&gt;&gt; df['a'].drop_duplicates().to_list()\n[1, 3, 5, 7, 4, 6, 8, 9]\n&gt;&gt;&gt; list(set(df['a'])) # as pointed out by EdChum\n[1, 3, 4, 5, 6, 7, 8, 9]\n"}, {"idx": "webquery-test-3", "doc": "How to get all of the immediate subdirectories in Python", "code": "import os\ndef get_immediate_subdirectories(a_dir):\n    return [name for name in os.listdir(a_dir)\n            if os.path.isdir(os.path.join(a_dir, name))]\n"}, {"idx": "webquery-test-4", "doc": "Why is the empty dictionary a dangerous default value in Python?", "code": "def f(value, key, hash={}):\n    hash[value] = key\n    return hash\n\nprint(f('a', 1))\nprint(f('b', 2))\n{'a': 1}\n{'b': 2}\n{'a': 1}\n{'a': 1, 'b': 2}\n"}, {"idx": "webquery-test-5", "doc": "Putting an if-elif-else statement on one line?", "code": "import this&gt;&gt;&gt; a = \"Hello\" if foo() else \"Goodbye\"\n&gt;&gt;&gt; i=100\n&gt;&gt;&gt; a = 1 if i&lt;100 else 2 if i&gt;100 else 0\n&gt;&gt;&gt; a\n0\n&gt;&gt;&gt; i=101\n&gt;&gt;&gt; a = 1 if i&lt;100 else 2 if i&gt;100 else 0\n&gt;&gt;&gt; a\n2\n&gt;&gt;&gt; i=99\n&gt;&gt;&gt; a = 1 if i&lt;100 else 2 if i&gt;100 else 0\n&gt;&gt;&gt; a\n1\n"}, {"idx": "webquery-test-6", "doc": "Type hints in namedtuple", "code": "from typing import NamedTuple\n\nclass Point(NamedTuple):\n    x: int\n    y: int = 1  # Set default value\n\nPoint(3)  # -&gt; Point(x=3, y=1)\ndataclassesfrom dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x: int\n    y: int = 1  # Set default value\n\nPoint(3)  # -&gt; Point(x=3, y=1)\n"}, {"idx": "webquery-test-7", "doc": "How can I remove the top and right axis in matplotlib?", "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(0, 2*np.pi, 100)\ny = np.sin(x)\n\nax = plt.subplot(111)\nax.plot(x, y)\n\n# Hide the right and top spines\nax.spines.right.set_visible(False)\nax.spines.top.set_visible(False)\n\n# Only show ticks on the left and bottom spines\nax.yaxis.set_ticks_position('left')\nax.xaxis.set_ticks_position('bottom')\n\nplt.show()\n"}, {"idx": "webquery-test-8", "doc": "How do I tell matplotlib that I am done with a plot?", "code": "plt.clf()\nplt.cla()\n"}, {"idx": "webquery-test-9", "doc": "Get last n lines of a file, similar to tail", "code": "def tail( f, lines=20 ):\n    total_lines_wanted = lines\n\n    BLOCK_SIZE = 1024\n    f.seek(0, 2)\n    block_end_byte = f.tell()\n    lines_to_go = total_lines_wanted\n    block_number = -1\n    blocks = [] # blocks of size BLOCK_SIZE, in reverse order starting\n                # from the end of the file\n    while lines_to_go &gt; 0 and block_end_byte &gt; 0:\n        if (block_end_byte - BLOCK_SIZE &gt; 0):\n            # read the last block we haven't yet read\n            f.seek(block_number*BLOCK_SIZE, 2)\n            blocks.append(f.read(BLOCK_SIZE))\n        else:\n            # file too small, start from begining\n            f.seek(0,0)\n            # only read what was not read\n            blocks.append(f.read(block_end_byte))\n        lines_found = blocks[-1].count('\\n')\n        lines_to_go -= lines_found\n        block_end_byte -= BLOCK_SIZE\n        block_number -= 1\n    all_read_text = ''.join(reversed(blocks))\n    return '\\n'.join(all_read_text.splitlines()[-total_lines_wanted:])\nf =  open('C:/.../../apache_logs.txt', 'rb') def tail(f, lines=20):\n    total_lines_wanted = lines\n\n    BLOCK_SIZE = 1024\n    f.seek(0, 2)\n    block_end_byte = f.tell()\n    lines_to_go = total_lines_wanted\n    block_number = -1\n    blocks = []\n    while lines_to_go &gt; 0 and block_end_byte &gt; 0:\n        if (block_end_byte - BLOCK_SIZE &gt; 0):\n            f.seek(block_number*BLOCK_SIZE, 2)\n            blocks.append(f.read(BLOCK_SIZE))\n        else:\n            f.seek(0,0)\n            blocks.append(f.read(block_end_byte))\n        lines_found = blocks[-1].count(b'\\n')\n        lines_to_go -= lines_found\n        block_end_byte -= BLOCK_SIZE\n        block_number -= 1\n    all_read_text = b''.join(reversed(blocks))\n    return b'\\n'.join(all_read_text.splitlines()[-total_lines_wanted:])\n"}, {"idx": "webquery-test-10", "doc": "How to activate an Anaconda environment", "code": "conda create -n py33 python=3.3 anaconda\nset PATH=C:\\Anaconda\\envs\\py33\\Scripts;C:\\Anaconda\\envs\\py33;%PATH%\nactivate py33\n$ source activate py33\n"}, {"idx": "webquery-test-11", "doc": "How to get the name of an exception that was caught in Python?", "code": "type(exception).__name__type(exception).__name__type(exception).__name__try:\n    foo = bar\nexcept Exception as exception:\n    assert type(exception).__name__ == 'NameError'\n    assert exception.__class__.__name__ == 'NameError'\n    assert exception.__class__.__qualname__ == 'NameError'\n"}, {"idx": "webquery-test-12", "doc": "PyCharm error: 'No Module' when trying to import own module (python script)", "code": "Sources RootSources RootSources Root"}, {"idx": "webquery-test-13", "doc": "How do you use the ellipsis slicing syntax in Python?", "code": ":&gt;&gt;&gt; from numpy import arange\n&gt;&gt;&gt; a = arange(16).reshape(2,2,2,2)\n&gt;&gt;&gt; a[..., 0].flatten()\narray([ 0,  2,  4,  6,  8, 10, 12, 14])\n&gt;&gt;&gt; a[:,:,:,0].flatten()\narray([ 0,  2,  4,  6,  8, 10, 12, 14])\n"}, {"idx": "webquery-test-1", "doc": "Pandas: sum DataFrame rows for given columns", "code": "sumsumIn [91]:\n\ndf = pd.DataFrame({'a': [1,2,3], 'b': [2,3,4], 'c':['dd','ee','ff'], 'd':[5,9,1]})\ndf['e'] = df.sum(axis=1)\ndf\nOut[91]:\n   a  b   c  d   e\n0  1  2  dd  5   8\n1  2  3  ee  9  14\n2  3  4  ff  1   8\nIn [98]:\n\ncol_list= list(df)\ncol_list.remove('d')\ncol_list\nOut[98]:\n['a', 'b', 'c']\nIn [99]:\n\ndf['e'] = df[col_list].sum(axis=1)\ndf\nOut[99]:\n   a  b   c  d  e\n0  1  2  dd  5  3\n1  2  3  ee  9  5\n2  3  4  ff  1  7\n"}, {"idx": "webquery-test-2", "doc": "Check if a value exists in pandas dataframe index", "code": "'g' in df.index\n"}, {"idx": "webquery-test-3", "doc": "How to set the timezone in Django", "code": "TIME_ZONE = 'Europe/Istanbul'\n"}, {"idx": "webquery-test-4", "doc": "How to extract the decision rules from scikit-learn decision-tree?", "code": "from sklearn.tree import _tree\n\ndef tree_to_code(tree, feature_names):\n    tree_ = tree.tree_\n    feature_name = [\n        feature_names[i] if i != _tree.TREE_UNDEFINED else \"undefined!\"\n        for i in tree_.feature\n    ]\n    print \"def tree({}):\".format(\", \".join(feature_names))\n\n    def recurse(node, depth):\n        indent = \"  \" * depth\n        if tree_.feature[node] != _tree.TREE_UNDEFINED:\n            name = feature_name[node]\n            threshold = tree_.threshold[node]\n            print \"{}if {} &lt;= {}:\".format(indent, name, threshold)\n            recurse(tree_.children_left[node], depth + 1)\n            print \"{}else:  # if {} &gt; {}\".format(indent, name, threshold)\n            recurse(tree_.children_right[node], depth + 1)\n        else:\n            print \"{}return {}\".format(indent, tree_.value[node])\n\n    recurse(0, 1)\ndef tree(f0):\n  if f0 &lt;= 6.0:\n    if f0 &lt;= 1.5:\n      return [[ 0.]]\n    else:  # if f0 &gt; 1.5\n      if f0 &lt;= 4.5:\n        if f0 &lt;= 3.5:\n          return [[ 3.]]\n        else:  # if f0 &gt; 3.5\n          return [[ 4.]]\n      else:  # if f0 &gt; 4.5\n        return [[ 5.]]\n  else:  # if f0 &gt; 6.0\n    if f0 &lt;= 8.5:\n      if f0 &lt;= 7.5:\n        return [[ 7.]]\n      else:  # if f0 &gt; 7.5\n        return [[ 8.]]\n    else:  # if f0 &gt; 8.5\n      return [[ 9.]]\ntree_.threshold == -2tree_.threshold == -2tree_.threshold == -2tree_.threshold == -2tree_.threshold == -2"}, {"idx": "webquery-test-5", "doc": "case-insensitive list sorting, without lowercasing the result?", "code": "str.casefoldsorted_list = sorted(unsorted_list, key=str.casefold)\nlower()sorted_list = sorted(unsorted_list, key=lambda s: s.lower())\nlower&gt;&gt;&gt; lst = ['Aden', u'abe1']\n&gt;&gt;&gt; sorted(lst)\n['Aden', u'abe1']\n&gt;&gt;&gt; sorted(lst, key=lambda s: s.lower())\n[u'abe1', 'Aden']\n"}, {"idx": "webquery-test-6", "doc": "Case insensitive 'in'", "code": "username = 'MICHAEL89'\nif username.upper() in (name.upper() for name in USERNAMES):\n    ...\nif username.upper() in map(str.upper, USERNAMES):\n    ...\n"}, {"idx": "webquery-test-7", "doc": "Should I be adding the Django migration files in the .gitignore file?", "code": "./manage.py makemigrations --merge\n./manage.py makemigrations"}, {"idx": "webquery-test-8", "doc": "\"ImportError: No module named\" when trying to run Python script", "code": "import os\nos.getcwd() \nos.getcwd()os.getcwd()import sys\nsys.path.append('my/path/to/module/folder')\n\nimport module_of_interest\n"}, {"idx": "webquery-test-9", "doc": "Why is the apt-get function not working in the terminal on Mac OS X v10.9 (Mavericks)?", "code": "apt-getapt-get/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\nbrew install &lt;package&gt;apt-getapt-getapt-getapt-getapt-getapkHOMEBREW_NO_ANALYTICS=1HOMEBREW_NO_ANALYTICS=1HOMEBREW_NO_ANALYTICS=1brew analytics off\nbrew analytics\n"}, {"idx": "webquery-test-10", "doc": "List of tables, db schema, dump etc using the Python sqlite3 API", "code": "con = sqlite3.connect('database.db')\ncursor = con.cursor()\ncursor.execute(\"SELECT name FROM sqlite_master WHERE type='table';\")\nprint(cursor.fetchall())\n"}, {"idx": "webquery-test-11", "doc": "Getting number of elements in an iterator in Python", "code": "&gt;&gt;&gt; iter = (i for i in range(50))\n&gt;&gt;&gt; sum(1 for _ in iter)\n50\n&gt;&gt;&gt; sum(1 for _ in range(0))\n0\n&gt;&gt;&gt; sum(1 for _ in itertools.count())\n[nothing happens, forever]\n"}, {"idx": "webquery-test-12", "doc": "Get protocol + host name from URL", "code": "urlparsefrom urllib.parse import urlparse\n# from urlparse import urlparse  # Python 2\nparsed_uri = urlparse('http://stackoverflow.com/questions/1234567/blah-blah-blah-blah' )\nresult = '{uri.scheme}://{uri.netloc}/'.format(uri=parsed_uri)\nprint(result)\n\n# gives\n'http://stackoverflow.com/'\n"}, {"idx": "webquery-test-13", "doc": "How to pull a random record using Django's ORM?", "code": "MyModel.objects.order_by('?').first()\n"}, {"idx": "webquery-test-14", "doc": "Python logging not outputting anything", "code": "import logging\n# This sets the root logger to write to stdout (your console).\n# Your script/app needs to call this somewhere at least once.\nlogging.basicConfig()\n\n# By default the root logger is set to WARNING and all loggers you define\n# inherit that value. Here we set the root logger to NOTSET. This logging\n# level is automatically inherited by all existing and new sub-loggers\n# that do not set a less verbose level.\nlogging.root.setLevel(logging.NOTSET)\n\n# The following line sets the root logger level as well.\n# It's equivalent to both previous statements combined:\nlogging.basicConfig(level=logging.NOTSET)\n\n\n# You can either share the `logger` object between all your files or the\n# name handle (here `my-app`) and call `logging.getLogger` with it.\n# The result is the same.\nhandle = \"my-app\"\nlogger1 = logging.getLogger(handle)\nlogger2 = logging.getLogger(handle)\n# logger1 and logger2 point to the same object:\n# (logger1 is logger2) == True\n\nlogger = logging.getLogger(\"my-app\")\n# Convenient methods in order of verbosity from highest to lowest\nlogger.debug(\"this will get printed\")\nlogger.info(\"this will get printed\")\nlogger.warning(\"this will get printed\")\nlogger.error(\"this will get printed\")\nlogger.critical(\"this will get printed\")\n\n\n# In large applications where you would like more control over the logging,\n# create sub-loggers from your main application logger.\ncomponent_logger = logger.getChild(\"component-a\")\ncomponent_logger.info(\"this will get printed with the prefix `my-app.component-a`\")\n\n# If you wish to control the logging levels, you can set the level anywhere \n# in the hierarchy:\n#\n# - root\n#   - my-app\n#     - component-a\n#\n\n# Example for development:\nlogger.setLevel(logging.DEBUG)\n\n# If that prints too much, enable debug printing only for your component:\ncomponent_logger.setLevel(logging.DEBUG)\n\n\n# For production you rather want:\nlogger.setLevel(logging.WARNING)\nimport logging\nlog = logging.getLogger(\"myapp\")\nlog.warning(\"woot\")\nlogging.basicConfig()\nlog.warning(\"woot\")\nwoot\nWARNING:myapp:woot\n"}, {"idx": "webquery-test-15", "doc": "Install a module using pip for specific python version", "code": "pippython2.7 -m pip install foo\n"}, {"idx": "webquery-test-16", "doc": "Remove last 3 characters of a string", "code": "foo = ''.join(foo.split())\nfoo = foo[:-3]\nfoo = foo.upper()\nfoo = ''.join(foo.split())[:-3].upper()\n"}, {"idx": "webquery-test-17", "doc": "How can I account for period (AM/PM) using strftime?", "code": "time.strftime%p%p%H%H"}, {"idx": "webquery-test-18", "doc": "Why is early return slower than else?", "code": "without_else()without_else()&gt;&gt;&gt; T(lambda : without_else()).repeat()\n[0.42015745017874906, 0.3188967452567226, 0.31984281521812363]\n&gt;&gt;&gt; T(lambda : with_else()).repeat()\n[0.36009842032996175, 0.28962249392031936, 0.2927151355828528]\n&gt;&gt;&gt; T(lambda : without_else(True)).repeat()\n[0.31709728471076915, 0.3172671387005721, 0.3285821242644147]\n&gt;&gt;&gt; T(lambda : with_else(True)).repeat()\n[0.30939889008243426, 0.3035132258429485, 0.3046679117038593]\nwithout_else()&gt;&gt;&gt; def no_else(param=False):\n    if param:\n        return 1\n    return 0\n\n&gt;&gt;&gt; T(lambda : no_else()).repeat()\n[0.3359846013948413, 0.29025818923918223, 0.2921801513879245]\n&gt;&gt;&gt; T(lambda : no_else(True)).repeat()\n[0.3810395594970828, 0.2969634408842694, 0.2960104566362247]\nwithout_elsewithout_elsewithout_elsewithout_else&gt;&gt;&gt; [(k, hash(k) % 32) for k in globals().keys() ]\n[('__builtins__', 8), ('with_else', 9), ('__package__', 15), ('without_else', 8), ('T', 21), ('__name__', 25), ('no_else', 28), ('__doc__', 29)]\n__builtins__without_elsej = hash % 32\nperturb = hash\nj = (5*j) + 1 + perturb;\nperturb &gt;&gt;= 5;\nuse j % 2**i as the next table index;\n2**i2**i2**i__builtins____builtins__"}, {"idx": "webquery-test-19", "doc": "What's a standard way to do a no-op in python?", "code": "if x == 0:\n  pass\nelse:\n  print \"x not equal 0\"\ndef f():\n  pass\nclass c:\n  pass\n"}, {"idx": "webquery-test-20", "doc": "How do I tell Matplotlib to create a second (new) plot, then later plot on the old one?", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(5)\ny = np.exp(x)\nfig1, ax1 = plt.subplots()\nax1.plot(x, y)\nax1.set_title(\"Axis 1 title\")\nax1.set_xlabel(\"X-label for axis 1\")\n\nz = np.sin(x)\nfig2, (ax2, ax3) = plt.subplots(nrows=2, ncols=1) # two axes on figure\nax2.plot(x, z)\nax3.plot(x, -z)\n\nw = np.cos(x)\nax1.plot(x, w) # can continue plotting on the first axis\n"}, {"idx": "webquery-test-21", "doc": "How to access pandas groupby dataframe by key", "code": "get_groupIn [21]: gb.get_group('foo')\nOut[21]: \n     A         B   C\n0  foo  1.624345   5\n2  foo -0.528172  11\n4  foo  0.865408  14\ndict(iter(gb))In [22]: gb[[\"A\", \"B\"]].get_group(\"foo\")\nOut[22]:\n     A         B\n0  foo  1.624345\n2  foo -0.528172\n4  foo  0.865408\n\nIn [23]: gb[\"C\"].get_group(\"foo\")\nOut[23]:\n0     5\n2    11\n4    14\nName: C, dtype: int64\n"}, {"idx": "webquery-test-1", "doc": "Why is printing to stdout so slow? Can it be sped up?", "code": "write()printprintfp = file(\"out.txt\", \"w\", 1)   # line-buffered, like stdout\n[...]\nfor x in range(lineCount):\n    fp.write(line)\n    os.fsync(fp.fileno())      # wait for the write to actually complete\n"}, {"idx": "webquery-test-2", "doc": "Generate a random date between two other dates", "code": "range [0, 1]0import random\nimport time\n    \ndef str_time_prop(start, end, time_format, prop):\n    \"\"\"Get a time at a proportion of a range of two formatted times.\n\n    start and end should be strings specifying times formatted in the\n    given format (strftime-style), giving an interval [start, end].\n    prop specifies how a proportion of the interval to be taken after\n    start.  The returned time will be in the specified format.\n    \"\"\"\n\n    stime = time.mktime(time.strptime(start, time_format))\n    etime = time.mktime(time.strptime(end, time_format))\n\n    ptime = stime + prop * (etime - stime)\n\n    return time.strftime(time_format, time.localtime(ptime))\n\n\ndef random_date(start, end, prop):\n    return str_time_prop(start, end, '%m/%d/%Y %I:%M %p', prop)\n    \nprint(random_date(\"1/1/2008 1:30 PM\", \"1/1/2009 4:50 AM\", random.random()))\n"}, {"idx": "webquery-test-3", "doc": "How do I combine two dataframes?", "code": "DataFrame.appendDataFrame.appendappenddf_merged = df1.append(df2, ignore_index=True)\nignore_index=False"}, {"idx": "webquery-test-4", "doc": "How to loop through all but the last item of a list?", "code": "for x in y[:-1]\ny"}, {"idx": "webquery-test-5", "doc": "How do you divide each element in a list by an int?", "code": "myList = [10,20,30,40,50,60,70,80,90]\nmyInt = 10\nnewList = [x / myInt for x in myList]\nmyList[:] = [x / myInt for x in myList]\n"}, {"idx": "webquery-test-6", "doc": "In Python, how do I create a string of n characters in one line of code?", "code": "string_val = \"x\" * 10  # gives you \"xxxxxxxxxx\"\nnnfrom random import choice\nfrom string import ascii_lowercase\nn = 10\n\nstring_val = \"\".join(choice(ascii_lowercase) for i in range(n))\n"}, {"idx": "webquery-test-7", "doc": "Insert a row to pandas dataframe", "code": "loc df.loc[-1] = [2, 3, 4]  # adding a row\n df.index = df.index + 1  # shifting index\n df = df.sort_index()  # sorting by index\n    A  B  C\n 0  2  3  4\n 1  5  6  7\n 2  7  8  9\n"}, {"idx": "webquery-test-8", "doc": "Counting array elements in Python", "code": "len(myArray)\nmyArray = [1, 2, 3]\nlen(myArray)\n3\n"}, {"idx": "webquery-test-9", "doc": "Django: How to manage development and production settings?", "code": "DJANGO_SETTINGS_MODULEimport *import *myapp/production_settings.pymyapp/production_settings.pyDJANGO_SETTINGS_MODULE=myapp.production_settingsDJANGO_SETTINGS_MODULE=myapp.production_settingsDJANGO_SETTINGS_MODULEDJANGO_SETTINGS_MODULEexport DJANGO_SETTINGS_MODULE=myapp.production_settings.bashrcDJANGO_SETTINGS_MODULEenvironmentenvironmentPYTHONPATHPYTHONPATH"}, {"idx": "webquery-test-10", "doc": "matplotlib does not show my plot although I call pyplot.show()", "code": "templatetemplate# backend      : GtkAgg\nbackend      : template\nmatplotlibrcmatplotlibrc&gt;&gt;&gt; import matplotlib\n&gt;&gt;&gt; matplotlib.matplotlib_fname()\nIn [1]: import matplotlib.pyplot as p\n\nIn [2]: p.plot(range(20),range(20))\nOut[2]: [&lt;matplotlib.lines.Line2D object at 0xa64932c&gt;]\n\nIn [3]: p.show()\n~/.matplotlib/matplotlibrc~/.matplotlib/matplotlibrcimport matplotlib.rcsetup as rcsetup\nprint(rcsetup.all_backends)\n['GTK', 'GTKAgg', 'GTKCairo', 'FltkAgg', 'MacOSX', 'QtAgg', 'Qt4Agg',\n'TkAgg', 'WX', 'WXAgg', 'CocoaAgg', 'agg', 'cairo', 'emf', 'gdk', 'pdf',\n'ps', 'svg', 'template']\n"}, {"idx": "webquery-test-11", "doc": "Step-by-step debugging with IPython", "code": "import ipdb; ipdb.set_trace()breakpoint()breakpoint()ccclist(foo)list(foo)list(foo)"}, {"idx": "webquery-test-12", "doc": "What does from __future__ import absolute_import actually do?", "code": "from __future__ import absolute_importfrom __future__ import absolute_importfrom __future__ import absolute_importfrom __future__ import absolute_importfrom __future__ import absolute_importfrom __future__ import absolute_importfrom __future__ import absolute_importpython pkg/script.py\npkg/script.pypkg/script.pypkg/script.pypkg/script.pypkg/script.pypkg/script.pypkg/script.pypkg/script.pypkg/script.pypkgpython -m pkg.script\npkgpkg/script.pypkg/script.pyif __name__ == '__main__' and __package__ is None:\n    __package__ = 'pkg'\nsys.pathsys.pathsys.path"}, {"idx": "webquery-test-13", "doc": "error installing psycopg2, library not found for -lssl", "code": "xcode-select --install\npip install psycopg2env LDFLAGS=\"-I/usr/local/opt/openssl/include -L/usr/local/opt/openssl/lib\" pip install psycopg2\nbrew link openssl --force$ brew link openssl --force                                                                                 17.5s\nWarning: Refusing to link: openssl\nLinking keg-only openssl means you may end up linking against the insecure,\ndeprecated system OpenSSL while using the headers from Homebrew's openssl.\nInstead, pass the full include/library paths to your compiler e.g.:\n  -I/usr/local/opt/openssl/include -L/usr/local/opt/openssl/lib\n--no-cacheenv LDFLAGS=\"-I/usr/local/opt/openssl/include -L/usr/local/opt/openssl/lib\" pip --no-cache install psycopg2\n/opt/homebrew/env LDFLAGS=\"-I/opt/homebrew/opt/openssl/include -L/opt/homebrew/opt/openssl/lib\" pip --no-cache install psycopg2\n"}, {"idx": "webquery-test-14", "doc": "Currency formatting in Python", "code": "&gt;&gt;&gt; import locale\n&gt;&gt;&gt; locale.setlocale( locale.LC_ALL, '' )\n'English_United States.1252'\n&gt;&gt;&gt; locale.currency( 188518982.18 )\n'$188518982.18'\n&gt;&gt;&gt; locale.currency( 188518982.18, grouping=True )\n'$188,518,982.18'\n"}, {"idx": "webquery-test-15", "doc": "How to replace text in a string column of a Pandas dataframe?", "code": "strstrdf['range'] = df['range'].str.replace(',','-')\n\ndf\n      range\n0    (2-30)\n1  (50-290)\ndf['range'].replace(',','-',inplace=True)\ndf = pd.DataFrame({'range':['(2,30)',',']})\ndf['range'].replace(',','-', inplace=True)\n\ndf['range']\n\n0    (2,30)\n1         -\nName: range, dtype: object\n"}, {"idx": "webquery-test-16", "doc": "Return HTTP status code 201 in flask", "code": "&gt; from flask import Response\n&gt; return Response(\"{'a':'b'}\", status=201, mimetype='application/json')\n"}, {"idx": "webquery-test-17", "doc": "Python code to remove HTML tags from a string", "code": "&lt;&gt;import re\n# as per recommendation from @freylis, compile once only\nCLEANR = re.compile('&lt;.*?&gt;') \n\ndef cleanhtml(raw_html):\n  cleantext = re.sub(CLEANR, '', raw_html)\n  return cleantext\n&amp;nsbmCLEANR = re.compile('&lt;.*?&gt;|&amp;([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')\nBeautifulSoup\"lxml\"\"lxml\"from bs4 import BeautifulSoup\ncleantext = BeautifulSoup(raw_html, \"lxml\").text\nlxmllxml"}, {"idx": "webquery-test-18", "doc": "Python Threading String Arguments", "code": "dRecieved = connFile.readline()\nprocessThread = threading.Thread(target=processLine, args=(dRecieved,))  # &lt;- note extra ','\nprocessThread.start()\ndRecieved = connFile.readline()\nprocessThread = threading.Thread(target=processLine, args=[dRecieved])  # &lt;- 1 element list\nprocessThread.start()\nself.__target(*self.__args, **self.__kwargs)*self.__args*self.__args"}, {"idx": "webquery-test-19", "doc": "Reload django object from database", "code": "def test_update_result(self):\n    obj = MyModel.objects.create(val=1)\n    MyModel.objects.filter(pk=obj.pk).update(val=F('val') + 1)\n    # At this point obj.val is still 1, but the value in the database\n    # was updated to 2. The object's updated value needs to be reloaded\n    # from the database.\n    obj.refresh_from_db()\n    self.assertEqual(obj.val, 2)\n"}, {"idx": "webquery-test-1", "doc": "How to disable logging on the standard error stream?", "code": "logger = logging.getLogger('my-logger')\nlogger.propagate = False\n# now if you use logger it will not log to console.\n"}, {"idx": "webquery-test-2", "doc": "\"ssl module in Python is not available\" when installing package with pip3", "code": "$ sudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev$ sudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev$ sudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev$ sudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev"}, {"idx": "webquery-test-3", "doc": "How to display the value of the bar on each bar with pyplot.barh()", "code": "for i, v in enumerate(y):\n    ax.text(v + 3, i + .25, str(v), color='blue', fontweight='bold')\nvvv"}, {"idx": "webquery-test-4", "doc": "In python, why does 0xbin() return False?", "code": "0xbin()0xbin()0xbin()"}, {"idx": "webquery-test-5", "doc": "Bulk insert with SQLAlchemy ORM", "code": "1.0.0s = Session()\nobjects = [\n    User(name=\"u1\"),\n    User(name=\"u2\"),\n    User(name=\"u3\")\n]\ns.bulk_save_objects(objects)\ns.commit()\n"}, {"idx": "webquery-test-6", "doc": "How do I write output in same place on the console?", "code": "sys.stdout.write(\"Download progress: %d%%   \\r\" % (progress) )\nsys.stdout.flush()\n"}, {"idx": "webquery-test-7", "doc": "'id' is a bad variable name in Python", "code": "id()ididid"}, {"idx": "webquery-test-8", "doc": "Using 'try' vs. 'if' in Python", "code": "NoneNoneNoneNoneNoneNone&gt;&gt;&gt; import timeit\n&gt;&gt;&gt; timeit.timeit(setup=\"a=1;b=1\", stmt=\"a/b\") # no error checking\n0.06379691968322732\n&gt;&gt;&gt; timeit.timeit(setup=\"a=1;b=1\", stmt=\"try:\\n a/b\\nexcept ZeroDivisionError:\\n pass\")\n0.0829463709378615\n&gt;&gt;&gt; timeit.timeit(setup=\"a=1;b=0\", stmt=\"try:\\n a/b\\nexcept ZeroDivisionError:\\n pass\")\n0.5070195056614466\n&gt;&gt;&gt; timeit.timeit(setup=\"a=1;b=1\", stmt=\"if b!=0:\\n a/b\")\n0.11940114974277094\n&gt;&gt;&gt; timeit.timeit(setup=\"a=1;b=0\", stmt=\"if b!=0:\\n a/b\")\n0.051202772912802175\nifififtry/excepttry/excepttrytry"}, {"idx": "webquery-test-9", "doc": "Aligning rotated xticklabels with their respective xticks", "code": "n=5\n\nx = np.arange(n)\ny = np.sin(np.linspace(-3,3,n))\nxlabels = ['Ticklabel %i' % i for i in range(n)]\n\nfig, axs = plt.subplots(1,3, figsize=(12,3))\n\nha = ['right', 'center', 'left']\n\nfor n, ax in enumerate(axs):\n    ax.plot(x,y, 'o-')\n    ax.set_title(ha[n])\n    ax.set_xticks(x)\n    ax.set_xticklabels(xlabels, rotation=40, ha=ha[n])\n"}, {"idx": "webquery-test-10", "doc": "Getting one value from a tuple", "code": "i = 5 + tup()[0]\n"}, {"idx": "webquery-test-11", "doc": "Removing multiple keys from a dictionary safely", "code": "dict.popd = {'some': 'data'}\nentries_to_remove = ('any', 'iterable')\nfor k in entries_to_remove:\n    d.pop(k, None)\n"}, {"idx": "webquery-test-12", "doc": "How can I enable CORS on Django REST Framework", "code": "django-cors-headerspython -m pip install django-cors-headers\nINSTALLED_APPS = (\n    ...\n    'corsheaders',\n    ...\n)\nMIDDLEWARE = [\n    ...,\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    ...,\n]\nCORS_ALLOWED_ORIGINS = [\n    'http://localhost:3030',\n]\nCORS_ORIGIN_"}, {"idx": "webquery-test-13", "doc": "How to remove multiple indexes from a list at the same time?", "code": "del my_list[2:6]\nindexes = [2, 3, 5]\nfor index in sorted(indexes, reverse=True):\n    del my_list[index]\n"}, {"idx": "webquery-test-14", "doc": "Using numpy to build an array of all combinations of two arrays", "code": "numpynumpyIn [113]:\n\n%timeit cartesian(([1, 2, 3], [4, 5], [6, 7]))\n10000 loops, best of 3: 135 \u00b5s per loop\nIn [114]:\n\ncartesian(([1, 2, 3], [4, 5], [6, 7]))\n\nOut[114]:\narray([[1, 4, 6],\n       [1, 4, 7],\n       [1, 5, 6],\n       [1, 5, 7],\n       [2, 4, 6],\n       [2, 4, 7],\n       [2, 5, 6],\n       [2, 5, 7],\n       [3, 4, 6],\n       [3, 4, 7],\n       [3, 5, 6],\n       [3, 5, 7]])\nnumpy.meshgrid()In [115]:\n\n%timeit np.array(np.meshgrid([1, 2, 3], [4, 5], [6, 7])).T.reshape(-1,3)\n10000 loops, best of 3: 74.1 \u00b5s per loop\nIn [116]:\n\nnp.array(np.meshgrid([1, 2, 3], [4, 5], [6, 7])).T.reshape(-1,3)\n\nOut[116]:\narray([[1, 4, 6],\n       [1, 5, 6],\n       [2, 4, 6],\n       [2, 5, 6],\n       [3, 4, 6],\n       [3, 5, 6],\n       [1, 4, 7],\n       [1, 5, 7],\n       [2, 4, 7],\n       [2, 5, 7],\n       [3, 4, 7],\n       [3, 5, 7]])\n"}, {"idx": "webquery-test-15", "doc": "Adding a y-axis label to secondary y-axis in matplotlib", "code": "axesimport numpy as np\nimport matplotlib.pyplot as plt\nx = np.arange(0, 10, 0.1)\ny1 = 0.05 * x**2\ny2 = -1 *y1\n\nfig, ax1 = plt.subplots()\n\nax2 = ax1.twinx()\nax1.plot(x, y1, 'g-')\nax2.plot(x, y2, 'b-')\n\nax1.set_xlabel('X data')\nax1.set_ylabel('Y1 data', color='g')\nax2.set_ylabel('Y2 data', color='b')\n\nplt.show()\n"}, {"idx": "webquery-test-16", "doc": "Any way to clear python's IDLE window?", "code": "print (\"\\n\" * 100)\ndef cls(): print (\"\\n\" * 100)\ncls()"}, {"idx": "webquery-test-1", "doc": "How to add a constant column in a Spark DataFrame?", "code": "typedLittypedLittypedLittypedLitimport org.apache.spark.sql.functions.typedLit\n\ndf.withColumn(\"some_array\", typedLit(Seq(1, 2, 3)))\ndf.withColumn(\"some_struct\", typedLit((\"foo\", 1, 0.3)))\ndf.withColumn(\"some_map\", typedLit(Map(\"key1\" -&gt; 1, \"key2\" -&gt; 2)))\nlitlitlitlitDataFrame.withColumnDataFrame.withColumnfrom pyspark.sql.functions import lit\n\ndf.withColumn('new_column', lit(10))\narrayfrom pyspark.sql.functions import array, create_map, struct\n\ndf.withColumn(\"some_array\", array(lit(1), lit(2), lit(3)))\ndf.withColumn(\"some_struct\", struct(lit(\"foo\"), lit(1), lit(.3)))\ndf.withColumn(\"some_map\", create_map(lit(\"key1\"), lit(1), lit(\"key2\"), lit(2)))\nimport org.apache.spark.sql.functions.{array, lit, map, struct}\n\ndf.withColumn(\"new_column\", lit(10))\ndf.withColumn(\"map\", map(lit(\"key1\"), lit(1), lit(\"key2\"), lit(2)))\nstructsstructsdf.withColumn(\n    \"some_struct\",\n    struct(lit(\"foo\").alias(\"x\"), lit(1).alias(\"y\"), lit(0.3).alias(\"z\"))\n )\ncastdf.withColumn(\n    \"some_struct\", \n    struct(lit(\"foo\"), lit(1), lit(0.3)).cast(\"struct&lt;x: string, y: integer, z: double&gt;\")\n )\n"}, {"idx": "webquery-test-2", "doc": "Random state (Pseudo-random number) in Scikit learn", "code": "train_test_splittrain_test_split&gt;&gt;&gt; a, b = np.arange(10).reshape((5, 2)), range(5)\n&gt;&gt;&gt; train_test_split(a, b)\n[array([[6, 7],\n        [8, 9],\n        [4, 5]]),\n array([[2, 3],\n        [0, 1]]), [3, 4, 2], [1, 0]]\n&gt;&gt;&gt; train_test_split(a, b)\n[array([[8, 9],\n        [4, 5],\n        [0, 1]]),\n array([[6, 7],\n        [2, 3]]), [4, 2, 0], [3, 1]]\nrandom_state=some_numberrandom_state=some_numberrandom_state=some_number"}, {"idx": "webquery-test-3", "doc": "How to get a reference to a module inside the module itself?", "code": "import sys\ncurrent_module = sys.modules[__name__]\n"}, {"idx": "webquery-test-4", "doc": "How to make a class property?", "code": "class ClassPropertyDescriptor(object):\n\n    def __init__(self, fget, fset=None):\n        self.fget = fget\n        self.fset = fset\n\n    def __get__(self, obj, klass=None):\n        if klass is None:\n            klass = type(obj)\n        return self.fget.__get__(obj, klass)()\n\n    def __set__(self, obj, value):\n        if not self.fset:\n            raise AttributeError(\"can't set attribute\")\n        type_ = type(obj)\n        return self.fset.__get__(obj, type_)(value)\n\n    def setter(self, func):\n        if not isinstance(func, (classmethod, staticmethod)):\n            func = classmethod(func)\n        self.fset = func\n        return self\n\ndef classproperty(func):\n    if not isinstance(func, (classmethod, staticmethod)):\n        func = classmethod(func)\n\n    return ClassPropertyDescriptor(func)\n\n\nclass Bar(object):\n\n    _bar = 1\n\n    @classproperty\n    def bar(cls):\n        return cls._bar\n\n    @bar.setter\n    def bar(cls, value):\n        cls._bar = value\n\n\n# test instance instantiation\nfoo = Bar()\nassert foo.bar == 1\n\nbaz = Bar()\nassert baz.bar == 1\n\n# test static variable\nbaz.bar = 5\nassert foo.bar == 5\n\n# test setting variable on the class\nBar.bar = 50\nassert baz.bar == 50\nassert foo.bar == 50\nBar.barBar.barBar.barclass ClassPropertyMetaClass(type):\n    def __setattr__(self, key, value):\n        if key in self.__dict__:\n            obj = self.__dict__.get(key)\n        if obj and type(obj) is ClassPropertyDescriptor:\n            return obj.__set__(self, value)\n\n        return super(ClassPropertyMetaClass, self).__setattr__(key, value)\n\n# and update class define:\n#     class Bar(object):\n#        __metaclass__ = ClassPropertyMetaClass\n#        _bar = 1\n\n# and update ClassPropertyDescriptor.__set__\n#    def __set__(self, obj, value):\n#       if not self.fset:\n#           raise AttributeError(\"can't set attribute\")\n#       if inspect.isclass(obj):\n#           type_ = obj\n#           obj = None\n#       else:\n#           type_ = type(obj)\n#       return self.fset.__get__(obj, type_)(value)\n"}, {"idx": "webquery-test-5", "doc": "Python Mocking a function from an imported module", "code": "patchpatchpatchpatch@patchfrom mock import patch\nfrom app.mocking import test_method \n\nclass MockingTestTestCase(unittest.TestCase):\n    \n    @patch('app.mocking.get_user_name')\n    def test_mock_stubs(self, test_patch):\n        test_patch.return_value = 'Mocked This Silly'\n        ret = test_method()\n        self.assertEqual(ret, 'Mocked This Silly')\n"}, {"idx": "webquery-test-6", "doc": "Why is TensorFlow 2 much slower than TensorFlow 1?", "code": "train_on_batchkeraskeraskeraskeraskeraskeraskeraskerastrain_on_batch()train_on_batch()train_on_batch()train_on_batch()train_on_batch()train_on_batch()train_on_batch()train_on_batch()train_on_batch()fit()fit()fit()fit()fit()fit()fit()fit()fit()fit()fit()fit()fit()fit()Conv1DConv1DConv1DConv1D.__dict__tf.enable_eager_execution()  # TF1; must be done before any model/tensor creation\ntf.compat.v1.disable_eager_execution() # TF2; above holds\n_on_batch()train_on_batch()train_on_batch()keraskeraskeraskeras"}, {"idx": "webquery-test-7", "doc": "Basic http file downloading and saving to disk in python?", "code": "import urllib\n\ntestfile = urllib.URLopener()\ntestfile.retrieve(\"http://randomsite.com/file.gz\", \"file.gz\")\nfile.gzurllib"}, {"idx": "webquery-test-8", "doc": "How to log source file name and line number in Python", "code": "formatter = logging.Formatter('[%(asctime)s] p%(process)s {%(pathname)s:%(lineno)d} %(levelname)s - %(message)s','%m-%d %H:%M:%S')\n"}, {"idx": "webquery-test-9", "doc": "How do you create nested dict in Python?", "code": "&gt;&gt;&gt; d = {}\n&gt;&gt;&gt; d['dict1'] = {}\n&gt;&gt;&gt; d['dict1']['innerkey'] = 'value'\n&gt;&gt;&gt; d['dict1']['innerkey2'] = 'value2'\n&gt;&gt;&gt; d\n{'dict1': {'innerkey': 'value', 'innerkey2': 'value2'}}\ndefaultdictdefaultdict&gt;&gt;&gt; import collections\n&gt;&gt;&gt; d = collections.defaultdict(dict)\n&gt;&gt;&gt; d['dict1']['innerkey'] = 'value'\n&gt;&gt;&gt; d  # currently a defaultdict type\ndefaultdict(&lt;type 'dict'&gt;, {'dict1': {'innerkey': 'value'}})\n&gt;&gt;&gt; dict(d)  # but is exactly like a normal dictionary.\n{'dict1': {'innerkey': 'value'}}\nd = {}  # can use defaultdict(dict) instead\n\nfor row in file_map:\n    # derive row key from something \n    # when using defaultdict, we can skip the next step creating a dictionary on row_key\n    d[row_key] = {} \n    for idx, col in enumerate(row):\n        d[row_key][idx] = col\na_file = \"path/to/a.csv\"\nb_file = \"path/to/b.csv\"\n\n# read from file a.csv\nwith open(a_file) as f:\n    # skip headers\n    f.next()\n    # get first colum as keys\n    keys = (line.split(',')[0] for line in f) \n\n# create empty dictionary:\nd = {}\n\n# read from file b.csv\nwith open(b_file) as f:\n    # gather headers except first key header\n    headers = f.next().split(',')[1:]\n    # iterate lines\n    for line in f:\n        # gather the colums\n        cols = line.strip().split(',')\n        # check to make sure this key should be mapped.\n        if cols[0] not in keys:\n            continue\n        # add key to dict\n        d[cols[0]] = dict(\n            # inner keys are the header names, values are columns\n            (headers[idx], v) for idx, v in enumerate(cols[1:]))\n"}, {"idx": "webquery-test-10", "doc": "Flask SQLAlchemy query, specify column names", "code": "with_entities()result = SomeModel.query.with_entities(SomeModel.col1, SomeModel.col2)\n"}, {"idx": "webquery-test-11", "doc": "Perform commands over ssh with Python", "code": "ssh = paramiko.SSHClient()\nssh.connect(server, username=username, password=password)\nssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(cmd_to_execute)\nk = paramiko.RSAKey.from_private_key_file(keyfilename)\n# OR k = paramiko.DSSKey.from_private_key_file(keyfilename)\n\nssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\nssh.connect(hostname=host, username=user, pkey=k)\n"}, {"idx": "webquery-test-12", "doc": "Open file in a relative location in Python", "code": "__file____file__import os\nscript_dir = os.path.dirname(__file__) #&lt;-- absolute dir the script is in\nrel_path = \"2091/data.txt\"\nabs_file_path = os.path.join(script_dir, rel_path)\n"}, {"idx": "webquery-test-13", "doc": "Set Colorbar Range in matplotlib", "code": "vminvminimport matplotlib as m\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ncdict = {\n  'red'  :  ( (0.0, 0.25, .25), (0.02, .59, .59), (1., 1., 1.)),\n  'green':  ( (0.0, 0.0, 0.0), (0.02, .45, .45), (1., .97, .97)),\n  'blue' :  ( (0.0, 1.0, 1.0), (0.02, .75, .75), (1., 0.45, 0.45))\n}\n\ncm = m.colors.LinearSegmentedColormap('my_colormap', cdict, 1024)\n\nx = np.arange(0, 10, .1)\ny = np.arange(0, 10, .1)\nX, Y = np.meshgrid(x,y)\n\ndata = 2*( np.sin(X) + np.sin(3*Y) )\n\ndef do_plot(n, f, title):\n    #plt.clf()\n    plt.subplot(1, 3, n)\n    plt.pcolor(X, Y, f(data), cmap=cm, vmin=-4, vmax=4)\n    plt.title(title)\n    plt.colorbar()\n\nplt.figure()\ndo_plot(1, lambda x:x, \"all\")\ndo_plot(2, lambda x:np.clip(x, -4, 0), \"&lt;0\")\ndo_plot(3, lambda x:np.clip(x, 0, 4), \"&gt;0\")\nplt.show()\n"}, {"idx": "webquery-test-14", "doc": "Find the column name which has the maximum value for each row", "code": "idxmaxidxmax&gt;&gt;&gt; df.idxmax(axis=1)\n0    Communications\n1          Business\n2    Communications\n3    Communications\n4          Business\ndtype: object\ndf['Max'] = df.idxmax(axis=1)df.idxmax()df.idxmax()"}, {"idx": "webquery-test-15", "doc": "Cannot switch Python with pyenv", "code": "eval \"$(pyenv init -)\"WARNING: `pyenv init -` no longer sets PATH.\nRun `pyenv init` to see the necessary changes to make to your configuration.\npyenv initpyenv init~/.bash_profile~/.bash_profile~/.bash_profile~/.bash_profile"}, {"idx": "webquery-test-16", "doc": "Format numbers in django templates", "code": "{% load humanize %}\n{{ my_num|intcomma }}\n'django.contrib.humanize''django.contrib.humanize''django.contrib.humanize'"}, {"idx": "webquery-test-17", "doc": "How do you catch this exception?", "code": "except Foo.DoesNotExist:\nRelatedObjectDoesNotExistRelatedObjectDoesNotExistQuerySet.get()QuerySet.get()QuerySet.get()self.field.rel.to.DoesNotExist"}, {"idx": "webquery-test-18", "doc": "Using multiple arguments for string formatting in Python (e.g., '%s ... %s')", "code": "formatformat'{0} in {1}'.format(unicode(self.author,'utf-8'),  unicode(self.publication,'utf-8'))\n%"}, {"idx": "webquery-test-19", "doc": "\"TypeError: (Integer) is not JSON serializable\" when serializing JSON in Python?", "code": "numpy.int64"}, {"idx": "webquery-test-1", "doc": "Get last result in interactive Python shell", "code": "&gt;&gt;&gt; 5+5\n10\n&gt;&gt;&gt; _\n10\n&gt;&gt;&gt; _ + 5\n15\n&gt;&gt;&gt; _\n15\n"}, {"idx": "webquery-test-2", "doc": "Get total of Pandas column", "code": "sumTotal = df['MyColumn'].sum()\nprint(Total)\n319\nloclocdf.loc['Total'] = pd.Series(df['MyColumn'].sum(), index=['MyColumn'])\nprint(df)\n         X  MyColumn      Y      Z\n0        A      84.0   13.0   69.0\n1        B      76.0   77.0  127.0\n2        C      28.0   69.0   16.0\n3        D      28.0   28.0   31.0\n4        E      19.0   20.0   85.0\n5        F      84.0  193.0   70.0\nTotal  NaN     319.0    NaN    NaN\ndf.loc['Total'] = df['MyColumn'].sum()\nprint(df)\n         X  MyColumn      Y      Z\n0        A        84   13.0   69.0\n1        B        76   77.0  127.0\n2        C        28   69.0   16.0\n3        D        28   28.0   31.0\n4        E        19   20.0   85.0\n5        F        84  193.0   70.0\nTotal  319       319  319.0  319.0\natatdf.at['Total', 'MyColumn'] = df['MyColumn'].sum()\nprint(df)\n         X  MyColumn      Y      Z\n0        A      84.0   13.0   69.0\n1        B      76.0   77.0  127.0\n2        C      28.0   69.0   16.0\n3        D      28.0   28.0   31.0\n4        E      19.0   20.0   85.0\n5        F      84.0  193.0   70.0\nTotal  NaN     319.0    NaN    NaN\ndf.ix['Total', 'MyColumn'] = df['MyColumn'].sum()\nprint(df)\n         X  MyColumn      Y      Z\n0        A      84.0   13.0   69.0\n1        B      76.0   77.0  127.0\n2        C      28.0   69.0   16.0\n3        D      28.0   28.0   31.0\n4        E      19.0   20.0   85.0\n5        F      84.0  193.0   70.0\nTotal  NaN     319.0    NaN    NaN\nixixix"}, {"idx": "webquery-test-3", "doc": "How are booleans formatted in Strings in Python?", "code": "&gt;&gt;&gt; print \"%r, %r\" % (True, False)\nTrue, False\n%r%r%r%r"}, {"idx": "webquery-test-4", "doc": "Unable to allocate array with shape and data type", "code": "0$ cat /proc/sys/vm/overcommit_memory\n0\n&gt;&gt;&gt; 156816 * 36 * 53806 / 1024.0**3\n282.8939827680588\n$ echo 1 &gt; /proc/sys/vm/overcommit_memory\n000&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; a = np.zeros((156816, 36, 53806), dtype='uint8')\n&gt;&gt;&gt; a.nbytes\n303755101056\n"}, {"idx": "webquery-test-5", "doc": "rreplace - How to replace the last occurrence of an expression in a string?", "code": "&gt;&gt;&gt; def rreplace(s, old, new, occurrence):\n...  li = s.rsplit(old, occurrence)\n...  return new.join(li)\n... \n&gt;&gt;&gt; s\n'1232425'\n&gt;&gt;&gt; rreplace(s, '2', ' ', 2)\n'123 4 5'\n&gt;&gt;&gt; rreplace(s, '2', ' ', 3)\n'1 3 4 5'\n&gt;&gt;&gt; rreplace(s, '2', ' ', 4)\n'1 3 4 5'\n&gt;&gt;&gt; rreplace(s, '2', ' ', 0)\n'1232425'\n"}, {"idx": "webquery-test-6", "doc": "What is choice_set in this Django app tutorial?", "code": "ChoiceChoiceChoiceChoiceQuestionQuestionQuestionQuestionchoice_setchoice_setchoice_setchoice_setchoice_setfoo_setfoo_setfoo_set"}, {"idx": "webquery-test-7", "doc": "setting an environment variable in virtualenv", "code": "$VIRTUAL_ENV/bin/$ workon myvenv\n\n$ cat $VIRTUAL_ENV/bin/postactivate\n#!/bin/bash\n# This hook is run after this virtualenv is activated.\nexport DJANGO_DEBUG=True\nexport S3_KEY=mykey\nexport S3_SECRET=mysecret\n\n$ echo $DJANGO_DEBUG\nTrue\n$VIRTUAL_ENV/bin/postactivate$ rm $VIRTUAL_ENV/bin/postactivate\n$ ln -s .env/postactivate $VIRTUAL_ENV/bin/postactivate\n$VIRTUAL_ENV/bin/predeactivate$ cat $VIRTUAL_ENV/bin/predeactivate\n#!/bin/bash\n# This hook is run before this virtualenv is deactivated.\nunset DJANGO_DEBUG\n\n$ deactivate\n\n$ echo $DJANGO_DEBUG\n$ cat $VIRTUAL_ENV/bin/postactivate\n#!/bin/bash\n# This hook is run after this virtualenv is activated.\nif [[ -n $SOME_VAR ]]\nthen\n    export SOME_VAR_BACKUP=$SOME_VAR\nfi\nexport SOME_VAR=apple\n\n$ cat $VIRTUAL_ENV/bin/predeactivate\n#!/bin/bash\n# This hook is run before this virtualenv is deactivated.\nif [[ -n $SOME_VAR_BACKUP ]]\nthen\n    export SOME_VAR=$SOME_VAR_BACKUP\n    unset SOME_VAR_BACKUP\nelse\n    unset SOME_VAR\nfi\n$ echo $SOME_VAR\nbanana\n\n$ workon myenv\n\n$ echo $SOME_VAR\napple\n\n$ deactivate\n\n$ echo $SOME_VAR\nbanana\n"}, {"idx": "webquery-test-8", "doc": "How to properly use unit-testing's assertRaises() with NoneType objects?", "code": "with self.assertRaises(TypeError):\n    self.testListNone[:1]\n"}, {"idx": "webquery-test-9", "doc": "pythonw.exe or python.exe?", "code": "python.exepython.exepython.exepython.exepython.exepython.exepython.exepython.exepython.exepython.exepython.exepython.exepython.exepython.exepython.exepython.exepython.exepython.exepython.exe*.py*.py*.py*.py"}, {"idx": "webquery-test-10", "doc": "How to open every file in a folder", "code": "os.listdirimport os\nfor filename in os.listdir(os.getcwd()):\n   with open(os.path.join(os.getcwd(), filename), 'r') as f: # open in readonly mode\n      # do your stuff\nglobimport os, glob\nfor filename in glob.glob('*.txt'):\n   with open(os.path.join(os.getcwd(), filename), 'r') as f: # open in readonly mode\n      # do your stuff\nimport os, glob\npath = '/some/path/to/file'\nfor filename in glob.glob(os.path.join(path, '*.txt')):\n   with open(os.path.join(os.getcwd(), filename), 'r') as f: # open in readonly mode\n      # do your stuff\nfileinputimport fileinput\nfor line in fileinput.input():\n    # do your stuff\nls -1 | python parse.py\n"}, {"idx": "webquery-test-11", "doc": "Find and replace string values in list", "code": "words = [w.replace('[br]', '&lt;br /&gt;') for w in words]\n"}, {"idx": "webquery-test-12", "doc": "From ND to 1D arrays", "code": "In [12]: a = np.array([[1,2,3], [4,5,6]])\n\nIn [13]: b = a.ravel()\n\nIn [14]: b\nOut[14]: array([1, 2, 3, 4, 5, 6])\nravel()ravel()ravel()ravel()ravel()ravel()ravel()ravel()ravel()ravel()In [15]: c = a.flatten()\nnp.ndarray.flatIn [20]: d = a.flat\n\nIn [21]: d\nOut[21]: &lt;numpy.flatiter object at 0x8ec2068&gt;\n\nIn [22]: list(d)\nOut[22]: [1, 2, 3, 4, 5, 6]\n"}, {"idx": "webquery-test-13", "doc": "How can I generate a unique ID in Python?", "code": "uuid.uuid4()"}, {"idx": "webquery-test-14", "doc": "Multiprocessing - Pipe vs Queue", "code": "Pipe()Pipe()Queue()Pipe()Pipe()Pipe()Pipe()Pipe()JoinableQueue()JoinableQueue()JoinableQueue()JoinableQueue()# This is on a Thinkpad T430, VMWare running Debian 11 VM, and Python 3.7.0\n\n(py37_test) [mpenning@mudslide ~]$ python multi_pipe.py\nSending 10000 numbers to Pipe() took 0.13469791412353516 seconds\nSending 100000 numbers to Pipe() took 1.5587594509124756 seconds\nSending 1000000 numbers to Pipe() took 14.467186689376831 seconds\n(py37_test) [mpenning@mudslide ~]$ python multi_queue.py\nSending 10000 numbers to Queue() took 0.1897726058959961 seconds\nSending 100000 numbers to Queue() took 1.7622203826904297 seconds\nSending 1000000 numbers to Queue() took 16.89015531539917 seconds\n(py37_test) [mpenning@mudslide ~]$ python multi_joinablequeue.py\nSending 10000 numbers to JoinableQueue() took 0.2238149642944336 seconds\nSending 100000 numbers to JoinableQueue() took 1.4744081497192383 seconds\nSending 1000000 numbers to JoinableQueue() took 15.264554023742676 seconds\n\n\n\n# This is on a ThinkpadT61 running Ubuntu 11.10, and Python 2.7.2\n\nmpenning@mpenning-T61:~$ python multi_pipe.py \nSending 10000 numbers to Pipe() took 0.0369849205017 seconds\nSending 100000 numbers to Pipe() took 0.328398942947 seconds\nSending 1000000 numbers to Pipe() took 3.17266988754 seconds\nmpenning@mpenning-T61:~$ python multi_queue.py \nSending 10000 numbers to Queue() took 0.105256080627 seconds\nSending 100000 numbers to Queue() took 0.980564117432 seconds\nSending 1000000 numbers to Queue() took 10.1611330509 seconds\nmpnening@mpenning-T61:~$ python multi_joinablequeue.py \nSending 10000 numbers to JoinableQueue() took 0.172781944275 seconds\nSending 100000 numbers to JoinableQueue() took 1.5714070797 seconds\nSending 1000000 numbers to JoinableQueue() took 15.8527247906 seconds\nmpenning@mpenning-T61:~$\nPipe()Pipe()Pipe()Pipe()Pipe()Pipe()trytrytryimport traceback\ndef run(self, args):\n    try:\n        # Insert stuff to be multiprocessed here\n        return args[0]['that']\n    except:\n        print \"FATAL: reader({0}) exited while multiprocessing\".format(args) \n        traceback.print_exc()\nFATAL: reader([{'crash': 'this'}]) exited while multiprocessing\nTraceback (most recent call last):\n  File \"foo.py\", line 19, in __init__\n    self.run(args)\n  File \"foo.py\", line 46, in run\n    KeyError: 'that'\n\"\"\"\nmulti_pipe.py\n\"\"\"\nfrom multiprocessing import Process, Pipe\nimport time\n\ndef reader_proc(pipe):\n    ## Read from the pipe; this will be spawned as a separate Process\n    p_output, p_input = pipe\n    p_input.close()    # We are only reading\n    while True:\n        msg = p_output.recv()    # Read from the output pipe and do nothing\n        if msg=='DONE':\n            break\n\ndef writer(count, p_input):\n    for ii in range(0, count):\n        p_input.send(ii)             # Write 'count' numbers into the input pipe\n    p_input.send('DONE')\n\nif __name__=='__main__':\n    for count in [10**4, 10**5, 10**6]:\n        # Pipes are unidirectional with two endpoints:  p_input ------&gt; p_output\n        p_output, p_input = Pipe()  # writer() writes to p_input from _this_ process\n        reader_p = Process(target=reader_proc, args=((p_output, p_input),))\n        reader_p.daemon = True\n        reader_p.start()     # Launch the reader process\n\n        p_output.close()       # We no longer need this part of the Pipe()\n        _start = time.time()\n        writer(count, p_input) # Send a lot of stuff to reader_proc()\n        p_input.close()\n        reader_p.join()\n        print(\"Sending {0} numbers to Pipe() took {1} seconds\".format(count,\n            (time.time() - _start)))\n\"\"\"\nmulti_queue.py\n\"\"\"\n\nfrom multiprocessing import Process, Queue\nimport time\nimport sys\n\ndef reader_proc(queue):\n    ## Read from the queue; this will be spawned as a separate Process\n    while True:\n        msg = queue.get()         # Read from the queue and do nothing\n        if (msg == 'DONE'):\n            break\n\ndef writer(count, queue):\n    ## Write to the queue\n    for ii in range(0, count):\n        queue.put(ii)             # Write 'count' numbers into the queue\n    queue.put('DONE')\n\nif __name__=='__main__':\n    pqueue = Queue() # writer() writes to pqueue from _this_ process\n    for count in [10**4, 10**5, 10**6]:             \n        ### reader_proc() reads from pqueue as a separate process\n        reader_p = Process(target=reader_proc, args=((pqueue),))\n        reader_p.daemon = True\n        reader_p.start()        # Launch reader_proc() as a separate python process\n\n        _start = time.time()\n        writer(count, pqueue)    # Send a lot of stuff to reader()\n        reader_p.join()         # Wait for the reader to finish\n        print(\"Sending {0} numbers to Queue() took {1} seconds\".format(count, \n            (time.time() - _start)))\n\"\"\"\nmulti_joinablequeue.py\n\"\"\"\nfrom multiprocessing import Process, JoinableQueue\nimport time\n\ndef reader_proc(queue):\n    ## Read from the queue; this will be spawned as a separate Process\n    while True:\n        msg = queue.get()         # Read from the queue and do nothing\n        queue.task_done()\n\ndef writer(count, queue):\n    for ii in range(0, count):\n        queue.put(ii)             # Write 'count' numbers into the queue\n\nif __name__=='__main__':\n    for count in [10**4, 10**5, 10**6]:\n        jqueue = JoinableQueue() # writer() writes to jqueue from _this_ process\n        # reader_proc() reads from jqueue as a different process...\n        reader_p = Process(target=reader_proc, args=((jqueue),))\n        reader_p.daemon = True\n        reader_p.start()     # Launch the reader process\n        _start = time.time()\n        writer(count, jqueue) # Send a lot of stuff to reader_proc() (in different process)\n        jqueue.join()         # Wait for the reader to finish\n        print(\"Sending {0} numbers to JoinableQueue() took {1} seconds\".format(count, \n            (time.time() - _start)))\n"}, {"idx": "webquery-test-15", "doc": "How to expand a list to function arguments in Python", "code": "values = [1, 2]\nfoo(*values)\nd = {'a': 1, 'b': 2}\ndef foo(a, b):\n    pass\nfoo(**d)\n"}, {"idx": "webquery-test-16", "doc": "pandas unique values multiple columns", "code": "pd.unique&gt;&gt;&gt; pd.unique(df[['Col1', 'Col2']].values.ravel('K'))\narray(['Bob', 'Joe', 'Bill', 'Mary', 'Steve'], dtype=object)\nravel()ravel()np.unique&gt;&gt;&gt; np.unique(df[['Col1', 'Col2']].values)\narray(['Bill', 'Bob', 'Joe', 'Mary', 'Steve'], dtype=object)\nravel()ravel()&gt;&gt;&gt; df1 = pd.concat([df]*100000, ignore_index=True) # DataFrame with 500000 rows\n&gt;&gt;&gt; %timeit np.unique(df1[['Col1', 'Col2']].values)\n1 loop, best of 3: 1.12 s per loop\n\n&gt;&gt;&gt; %timeit pd.unique(df1[['Col1', 'Col2']].values.ravel('K'))\n10 loops, best of 3: 38.9 ms per loop\n\n&gt;&gt;&gt; %timeit pd.unique(df1[['Col1', 'Col2']].values.ravel()) # ravel using C order\n10 loops, best of 3: 49.9 ms per loop\n"}, {"idx": "webquery-test-17", "doc": "Strange SQLAlchemy error message: TypeError: 'dict' object does not support indexing", "code": "%%%%%%%%%%"}, {"idx": "webquery-test-1", "doc": "Parse date string and change format", "code": "datetimedatetime.datetime.strptime(date_string, format1).strftime(format2)\n&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; datetime.datetime.strptime('Mon Feb 15 2010', '%a %b %d %Y').strftime('%d/%m/%Y')\n'15/02/2010'\n&gt;&gt;&gt;\n"}, {"idx": "webquery-test-2", "doc": "Numpy matrix to array", "code": "A = np.squeeze(np.asarray(M))\nA = np.asarray(M).reshape(-1)"}, {"idx": "webquery-test-3", "doc": "How to get the nth element of a python list or a default if not available", "code": "l[index] if index &lt; len(l) else default\nl[index] if -len(l) &lt;= index &lt; len(l) else default\n"}, {"idx": "webquery-test-4", "doc": "os.path.dirname(__file__) returns empty", "code": "os.path.abspath = os.path.dirname + os.path.basenameos.path.dirname(filename) + os.path.basename(filename) == filename\ndirname()dirname()os.path.dirname(os.path.abspath(__file__))\n"}, {"idx": "webquery-test-5", "doc": "How to do parallel programming in Python?", "code": "from multiprocessing import Pool\npool = Pool()\nresult1 = pool.apply_async(solve1, [A])    # evaluate \"solve1(A)\" asynchronously\nresult2 = pool.apply_async(solve2, [B])    # evaluate \"solve2(B)\" asynchronously\nanswer1 = result1.get(timeout=10)\nanswer2 = result2.get(timeout=10)\nprocessesargs = [A, B]\nresults = pool.map(solve1, args)\n"}, {"idx": "webquery-test-6", "doc": "Matplotlib scatterplot; color as a function of a third variable", "code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate data...\nx = np.random.random(10)\ny = np.random.random(10)\n\n# Plot...\nplt.scatter(x, y, c=y, s=500)\nplt.gray()\n\nplt.show()\ncmapcmapcmapcmapcmapcmapcmapcmapimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate data...\nx = np.random.random(10)\ny = np.random.random(10)\n\nplt.scatter(x, y, c=y, s=500, cmap='gray')\nplt.show()\n"}, {"idx": "webquery-test-7", "doc": "How can I install Python's pip3 on my Mac?", "code": "brew install python3\npippippipbrew install python3brew install python3brew install python3\nbrew postinstall python3\npip3"}, {"idx": "webquery-test-8", "doc": "How do you read a file into a list in Python?", "code": "with open('C:/path/numbers.txt') as f:\n    lines = f.read().splitlines()\n"}, {"idx": "webquery-test-9", "doc": "python tuple to dict", "code": "&gt;&gt;&gt; t = ((1, 'a'),(2, 'b'))\n&gt;&gt;&gt; dict((y, x) for x, y in t)\n{'a': 1, 'b': 2}\n"}, {"idx": "webquery-test-10", "doc": "Clear text from textarea with selenium", "code": "driver.find_element_by_id('foo').clear()\n"}, {"idx": "webquery-test-11", "doc": "How do we determine the number of days for a given month in python", "code": "calendar.monthrange&gt;&gt;&gt; from calendar import monthrange\n&gt;&gt;&gt; monthrange(2011, 2)\n(1, 28)\nmonthrange&gt;&gt;&gt; from calendar import monthrange\n&gt;&gt;&gt; monthrange(2012, 2)\n(2, 29)\n"}, {"idx": "webquery-test-12", "doc": "How could I use requests in asyncio?", "code": "import asyncio\nimport requests\n\n@asyncio.coroutine\ndef main():\n    loop = asyncio.get_event_loop()\n    future1 = loop.run_in_executor(None, requests.get, 'http://www.google.com')\n    future2 = loop.run_in_executor(None, requests.get, 'http://www.google.co.uk')\n    response1 = yield from future1\n    response2 = yield from future2\n    print(response1.text)\n    print(response2.text)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\nawaitawaitimport asyncio\nimport requests\n\nasync def main():\n    loop = asyncio.get_event_loop()\n    future1 = loop.run_in_executor(None, requests.get, 'http://www.google.com')\n    future2 = loop.run_in_executor(None, requests.get, 'http://www.google.co.uk')\n    response1 = await future1\n    response2 = await future2\n    print(response1.text)\n    print(response2.text)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n"}, {"idx": "webquery-test-13", "doc": "If list index exists, do X", "code": "len(n)len(n)"}, {"idx": "webquery-test-14", "doc": "Plot yerr/xerr as shaded region rather than error bars", "code": "pyplot.fill_between()from matplotlib import pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 30, 30)\ny = np.sin(x/6*np.pi)\nerror = np.random.normal(0.1, 0.02, size=y.shape)\ny += np.random.normal(0, 0.1, size=y.shape)\n\nplt.plot(x, y, 'k-')\nplt.fill_between(x, y-error, y+error)\nplt.show()\n"}, {"idx": "webquery-test-15", "doc": "How do I add the contents of an iterable to a set?", "code": "listlist&gt;&gt;&gt; foo = set(range(0, 4))\n&gt;&gt;&gt; foo\nset([0, 1, 2, 3])\n&gt;&gt;&gt; foo.update(range(2, 6))\n&gt;&gt;&gt; foo\nset([0, 1, 2, 3, 4, 5])\n"}, {"idx": "webquery-test-16", "doc": "Counting the number of True Booleans in a Python List", "code": "TrueTrue&gt;&gt;&gt; sum([True, True, False, False, False, True])\n3\n"}, {"idx": "webquery-test-17", "doc": "How to enable CORS in flask", "code": "pip install -U flask-corsfrom flask import Flask\nfrom flask_cors import CORS, cross_origin\napp = Flask(__name__)\ncors = CORS(app)\napp.config['CORS_HEADERS'] = 'Content-Type'\n\n@app.route(\"/\")\n@cross_origin()\ndef helloWorld():\n  return \"Hello, cross-origin-world!\"\n"}, {"idx": "webquery-test-18", "doc": "Why is \"import *\" bad?", "code": "pyflakes"}, {"idx": "webquery-test-19", "doc": "What does colon equal (:=) in Python mean?", "code": ":=# Handle a matched regex\nif (match := pattern.search(data)) is not None:\n    # Do something with match\n\n# A loop that can't be trivially rewritten using 2-arg iter()\nwhile chunk := file.read(8192):\n   process(chunk)\n\n# Reuse a value that's expensive to compute\n[y := f(x), y**2, y**3]\n\n# Share a subexpression between a comprehension filter clause and its output\nfiltered_data = [y for x in data if (y := f(x)) is not None]\n:=:=:=:=:=:=procedure fizzbuzz\nFor i := 1 to 100 do\n    set print_number to true;\n    If i is divisible by 3 then\n        print \"Fizz\";\n        set print_number to false;\n    If i is divisible by 5 then\n        print \"Buzz\";\n        set print_number to false;\n    If print_number, print i;\n    print a newline;\nend\nvoid function fizzbuzz\nFor (i = 1; i &lt;= 100; i++) {\n    set print_number to true;\n    If i is divisible by 3\n        print \"Fizz\";\n        set print_number to false;\n    If i is divisible by 5\n        print \"Buzz\";\n        set print_number to false;\n    If print_number, print i;\n    print a newline;\n}\n"}, {"idx": "webquery-test-20", "doc": "How do you create different variable names while in a loop?", "code": "d = {}\nfor x in range(1, 10):\n    d[\"string{0}\".format(x)] = \"Hello\"\n&gt;&gt;&gt; d[\"string5\"]\n'Hello'\n&gt;&gt;&gt; d\n{'string1': 'Hello',\n 'string2': 'Hello',\n 'string3': 'Hello',\n 'string4': 'Hello',\n 'string5': 'Hello',\n 'string6': 'Hello',\n 'string7': 'Hello',\n 'string8': 'Hello',\n 'string9': 'Hello'}\n"}, {"idx": "webquery-test-21", "doc": "How do I know if I can disable SQLALCHEMY_TRACK_MODIFICATIONS?", "code": "models_committedmodels_committedNoneNoneFalseSQLALCHEMY_TRACK_MODIFICATIONS = False\nSQLALCHEMY_TRACK_MODIFICATIONS"}, {"idx": "webquery-test-1", "doc": "How many concurrent requests does a single Flask process receive?", "code": "app.run()--workers--workers--workerseventleteventleteventleteventlet"}, {"idx": "webquery-test-2", "doc": "TypeError: module.__init__() takes at most 2 arguments (3 given)", "code": "Objectfrom Object import ClassName\nclass Visitor(ClassName):\nclass Visitor(Object.ClassName):\n   etc\n"}, {"idx": "webquery-test-3", "doc": "How can I remove a pytz timezone from a datetime object?", "code": "# dt_tz is a datetime.datetime object\ndt = dt_tz.replace(tzinfo=None)\n# &lt;Arrow [2014-10-09T10:56:09.347444-07:00]&gt;\narrowObj = arrow.get('2014-10-09T10:56:09.347444-07:00')\n\n# datetime.datetime(2014, 10, 9, 10, 56, 9, 347444, tzinfo=tzoffset(None, -25200))\ntmpDatetime = arrowObj.datetime\n\n# datetime.datetime(2014, 10, 9, 10, 56, 9, 347444)\ntmpDatetime = tmpDatetime.replace(tzinfo=None)\ndatetime.datetimedatetime.datetimedatetime.datetime##############################################################################\n# MySQL example! where MySQL doesn't support timezones with its DATETIME type!\n##############################################################################\n\narrowObj = arrow.get('2014-10-09T10:56:09.347444-07:00')\n\narrowDt = arrowObj.to(\"utc\").datetime\n\n# inserts datetime.datetime(2014, 10, 9, 17, 56, 9, 347444, tzinfo=tzutc())\ninsertIntoMysqlDatabase(arrowDt)\n\n# returns datetime.datetime(2014, 10, 9, 17, 56, 9, 347444)\ndbDatetimeNoTz = getFromMysqlDatabase()\n\n# cannot compare timzeone aware and timezone naive\ndbDatetimeNoTz == arrowDt # False, or TypeError on python versions before 3.3\n\n# compare datetimes that are both aware or both naive work however\ndbDatetimeNoTz == arrowDt.replace(tzinfo=None) # True\n"}, {"idx": "webquery-test-4", "doc": "When should I (not) want to use pandas apply() in my code?", "code": "applyapplyDataFrame.applyDataFrame.applyDataFrame.applyDataFrame.applyapplyaxis=1axis=1axis=1axis=1axis=1applyapplyapplyapplyapplyapplyapplyapplyapplydf = pd.DataFrame({\"A\": [9, 4, 2, 1], \"B\": [12, 7, 5, 4]})\ndf\n\n   A   B\n0  9  12\n1  4   7\n2  2   5\n3  1   4\ndf.apply(np.sum)\n\nA    16\nB    28\ndtype: int64\n\ndf.sum()\n\nA    16\nB    28\ndtype: int64\n%timeit df.apply(np.sum)\n%timeit df.sum()\n2.22 ms \u00b1 41.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n471 \u00b5s \u00b1 8.16 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\nraw%timeit df.apply(np.sum, raw=True)\n840 \u00b5s \u00b1 691 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\ndf.apply(lambda x: x.max() - x.min())\n\nA    8\nB    8\ndtype: int64\n\ndf.max() - df.min()\n\nA    8\nB    8\ndtype: int64\n\n%timeit df.apply(lambda x: x.max() - x.min())\n%timeit df.max() - df.min()\n\n2.43 ms \u00b1 450 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n1.23 ms \u00b1 14.7 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\ndf = pd.DataFrame({\n    'Name': ['mickey', 'donald', 'minnie'],\n    'Title': ['wonderland', \"welcome to donald's castle\", 'Minnie mouse clubhouse'],\n    'Value': [20, 10, 86]})\ndf\n\n     Name  Value                       Title\n0  mickey     20                  wonderland\n1  donald     10  welcome to donald's castle\n2  minnie     86      Minnie mouse clubhouse\ndf.apply(lambda x: x['Name'].lower() in x['Title'].lower(), axis=1)\n\n0    False\n1     True\n2     True\ndtype: bool\n \ndf[df.apply(lambda x: x['Name'].lower() in x['Title'].lower(), axis=1)]\n\n     Name                       Title  Value\n1  donald  welcome to donald's castle     10\n2  minnie      Minnie mouse clubhouse     86\ndf[[y.lower() in x.lower() for x, y in zip(df['Title'], df['Name'])]]\n\n     Name                       Title  Value\n1  donald  welcome to donald's castle     10\n2  minnie      Minnie mouse clubhouse     86\n%timeit df[df.apply(lambda x: x['Name'].lower() in x['Title'].lower(), axis=1)]\n%timeit df[[y.lower() in x.lower() for x, y in zip(df['Title'], df['Name'])]]\n\n2.85 ms \u00b1 38.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n788 \u00b5s \u00b1 16.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\napplypd.to_datetime(df['date'])pd.to_datetime(df['date'])s = pd.Series([[1, 2]] * 3)\ns\n\n0    [1, 2]\n1    [1, 2]\n2    [1, 2]\ndtype: object\napply(pd.Series)s.apply(pd.Series)\n\n   0  1\n0  1  2\n1  1  2\n2  1  2\npd.DataFrame(s.tolist())\n\n   0  1\n0  1  2\n1  1  2\n2  1  2\n%timeit s.apply(pd.Series)\n%timeit pd.DataFrame(s.tolist())\n\n2.65 ms \u00b1 294 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n816 \u00b5s \u00b1 40.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\napplydf = pd.DataFrame(\n         pd.date_range('2018-12-31','2019-01-31', freq='2D').date.astype(str).reshape(-1, 2), \n         columns=['date1', 'date2'])\ndf\n\n       date1      date2\n0 2018-12-31 2019-01-02\n1 2019-01-04 2019-01-06\n2 2019-01-08 2019-01-10\n3 2019-01-12 2019-01-14\n4 2019-01-16 2019-01-18\n5 2019-01-20 2019-01-22\n6 2019-01-24 2019-01-26\n7 2019-01-28 2019-01-30\n\ndf.dtypes\n\ndate1    object\ndate2    object\ndtype: object\n    \napplydf.apply(pd.to_datetime, errors='coerce').dtypes\n\ndate1    datetime64[ns]\ndate2    datetime64[ns]\ndtype: object\nstackstack%timeit df.apply(pd.to_datetime, errors='coerce')\n%timeit pd.to_datetime(df.stack(), errors='coerce').unstack()\n%timeit pd.concat([pd.to_datetime(df[c], errors='coerce') for c in df], axis=1)\n%timeit for c in df.columns: df[c] = pd.to_datetime(df[c], errors='coerce')\n\n5.49 ms \u00b1 247 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n3.94 ms \u00b1 48.1 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n3.16 ms \u00b1 216 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n2.41 ms \u00b1 1.71 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\nu = df.apply(lambda x: x.str.contains(...))\nv = df.apply(lambda x: x.astype(category))\nu = pd.concat([df[c].str.contains(...) for c in df], axis=1)\nv = df.copy()\nfor c in df:\n    v[c] = df[c].astype(category)\nstrstrstrapplyapplyperfplotimport perfplot\n\nperfplot.show(\n    setup=lambda n: pd.Series(np.random.randint(0, n, n)),\n    kernels=[\n        lambda s: s.astype(str),\n        lambda s: s.apply(str)\n    ],\n    labels=['astype', 'apply'],\n    n_range=[2**k for k in range(1, 20)],\n    xlabel='N',\n    logx=True,\n    logy=True,\n    equality_check=lambda x, y: (x == y).all())\nastypeastypeGroupByGroupBy.applyGroupBy.applyGroupBy.applydf = pd.DataFrame({\"A\": list('aabcccddee'), \"B\": [12, 7, 5, 4, 5, 4, 3, 2, 1, 10]})\ndf\n\n   A   B\n0  a  12\n1  a   7\n2  b   5\n3  c   4\n4  c   5\n5  c   4\n6  d   3\n7  d   2\n8  e   1\n9  e  10\ndf.groupby('A').B.cumsum().groupby(df.A).shift()\n \n0     NaN\n1    12.0\n2     NaN\n3     NaN\n4     4.0\n5     9.0\n6     NaN\n7     3.0\n8     NaN\n9     1.0\nName: B, dtype: float64\napplydf.groupby('A').B.apply(lambda x: x.cumsum().shift())\n\n0     NaN\n1    12.0\n2     NaN\n3     NaN\n4     4.0\n5     9.0\n6     NaN\n7     3.0\n8     NaN\n9     1.0\nName: B, dtype: float64\napplyapplyapplyapplyapplydf = pd.DataFrame({\n    'A': [1, 2],\n    'B': ['x', 'y']\n})\n\ndef func(x):\n    print(x['A'])\n    return x\n\ndf.apply(func, axis=1)\n\n# 1\n# 1\n# 2\n   A  B\n0  1  x\n1  2  y\nGroupBy.apply"}, {"idx": "webquery-test-5", "doc": "Slicing of a NumPy 2d array, or how do I extract an mxm submatrix from an nxn array (n>m)?", "code": "xxxxy = x[0:2,0:2]y = x[0:2,0:2]y = x[0:2,0:2]y = x[0:2,0:2]y = x[0:2,0:2]x[i,j]x[i,j]x.strides\n(16, 4)\nyyyyyy.shape\n(2,2)\ny.strides\n(16, 4)\ny[i,j]z=x[[1,3]]z=x[[1,3]]x[[[1],[3]],[1,3]]\nx[1::2, 1::2]\n"}, {"idx": "webquery-test-6", "doc": "Remove characters except digits from string using Python?", "code": "re.sub&gt;&gt;&gt; import re\n&gt;&gt;&gt; re.sub('\\D', '', 'aas30dsa20')\n'3020'\n\\Dfilter&gt;&gt;&gt; filter(str.isdigit, 'aas30dsa20')\n'3020'\nfilterfilter&gt;&gt;&gt; ''.join(filter(str.isdigit, 'aas30dsa20'))\n'3020'\n"}, {"idx": "webquery-test-7", "doc": "Convert decimal to binary in python", "code": "bin(i)&gt;&gt;&gt; bin(10)\n'0b1010'\n&gt;&gt;&gt; 0b1010\n10\n"}, {"idx": "webquery-test-8", "doc": "Multiprocessing : use tqdm to display a progress bar", "code": "imapimapfrom multiprocessing import Pool\nimport tqdm\nimport time\n\ndef _foo(my_number):\n   square = my_number * my_number\n   time.sleep(1)\n   return square \n\nif __name__ == '__main__':\n   with Pool(2) as p:\n      r = list(tqdm.tqdm(p.imap(_foo, range(30)), total=30))\n"}, {"idx": "webquery-test-9", "doc": "In Django, how do I check if a user is in a certain group?", "code": "def is_member(user):\n    return user.groups.filter(name='Member').exists()\ndef is_in_multiple_groups(user):\n    return user.groups.filter(name__in=['group1', 'group2']).exists()\nfrom django.contrib.auth.decorators import login_required, user_passes_test\n\n@login_required\n@user_passes_test(is_member) # or @user_passes_test(is_in_multiple_groups)\ndef myview(request):\n    # Do your processing\nUserPassesTestMixinUserPassesTestMixinfrom django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin\n\nclass MyView(LoginRequiredMixin, UserPassesTestMixin, View):\n\n    login_url = '/login/'\n    redirect_field_name = 'redirect_to'\n\n    def test_func(self):\n        return is_member(self.request.user)\n"}, {"idx": "webquery-test-10", "doc": "Django Admin - Disable the 'Add' action for a specific model", "code": "has_add_permissionhas_add_permissionclass MyAdmin(admin.ModelAdmin):\n     def has_add_permission(self, request, obj=None):\n        return False\n"}, {"idx": "webquery-test-11", "doc": "One line if-condition-assignment", "code": "num1 = 20 if someBoolValue else num1\nelse num1if someBoolValue: num1=20\nnum1 = someBoolValue and 20 or num1if someBoolValue:\n    num1 = 20\nnum1 = 20 if someBoolValue"}, {"idx": "webquery-test-12", "doc": "Read password from stdin", "code": "&gt;&gt;&gt; import getpass\n&gt;&gt;&gt; pw = getpass.getpass()\n"}, {"idx": "webquery-test-13", "doc": "When splitting an empty string in Python, why does split() return an empty list while split('\\n') returns ['']?", "code": "split('\\n')split('\\n')split('\\n')split('\\n')split('\\n')str.split()\\n\\n&gt;&gt;&gt; data = '''\\\nShasta      California     14,200\nMcKinley    Alaska         20,300\nFuji        Japan          12,400\n'''\n&gt;&gt;&gt; for line in data.splitlines():\n        print(line.split())\n\n['Shasta', 'California', '14,200']\n['McKinley', 'Alaska', '20,300']\n['Fuji', 'Japan', '12,400']\n&gt;&gt;&gt; data = '''\\\nGuido,BDFL,,Amsterdam\nBarry,FLUFL,,USA\nTim,,,USA\n'''\n&gt;&gt;&gt; for line in data.splitlines():\n        print(line.split(','))\n\n['Guido', 'BDFL', '', 'Amsterdam']\n['Barry', 'FLUFL', '', 'USA']\n['Tim', '', '', 'USA']\nstr.split(delimiter)&gt;&gt;&gt; ''.split(',')       # No cuts\n['']\n&gt;&gt;&gt; ','.split(',')      # One cut\n['', '']\n&gt;&gt;&gt; ',,'.split(',')     # Two cuts\n['', '', '']\nstr.count()str.count()str.count()str.count()&gt;&gt;&gt; data = '''\\\nLine 1\nLine 2\nLine 3\nLine 4'''\n\n&gt;&gt;&gt; data.count('\\n')                               # Inaccurate\n3\n&gt;&gt;&gt; len(data.splitlines())                         # Accurate, but slow\n4\n&gt;&gt;&gt; data.count('\\n') + (not data.endswith('\\n'))   # Accurate and fast\n4    \nstr.splitps_aux_header  = 'USER               PID  %CPU %MEM      VSZ'\npatient_header = 'name,age,height,weight'\nfields = line.split()fields = line.split()"}, {"idx": "webquery-test-14", "doc": "Type hints with user defined classes", "code": "argargdef FuncA(arg: CustomClass):\n    #     ^ instance of CustomClass\nCustomClassfrom typing import Type  # you have to import Type\n\ndef FuncA(arg: Type[CustomClass]):\n    #     ^ CustomClass (class object) itself\n<b>class typing.Type(Generic[CT_co])</b><b>class typing.Type(Generic[CT_co])</b><b>class typing.Type(Generic[CT_co])</b><b>class typing.Type(Generic[CT_co])</b><b>class typing.Type(Generic[CT_co])</b>inta = 3         # Has type 'int'\nb = int       # Has type 'Type[int]'\nc = type(a)   # Also has type 'Type[int]'\n"}, {"idx": "webquery-test-15", "doc": "What is python's site-packages directory?", "code": "site-packagessite-packagessite-packagesprefix/lib/pythonX.Y/site-packagesprefix/lib/pythonX.Y/site-packagesprefix/lib/pythonX.Y/site-packagessite-packages"}, {"idx": "webquery-test-16", "doc": "pip or pip3 to install packages for Python 3?", "code": "pippippippip$ ls -l `which pip`\n$ ls -l `which pip3`\n$ pip show pip\n$ pip3 show pip\npythonpythonpython"}, {"idx": "webquery-test-17", "doc": "How to run Tensorflow on CPU", "code": "CUDA_VISIBLE_DEVICES=\"\"\n"}, {"idx": "webquery-test-18", "doc": "How to convert a string with comma-delimited items to a list in Python?", "code": "&gt;&gt;&gt; text = 'a,b,c'\n&gt;&gt;&gt; text = text.split(',')\n&gt;&gt;&gt; text\n[ 'a', 'b', 'c' ]\n"}, {"idx": "webquery-test-19", "doc": "Modifying a subset of rows in a pandas dataframe", "code": ".locdf.loc[df.A==0, 'B'] = np.nan\ndf.A==0df.A==0df.loc[df.A==0, 'B'] = df.loc[df.A==0, 'B'] / 2\n"}, {"idx": "webquery-test-20", "doc": "How can I build multiple submit buttons django form?", "code": "if 'newsletter_sub' in request.POST:\n    # do subscribe\nelif 'newsletter_unsub' in request.POST:\n    # do unsubscribe\n"}, {"idx": "webquery-test-1", "doc": "How to crop an image using PIL?", "code": "crop()w, h = yourImage.size\nyourImage.crop((0, 30, w, h-30)).save(...)\n"}, {"idx": "webquery-test-2", "doc": "How to estimate how much memory a Pandas' DataFrame will need?", "code": "df.memory_usage()&gt;&gt;&gt; df.memory_usage()\n\nRow_ID            20906600\nHousehold_ID      20906600\nVehicle           20906600\nCalendar_Year     20906600\nModel_Year        20906600\n...\nindex=True&gt;&gt;&gt; df.memory_usage(index=True).sum()\n731731000\ndeep=Truedeep=False"}, {"idx": "webquery-test-3", "doc": "Define a lambda expression that raises an Exception", "code": "y = lambda: (_ for _ in ()).throw(Exception('foobar'))\nraise exdef raise_(ex):\n    raise ex\n\ny = lambda: raise_(Exception('foobar'))\ndefy = lambda x: 2*x if x &lt; 10 else raise_(Exception('foobar'))\ntype(lambda:0)(type((lambda:0).func_code)(\n  1,1,1,67,'|\\0\\0\\202\\1\\0',(),(),('x',),'','',1,''),{}\n)(Exception())\ntype(lambda: 0)(type((lambda: 0).__code__)(\n    1,0,1,1,67,b'|\\0\\202\\1\\0',(),(),('x',),'','',1,b''),{}\n)(Exception())\ny = lambda: 1/0"}, {"idx": "webquery-test-4", "doc": "ImportError: No module named dateutil.parser", "code": "pipsudo apt-get install python-pip\npython-dateutilsudo pip install python-dateutil\n"}, {"idx": "webquery-test-5", "doc": "AttributeError: 'module' object has no attribute 'urlopen'", "code": "import urllib.request\n\nwith urllib.request.urlopen(\"http://www.python.org\") as url:\n    s = url.read()\n    # I'm guessing this would output the html source code ?\n    print(s)\n"}, {"idx": "webquery-test-6", "doc": "How to check if a path is absolute path or relative path in a cross-platform way with Python?", "code": "os.path.isabsos.path.isabsos.path.isabsos.path.isabs(my_path)\n"}, {"idx": "webquery-test-7", "doc": "How to debug a Flask app", "code": "--app--app--app$ flask --app example --debug run\nFLASK_ENV=developmentFLASK_ENV=developmentFLASK_ENV=development$ export FLASK_APP=example\n$ export FLASK_DEBUG=1\n$ flask run\nsetset FLASK_DEBUG=1\n$env$env:FLASK_DEBUG = \"1\"\napp.run()app.run()app.run()app.run(debug=True, use_reloader=False)app.run(debug=True, use_reloader=False)set_tracetry... except..."}, {"idx": "webquery-test-8", "doc": "Visual Studio Code: How debug Python script with arguments", "code": "    \"args\": [\"--city\",\"Auckland\"]\n--key1 value1 value2 --key2 value3 value4\nargs\"args\": [\"--key1\", \"value1\", \"value2\", \"--key2\", \"value3\", \"value4\"]"}, {"idx": "webquery-test-9", "doc": "How to find a Python package's dependencies", "code": "pip show [package name]pip show [package name]$ pip install pipdeptree\n$ pipdeptree\nflake8==2.5.0\n  - mccabe [required: &gt;=0.2.1,&lt;0.4, installed: 0.3.1]\n  - pep8 [required: !=1.6.0,&gt;=1.5.7,!=1.6.1,!=1.6.2, installed: 1.5.7]\n  - pyflakes [required: &gt;=0.8.1,&lt;1.1, installed: 1.0.0]\nipdb==0.8\n  - ipython [required: &gt;=0.10, installed: 1.1.0]\n"}, {"idx": "webquery-test-10", "doc": "Difference between Python datetime vs time modules", "code": "timetime"}, {"idx": "webquery-test-11", "doc": "Fitting empirical distribution to theoretical ones with Scipy (Python)?", "code": "scipy.statsstatsmodels%matplotlib inline\n\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport scipy.stats as st\nimport statsmodels.api as sm\nfrom scipy.stats._continuous_distns import _distn_names\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nmatplotlib.rcParams['figure.figsize'] = (16.0, 12.0)\nmatplotlib.style.use('ggplot')\n\n# Create models from data\ndef best_fit_distribution(data, bins=200, ax=None):\n    \"\"\"Model data by finding best fit distribution to data\"\"\"\n    # Get histogram of original data\n    y, x = np.histogram(data, bins=bins, density=True)\n    x = (x + np.roll(x, -1))[:-1] / 2.0\n\n    # Best holders\n    best_distributions = []\n\n    # Estimate distribution parameters from data\n    for ii, distribution in enumerate([d for d in _distn_names if not d in ['levy_stable', 'studentized_range']]):\n\n        print(\"{:&gt;3} / {:&lt;3}: {}\".format( ii+1, len(_distn_names), distribution ))\n\n        distribution = getattr(st, distribution)\n\n        # Try to fit the distribution\n        try:\n            # Ignore warnings from data that can't be fit\n            with warnings.catch_warnings():\n                warnings.filterwarnings('ignore')\n                \n                # fit dist to data\n                params = distribution.fit(data)\n\n                # Separate parts of parameters\n                arg = params[:-2]\n                loc = params[-2]\n                scale = params[-1]\n                \n                # Calculate fitted PDF and error with fit in distribution\n                pdf = distribution.pdf(x, loc=loc, scale=scale, *arg)\n                sse = np.sum(np.power(y - pdf, 2.0))\n                \n                # if axis pass in add to plot\n                try:\n                    if ax:\n                        pd.Series(pdf, x).plot(ax=ax)\n                    end\n                except Exception:\n                    pass\n\n                # identify if this distribution is better\n                best_distributions.append((distribution, params, sse))\n        \n        except Exception:\n            pass\n\n    \n    return sorted(best_distributions, key=lambda x:x[2])\n\ndef make_pdf(dist, params, size=10000):\n    \"\"\"Generate distributions's Probability Distribution Function \"\"\"\n\n    # Separate parts of parameters\n    arg = params[:-2]\n    loc = params[-2]\n    scale = params[-1]\n\n    # Get sane start and end points of distribution\n    start = dist.ppf(0.01, *arg, loc=loc, scale=scale) if arg else dist.ppf(0.01, loc=loc, scale=scale)\n    end = dist.ppf(0.99, *arg, loc=loc, scale=scale) if arg else dist.ppf(0.99, loc=loc, scale=scale)\n\n    # Build PDF and turn into pandas Series\n    x = np.linspace(start, end, size)\n    y = dist.pdf(x, loc=loc, scale=scale, *arg)\n    pdf = pd.Series(y, x)\n\n    return pdf\n\n# Load data from statsmodels datasets\ndata = pd.Series(sm.datasets.elnino.load_pandas().data.set_index('YEAR').values.ravel())\n\n# Plot for comparison\nplt.figure(figsize=(12,8))\nax = data.plot(kind='hist', bins=50, density=True, alpha=0.5, color=list(matplotlib.rcParams['axes.prop_cycle'])[1]['color'])\n\n# Save plot limits\ndataYLim = ax.get_ylim()\n\n# Find best fit distribution\nbest_distibutions = best_fit_distribution(data, 200, ax)\nbest_dist = best_distibutions[0]\n\n# Update plots\nax.set_ylim(dataYLim)\nax.set_title(u'El Ni\u00f1o sea temp.\\n All Fitted Distributions')\nax.set_xlabel(u'Temp (\u00b0C)')\nax.set_ylabel('Frequency')\n\n# Make PDF with best params \npdf = make_pdf(best_dist[0], best_dist[1])\n\n# Display\nplt.figure(figsize=(12,8))\nax = pdf.plot(lw=2, label='PDF', legend=True)\ndata.plot(kind='hist', bins=50, density=True, alpha=0.5, label='Data', legend=True, ax=ax)\n\nparam_names = (best_dist[0].shapes + ', loc, scale').split(', ') if best_dist[0].shapes else ['loc', 'scale']\nparam_str = ', '.join(['{}={:0.2f}'.format(k,v) for k,v in zip(param_names, best_dist[1])])\ndist_str = '{}({})'.format(best_dist[0].name, param_str)\n\nax.set_title(u'El Ni\u00f1o sea temp. with best fit distribution \\n' + dist_str)\nax.set_xlabel(u'Temp. (\u00b0C)')\nax.set_ylabel('Frequency')\n"}, {"idx": "webquery-test-12", "doc": "No such file or directory \"limits.h\" when installing Pillow on Alpine Linux", "code": "musl-dev"}, {"idx": "webquery-test-13", "doc": "open read and close a file in 1 line of code", "code": "with open('pagehead.section.htm', 'r') as f:\n    output = f.read()\n"}, {"idx": "webquery-test-14", "doc": "Combine Date and Time columns using pandas", "code": "read_csvread_csvto_datetimeto_datetimeIn [11]: df['Date'] + ' ' + df['Time']\nOut[11]:\n0    01-06-2013 23:00:00\n1    02-06-2013 01:00:00\n2    02-06-2013 21:00:00\n3    02-06-2013 22:00:00\n4    02-06-2013 23:00:00\n5    03-06-2013 01:00:00\n6    03-06-2013 21:00:00\n7    03-06-2013 22:00:00\n8    03-06-2013 23:00:00\n9    04-06-2013 01:00:00\ndtype: object\n\nIn [12]: pd.to_datetime(df['Date'] + ' ' + df['Time'])\nOut[12]:\n0   2013-01-06 23:00:00\n1   2013-02-06 01:00:00\n2   2013-02-06 21:00:00\n3   2013-02-06 22:00:00\n4   2013-02-06 23:00:00\n5   2013-03-06 01:00:00\n6   2013-03-06 21:00:00\n7   2013-03-06 22:00:00\n8   2013-03-06 23:00:00\n9   2013-04-06 01:00:00\ndtype: datetime64[ns]\n+ ' '+ ' '+ ' 'pd.to_datetime(df['Date'] + df['Time'], format='%m-%d-%Y%H:%M:%S')\nraise%%timeit# sample dataframe with 10000000 rows using df from the OP\ndf = pd.concat([df for _ in range(1000000)]).reset_index(drop=True)\n\n%%timeit\npd.to_datetime(df['Date'] + ' ' + df['Time'])\n[result]:\n1.73 s \u00b1 10.4 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n\n%%timeit\npd.to_datetime(df['Date'] + df['Time'], format='%m-%d-%Y%H:%M:%S')\n[result]:\n1.33 s \u00b1 9.88 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n"}, {"idx": "webquery-test-15", "doc": "How to check if variable is string with python 2 and 3 compatibility", "code": "from six import string_types\nisinstance(s, string_types)\n"}, {"idx": "webquery-test-16", "doc": "In Python, how do I index a list with another list?", "code": "T = [L[i] for i in Idx]\n"}, {"idx": "webquery-test-17", "doc": "How exactly do Django content types work?", "code": "# ourapp.models\nfrom django.conf import settings\nfrom django.db import models\n\n# Assign the User model in case it has been \"swapped\"\nUser = settings.AUTH_USER_MODEL\n\n# Create your models here\nclass Post(models.Model):\n  author = models.ForeignKey(User)\n  title = models.CharField(max_length=75)\n  slug = models.SlugField(unique=True)\n  body = models.TextField(blank=True)\n\nclass Picture(models.Model):\n  author = models.ForeignKey(User)\n  image = models.ImageField()\n  caption = models.TextField(blank=True)\n\nclass Comment(models.Model):\n  author = models.ForeignKey(User)\n  body = models.TextField(blank=True)\n  post = models.ForeignKey(Post)\n  picture = models.ForeignKey(Picture)\nCommentComment# ourapp.models\nfrom django.contrib.contenttypes.fields import GenericForeignKey\nfrom django.contrib.contenttypes.models import ContentType\n\n...\n\nclass Comment(models.Model):\n  author = models.ForeignKey(User)\n  body = models.TextField(blank=True)\n  content_type = models.ForeignKey(ContentType)\n  object_id = models.PositiveIntegerField()\n  content_object = GenericForeignKey()\nGenericForeignKeyGenericForeignKeyGenericForeignKeyGenericForeignKeyGenericForeignKeyGenericRelation# ourapp.models\nfrom django.contrib.contenttypes.fields import GenericRelation\n\n...\n\nclass Post(models.Model):\n  author = models.ForeignKey(User)\n  title = models.CharField(max_length=75)\n  slug = models.SlugField(unique=True)\n  body = models.TextField(blank=True)\n  comments = GenericRelation('Comment')\n\nclass Picture(models.Model):\n  author = models.ForeignKey(User)\n  image = models.ImageField()\n  caption = models.TextField(blank=True)\n  comments = GenericRelation('Comment')\npython manage.py shell&gt;&gt;&gt; from django.contrib.auth import get_user_model\n&gt;&gt;&gt; from ourapp.models import Picture, Post\n\n# We use get_user_model() since we are referencing directly\nUser = get_user_model()\n\n# Grab our own User object\n&gt;&gt;&gt; me = User.objects.get(username='myusername')\n\n# Grab the first of our own pictures so we can comment on it\n&gt;&gt;&gt; pic = Picture.objects.get(author=me)\n\n# Let's start making a comment for our own picture\n&gt;&gt;&gt; pic.comments.create(author=me, body=\"Man, I'm cool!\")\n\n# Let's go ahead and retrieve the comments for this picture now\n&gt;&gt;&gt; pic.comments.all()\n[&lt;Comment: \"Man, I'm cool!\"&gt;]\n\n# Same for Post comments\n&gt;&gt;&gt; post = Post.objects.get(author=me)\n&gt;&gt;&gt; post.comments.create(author=me, body=\"So easy to comment now!\")\n&gt;&gt;&gt; post.comments.all()\n[&lt;Comment: \"So easy to comment now!\"]\nchatterlychatterly# noise_nimbus.models\nfrom django.conf import settings\nfrom django.contrib.contenttypes.fields import GenericRelation\nfrom django.db import models\n\nfrom chatterly.models import Comment\n\n# For a third time, we take the time to ensure custom Auth isn't overlooked\nUser = settings.AUTH_USER_MODEL\n\n# Create your models here\nclass Song(models.Model):\n  '''\n  A song which can be commented on.\n  '''\n  file = models.FileField()\n  author = models.ForeignKey(User)\n  title = models.CharField(max_length=75)\n  slug = models.SlugField(unique=True)\n  description = models.TextField(blank=True)\n  comments = GenericRelation(Comment)\nGenericForeignKeyGenericForeignKeyGenericRelationGenericRelationGenericRelationGenericRelation"}, {"idx": "webquery-test-1", "doc": "Filtering a list based on a list of booleans", "code": "itertools.compress&gt;&gt;&gt; from itertools import compress\n&gt;&gt;&gt; list_a = [1, 2, 4, 6]\n&gt;&gt;&gt; fil = [True, False, True, False]\n&gt;&gt;&gt; list(compress(list_a, fil))\n[1, 4]\n&gt;&gt;&gt; list_a = [1, 2, 4, 6]\n&gt;&gt;&gt; fil = [True, False, True, False]\n&gt;&gt;&gt; %timeit list(compress(list_a, fil))\n100000 loops, best of 3: 2.58 us per loop\n&gt;&gt;&gt; %timeit [i for (i, v) in zip(list_a, fil) if v]  #winner\n100000 loops, best of 3: 1.98 us per loop\n\n&gt;&gt;&gt; list_a = [1, 2, 4, 6]*100\n&gt;&gt;&gt; fil = [True, False, True, False]*100\n&gt;&gt;&gt; %timeit list(compress(list_a, fil))              #winner\n10000 loops, best of 3: 24.3 us per loop\n&gt;&gt;&gt; %timeit [i for (i, v) in zip(list_a, fil) if v]\n10000 loops, best of 3: 82 us per loop\n\n&gt;&gt;&gt; list_a = [1, 2, 4, 6]*10000\n&gt;&gt;&gt; fil = [True, False, True, False]*10000\n&gt;&gt;&gt; %timeit list(compress(list_a, fil))              #winner\n1000 loops, best of 3: 1.66 ms per loop\n&gt;&gt;&gt; %timeit [i for (i, v) in zip(list_a, fil) if v] \n100 loops, best of 3: 7.65 ms per loop\nfilter"}, {"idx": "webquery-test-2", "doc": "Multiple ModelAdmins/views for same model in Django admin", "code": "class PostAdmin(admin.ModelAdmin):\n    list_display = ('title', 'pubdate','user')\n\nclass MyPost(Post):\n    class Meta:\n        proxy = True\n\nclass MyPostAdmin(PostAdmin):\n    def get_queryset(self, request):\n        return self.model.objects.filter(user = request.user)\n\n\nadmin.site.register(Post, PostAdmin)\nadmin.site.register(MyPost, MyPostAdmin)\nPostAdminPostAdminPostAdmindef create_modeladmin(modeladmin, model, name = None):\n    class  Meta:\n        proxy = True\n        app_label = model._meta.app_label\n\n    attrs = {'__module__': '', 'Meta': Meta}\n\n    newmodel = type(name, (model,), attrs)\n\n    admin.site.register(newmodel, modeladmin)\n    return modeladmin\nclass MyPostAdmin(PostAdmin):\n    def get_queryset(self, request):\n        return self.model.objects.filter(user = request.user)\n\ncreate_modeladmin(MyPostAdmin, name='my-posts', model=Post)\n"}, {"idx": "webquery-test-3", "doc": "What does model.eval() do in pytorch?", "code": "model.eval()model.eval()model.eval()model.eval()# evaluate model:\nmodel.eval()\n\nwith torch.no_grad():\n    ...\n    out_data = model(data)\n    ...\ntraining# training step\n...\nmodel.train()\n...\n"}, {"idx": "webquery-test-4", "doc": "Excluding directories in os.walk", "code": "dirsdirs# exclude = set(['New folder', 'Windows', 'Desktop'])\nfor root, dirs, files in os.walk(top, topdown=True):\n    dirs[:] = [d for d in dirs if d not in exclude]\n"}, {"idx": "webquery-test-5", "doc": "How to get item's position in a list?", "code": " [i for i,x in enumerate(testlist) if x == 1]\n&gt;&gt;&gt; testlist\n[1, 2, 3, 5, 3, 1, 2, 1, 6]\n&gt;&gt;&gt; [i for i,x in enumerate(testlist) if x == 1]\n[0, 5, 7]\n&gt;&gt;&gt; for i in [i for i,x in enumerate(testlist) if x == 1]:\n...     print i\n... \n0\n5\n7\n&gt;&gt;&gt; (i for i,x in enumerate(testlist) if x == 1)\n&lt;generator object at 0x6b508&gt;\n&gt;&gt;&gt; for i in (i for i,x in enumerate(testlist) if x == 1):\n...     print i\n... \n0\n5\n7\n&gt;&gt;&gt; gen = (i for i,x in enumerate(testlist) if x == 1)\n&gt;&gt;&gt; for i in gen: print i\n... \n0\n5\n7\n"}, {"idx": "webquery-test-6", "doc": "Get list of all routes defined in the Flask app", "code": "app.url_mapapp.url_mapapp.url_mapapp.url_mapfrom flask import Flask, url_for\n\napp = Flask(__name__)\n\ndef has_no_empty_params(rule):\n    defaults = rule.defaults if rule.defaults is not None else ()\n    arguments = rule.arguments if rule.arguments is not None else ()\n    return len(defaults) &gt;= len(arguments)\n\n\n@app.route(\"/site-map\")\ndef site_map():\n    links = []\n    for rule in app.url_map.iter_rules():\n        # Filter out rules we can't navigate to in a browser\n        # and rules that require parameters\n        if \"GET\" in rule.methods and has_no_empty_params(rule):\n            url = url_for(rule.endpoint, **(rule.defaults or {}))\n            links.append((url, rule.endpoint))\n    # links is now a list of url, endpoint tuples\n"}, {"idx": "webquery-test-7", "doc": "Speed up millions of regex replacements in Python 3", "code": "['foobar', 'foobah', 'fooxar', 'foozap', 'fooza']\n{\n    'f': {\n        'o': {\n            'o': {\n                'x': {\n                    'a': {\n                        'r': {\n                            '': 1\n                        }\n                    }\n                },\n                'b': {\n                    'a': {\n                        'r': {\n                            '': 1\n                        },\n                        'h': {\n                            '': 1\n                        }\n                    }\n                },\n                'z': {\n                    'a': {\n                        '': 1,\n                        'p': {\n                            '': 1\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nr\"\\bfoo(?:ba[hr]|xar|zap?)\\b\"\nzoo(?:)foobar|bazfoobar|bazfoobar|bazfoobar|bazfoobar|baztrie.pyimport re\n\n\nclass Trie():\n    \"\"\"Regex::Trie in Python. Creates a Trie out of a list of words. The trie can be exported to a Regex pattern.\n    The corresponding Regex should match much faster than a simple Regex union.\"\"\"\n\n    def __init__(self):\n        self.data = {}\n\n    def add(self, word):\n        ref = self.data\n        for char in word:\n            ref[char] = char in ref and ref[char] or {}\n            ref = ref[char]\n        ref[''] = 1\n\n    def dump(self):\n        return self.data\n\n    def quote(self, char):\n        return re.escape(char)\n\n    def _pattern(self, pData):\n        data = pData\n        if \"\" in data and len(data.keys()) == 1:\n            return None\n\n        alt = []\n        cc = []\n        q = 0\n        for char in sorted(data.keys()):\n            if isinstance(data[char], dict):\n                try:\n                    recurse = self._pattern(data[char])\n                    alt.append(self.quote(char) + recurse)\n                except:\n                    cc.append(self.quote(char))\n            else:\n                q = 1\n        cconly = not len(alt) &gt; 0\n\n        if len(cc) &gt; 0:\n            if len(cc) == 1:\n                alt.append(cc[0])\n            else:\n                alt.append('[' + ''.join(cc) + ']')\n\n        if len(alt) == 1:\n            result = alt[0]\n        else:\n            result = \"(?:\" + \"|\".join(alt) + \")\"\n\n        if q:\n            if cconly:\n                result += \"?\"\n            else:\n                result = \"(?:%s)?\" % result\n        return result\n\n    def pattern(self):\n        return self._pattern(self.dump())\n# Encoding: utf-8\nimport re\nimport timeit\nimport random\nfrom trie import Trie\n\nwith open('/usr/share/dict/american-english') as wordbook:\n    banned_words = [word.strip().lower() for word in wordbook]\n    random.shuffle(banned_words)\n\ntest_words = [\n    (\"Surely not a word\", \"#surely_N\u00f6T\u00e4WORD_so_regex_engine_can_return_fast\"),\n    (\"First word\", banned_words[0]),\n    (\"Last word\", banned_words[-1]),\n    (\"Almost a word\", \"couldbeaword\")\n]\n\ndef trie_regex_from_words(words):\n    trie = Trie()\n    for word in words:\n        trie.add(word)\n    return re.compile(r\"\\b\" + trie.pattern() + r\"\\b\", re.IGNORECASE)\n\ndef find(word):\n    def fun():\n        return union.match(word)\n    return fun\n\nfor exp in range(1, 6):\n    print(\"\\nTrieRegex of %d words\" % 10**exp)\n    union = trie_regex_from_words(banned_words[:10**exp])\n    for description, test_word in test_words:\n        time = timeit.timeit(find(test_word), number=1000) * 1000\n        print(\"  %s : %.1fms\" % (description, time))\nTrieRegex of 10 words\n  Surely not a word : 0.3ms\n  First word : 0.4ms\n  Last word : 0.5ms\n  Almost a word : 0.5ms\n\nTrieRegex of 100 words\n  Surely not a word : 0.3ms\n  First word : 0.5ms\n  Last word : 0.9ms\n  Almost a word : 0.6ms\n\nTrieRegex of 1000 words\n  Surely not a word : 0.3ms\n  First word : 0.7ms\n  Last word : 0.9ms\n  Almost a word : 1.1ms\n\nTrieRegex of 10000 words\n  Surely not a word : 0.1ms\n  First word : 1.0ms\n  Last word : 1.2ms\n  Almost a word : 1.2ms\n\nTrieRegex of 100000 words\n  Surely not a word : 0.3ms\n  First word : 1.2ms\n  Last word : 0.9ms\n  Almost a word : 1.6ms\ntwopi"}, {"idx": "webquery-test-8", "doc": "What does \"sys.argv[1]\" mean?", "code": "sys.argvlenfrom __future__ import print_function\nimport sys\nprint(sys.argv, len(sys.argv))\nprint_args.py&gt; python print_args.py\n['print_args.py'] 1\n\n&gt; python print_args.py foo and bar\n['print_args.py', 'foo', 'and', 'bar'] 4\n\n&gt; python print_args.py \"foo and bar\"\n['print_args.py', 'foo and bar'] 2\n\n&gt; python print_args.py \"foo and bar\" and baz\n['print_args.py', 'foo and bar', 'and', 'baz'] 4\nsys.executablescript_name = sys.argv[0] # this will always work.\nfilename = sys.argv[1]\nuser_args = sys.argv[1:] # get everything after the script name\nuser_args = sys.argv[1:]\nfun, games = user_args # len(user_args) had better be 2\nsys.argv[1]sys.argv[1]"}, {"idx": "webquery-test-9", "doc": "Convert unix time to readable date in pandas dataframe", "code": "In [20]: df = DataFrame(data['values'])\n\nIn [21]: df.columns = [\"date\",\"price\"]\n\nIn [22]: df\nOut[22]: \n&lt;class 'pandas.core.frame.DataFrame'&gt;\nInt64Index: 358 entries, 0 to 357\nData columns (total 2 columns):\ndate     358  non-null values\nprice    358  non-null values\ndtypes: float64(1), int64(1)\n\nIn [23]: df.head()\nOut[23]: \n         date  price\n0  1349720105  12.08\n1  1349806505  12.35\n2  1349892905  12.15\n3  1349979305  12.19\n4  1350065705  12.15\nIn [25]: df['date'] = pd.to_datetime(df['date'],unit='s')\n\nIn [26]: df.head()\nOut[26]: \n                 date  price\n0 2012-10-08 18:15:05  12.08\n1 2012-10-09 18:15:05  12.35\n2 2012-10-10 18:15:05  12.15\n3 2012-10-11 18:15:05  12.19\n4 2012-10-12 18:15:05  12.15\n\nIn [27]: df.dtypes\nOut[27]: \ndate     datetime64[ns]\nprice           float64\ndtype: object\n"}, {"idx": "webquery-test-10", "doc": "Conditional Replace Pandas", "code": ".ix.ix.ix.ixmask = df.my_channel &gt; 20000\ncolumn_name = 'my_channel'\ndf.loc[mask, column_name] = 0\ndf.loc[df.my_channel &gt; 20000, 'my_channel'] = 0\nmaskmaskmaskmaskmaskmaskloclocloc"}, {"idx": "webquery-test-11", "doc": "Non-alphanumeric list order from os.listdir()", "code": "sortedsorted(os.listdir(whatever_directory))\n.sortlst = os.listdir(whatever_directory)\nlst.sort()\nos.listdir"}, {"idx": "webquery-test-12", "doc": "What is Truthy and Falsy? How is it different from True and False?", "code": "boolboolboolboolboolNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNoneNone"}, {"idx": "webquery-test-13", "doc": "numpy.where() detailed, step-by-step explanation / examples", "code": "np.where&gt;&gt;&gt; a = np.arange(5,10)\n&gt;&gt;&gt; np.where(a &lt; 8)       # tell me where in a, entries are &lt; 8\n(array([0, 1, 2]),)       # answer: entries indexed by 0, 1, 2\n&gt;&gt;&gt; a[np.where(a &lt; 8)] \narray([5, 6, 7])          # selects from a entries 0, 1, 2\naa&gt;&gt;&gt; a = np.arange(4,10).reshape(2,3)\narray([[4, 5, 6],\n       [7, 8, 9]])\n&gt;&gt;&gt; np.where(a &gt; 8)\n(array(1), array(2))\nnp.where()&gt;&gt;&gt; a[np.where(a &gt; 8)] # selects from a entries 0, 1, 2\naa"}, {"idx": "webquery-test-14", "doc": "Let JSON object accept bytes or let urlopen output strings", "code": "import codecs\n\nreader = codecs.getreader(\"utf-8\")\nobj = json.load(reader(response))\n"}, {"idx": "webquery-test-15", "doc": "Removing index column in pandas when reading a csv", "code": "index=Falseindex=False df.to_csv(filename, index=False)\ndf.read_csv(filename, index_col=False)  \n"}, {"idx": "webquery-test-1", "doc": "How do I create a dictionary with keys from a list and values defaulting to (say) zero?", "code": "dict((el,0) for el in a){el:0 for el in a}"}, {"idx": "webquery-test-2", "doc": "Conditional import of modules in Python", "code": "try:\n    import json\nexcept ImportError:\n    import simplejson as json\n"}, {"idx": "webquery-test-3", "doc": "Can I install Python 3.x and 2.x on the same Windows computer?", "code": "py.exepy.exepy.exepy.exepy.exepy.exepy -3 mypy2script.py#!C:\\Python33\\python.exe#!C:\\Python33\\python.exe#!C:\\Python33\\python.exe#! notepad.exe"}, {"idx": "webquery-test-4", "doc": "Why do you need to create a cursor when querying a sqlite database?", "code": "cursorcursorcursorcursor"}, {"idx": "webquery-test-5", "doc": "Why Python 3.6.1 throws AttributeError: module 'enum' has no attribute 'IntFlag'?", "code": "enumenumenumenum.__file__import enum\nprint(enum.__file__)  \n# standard library location should be something like \n# /usr/local/lib/python3.6/enum.py\npip uninstall -y enum34\nenum-compatenum-compat"}, {"idx": "webquery-test-6", "doc": "Failed loading english.pickle with nltk.data.load", "code": "&gt;&gt;&gt; import nltk\n&gt;&gt;&gt; nltk.download()\n"}, {"idx": "webquery-test-7", "doc": "ValueError: numpy.ndarray size changed, may indicate binary incompatibility. Expected 88 from C header, got 80 from PyObject", "code": "pip install --upgrade numpy\npip uninstall numpy\npip install numpy\n"}, {"idx": "webquery-test-8", "doc": "Python set to list", "code": "&gt;&gt;&gt; a = set([\"Blah\", \"Hello\"])\n&gt;&gt;&gt; a = list(a) # You probably wrote a = list(a()) here or list = set() above\n&gt;&gt;&gt; a\n['Blah', 'Hello']\nlist&gt;&gt;&gt; assert list == __builtins__.list\n"}, {"idx": "webquery-test-9", "doc": "Index all *except* one item in python", "code": "bba = range(10)[::-1]                       # [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\nb = [x for i,x in enumerate(a) if i!=3]   # [9, 8, 7, 5, 4, 3, 2, 1, 0]\n[][][]popa = range(10)[::-1]     # a = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\na.pop(3)                # a = [9, 8, 7, 5, 4, 3, 2, 1, 0]\na = np.arange(9, -1, -1)     # a = array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\nb = a[np.arange(len(a))!=3]  # b = array([9, 8, 7, 5, 4, 3, 2, 1, 0])\n"}, {"idx": "webquery-test-10", "doc": "Importing class from another file", "code": "from folder.file import Klasa\nfrom folder import filefrom folder import file\nk = file.Klasa()\nimport folder.file as myModule\nk = myModule.Klasa()\n"}, {"idx": "webquery-test-11", "doc": "Saving and loading objects and using pickle", "code": " Traceback (most recent call last):\n File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n File \"C:\\Python31\\lib\\pickle.py\", line\n 1365, in load encoding=encoding,\n errors=errors).load() EOFError\nfile.seek(0)\nIn [1]: import _pickle as cPickle\n\nIn [2]: d = {\"a\": 1, \"b\": 2}\n\nIn [4]: with open(r\"someobject.pickle\", \"wb\") as output_file:\n   ...:     cPickle.dump(d, output_file)\n   ...:\n\n# pickle_file will be closed at this point, preventing your from accessing it any further\n\nIn [5]: with open(r\"someobject.pickle\", \"rb\") as input_file:\n   ...:     e = cPickle.load(input_file)\n   ...:\n\nIn [7]: print e\n------&gt; print(e)\n{'a': 1, 'b': 2}\n"}, {"idx": "webquery-test-12", "doc": "Proper way to create dynamic workflows in Airflow", "code": "def values_function():\n     return values\ndef group(number, **kwargs):\n        #load the values if needed in the command you plan to execute\n        dyn_value = \"{{ task_instance.xcom_pull(task_ids='push_func') }}\"\n        return BashOperator(\n                task_id='JOB_NAME_{}'.format(number),\n                bash_command='script.sh {} {}'.format(dyn_value, number),\n                dag=dag)\npush_func = PythonOperator(\n        task_id='push_func',\n        provide_context=True,\n        python_callable=values_function,\n        dag=dag)\n\ncomplete = DummyOperator(\n        task_id='All_jobs_completed',\n        dag=dag)\n\nfor i in values_function():\n        push_func &gt;&gt; group(i) &gt;&gt; complete\n"}, {"idx": "webquery-test-13", "doc": "Disable a method in a ViewSet, django-rest-framework", "code": "ModelViewSetclass ModelViewSet(mixins.CreateModelMixin, \n                   mixins.RetrieveModelMixin, \n                   mixins.UpdateModelMixin,\n                   mixins.DestroyModelMixin,\n                   mixins.ListModelMixin,\n                   GenericViewSet)\nModelViewSetfrom rest_framework import viewsets, mixins\n\nclass SampleViewSet(mixins.RetrieveModelMixin,\n                    mixins.UpdateModelMixin,\n                    mixins.DestroyModelMixin,\n                    viewsets.GenericViewSet):\n    ...\n"}, {"idx": "webquery-test-14", "doc": "How to validate IP address in Python?", "code": "import socket\n\ntry:\n    socket.inet_aton(addr)\n    # legal\nexcept socket.error:\n    # Not legal\n"}, {"idx": "webquery-test-15", "doc": "Select 50 items from list at random", "code": "import random\nrandom.sample(the_list, 50)\nrandom.samplesample(self, population, k) method of random.Random instance\n    Chooses k unique random elements from a population sequence.\n    \n    Returns a new list containing elements from the population while\n    leaving the original population unchanged.  The resulting list is\n    in selection order so that all sub-slices will also be valid random\n    samples.  This allows raffle winners (the sample) to be partitioned\n    into grand prize and second place winners (the subslices).\n    \n    Members of the population need not be hashable or unique.  If the\n    population contains repeats, then each occurrence is a possible\n    selection in the sample.\n    \n    To choose a sample in a range of integers, use xrange as an argument.\n    This is especially fast and space efficient for sampling from a\n    large population:   sample(xrange(10000000), 60)\n"}, {"idx": "webquery-test-16", "doc": "How to clear variables in ipython?", "code": "%reset"}, {"idx": "webquery-test-1", "doc": "how to check the dtype of a column in python pandas", "code": "dtypefor y in agg.columns:\n    if(agg[y].dtype == np.float64 or agg[y].dtype == np.int64):\n          treat_numeric(agg[y])\n    else:\n          treat_str(agg[y])\n"}, {"idx": "webquery-test-2", "doc": "Pretty-Print JSON Data to a File using Python", "code": "indentheader, output = client.request(twitterRequest, method=\"GET\", body=None,\n                            headers=None, force_auth_header=True)\n\n# now write output to a file\ntwitterDataFile = open(\"twitterData.json\", \"w\")\n# magic happens here to make it pretty-printed\ntwitterDataFile.write(simplejson.dumps(simplejson.loads(output), indent=4, sort_keys=True))\ntwitterDataFile.close()\n"}, {"idx": "webquery-test-3", "doc": "Python: Convert timedelta to int in a dataframe", "code": "pandas.Series.dtpandas.Series.dttimedelta_series.dt.days\nsecondsseconds"}, {"idx": "webquery-test-4", "doc": "How to read and write INI file with Python3?", "code": "import configparser\n\nconfig = configparser.ConfigParser()\nconfig.read('FILE.INI')\nprint(config['DEFAULT']['path'])     # -&gt; \"/path/name/\"\nconfig['DEFAULT']['path'] = '/var/shared/'    # update\nconfig['DEFAULT']['default_message'] = 'Hey! help me!!'   # create\n\nwith open('FILE.INI', 'w') as configfile:    # save\n    config.write(configfile)\n"}, {"idx": "webquery-test-5", "doc": "Python Git Module experiences?", "code": "import git\nrepo = git.Repo( '/home/me/repodir' )\nprint repo.git.status()\n# checkout and track a remote branch\nprint repo.git.checkout( 'origin/somebranch', b='somebranch' )\n# add a file\nprint repo.git.add( 'somefile' )\n# commit\nprint repo.git.commit( m='my commit message' )\n# now we are one commit ahead\nprint repo.git.status()\nimport sh\ngit = sh.git.bake(_cwd='/home/me/repodir')\nprint git.status()\n# checkout and track a remote branch\nprint git.checkout('-b', 'somebranch')\n# add a file\nprint git.add('somefile')\n# commit\nprint git.commit(m='my commit message')\n# now we are one commit ahead\nprint git.status()\n"}, {"idx": "webquery-test-6", "doc": "What are dictionary view objects?", "code": "&gt;&gt;&gt; dishes = {'eggs': 2, 'sausage': 1, 'bacon': 1, 'spam': 500}\n&gt;&gt;&gt; keys = dishes.keys()\n&gt;&gt;&gt; values = dishes.values()\n\n&gt;&gt;&gt; # view objects are dynamic and reflect dict changes\n&gt;&gt;&gt; del dishes['eggs']\n&gt;&gt;&gt; keys  # No eggs anymore!\ndict_keys(['sausage', 'bacon', 'spam'])\n\n&gt;&gt;&gt; values  # No eggs value (2) anymore!\ndict_values([1, 1, 500])\ndishes.viewkeys()dishes.viewkeys()"}, {"idx": "webquery-test-7", "doc": "How does Python 2 compare string and int? Why do lists compare as greater than numbers, and tuples greater than lists?", "code": "&gt;&gt;&gt; 5 &lt; 'foo'\nTrue\n&gt;&gt;&gt; 5 &lt; (1, 2)\nTrue\n&gt;&gt;&gt; 5 &lt; {}\nTrue\n&gt;&gt;&gt; 5 &lt; [1, 2]\nTrue\n&gt;&gt;&gt; [1, 2] &gt; 'foo'   # 'list' &lt; 'str' \nFalse\n&gt;&gt;&gt; (1, 2) &gt; 'foo'   # 'tuple' &gt; 'str'\nTrue\n\n&gt;&gt;&gt; class Foo(object): pass\n&gt;&gt;&gt; class Bar(object): pass\n&gt;&gt;&gt; Bar() &lt; Foo()\nTrue\n&gt;&gt;&gt; class Foo: pass           # old-style\n&gt;&gt;&gt; class Bar(object): pass   # new-style\n&gt;&gt;&gt; Bar() &lt; Foo()\nFalse\n&gt;&gt;&gt; '10' &gt; 5\nTraceback (most recent call last):\n  File \"&lt;pyshell#0&gt;\", line 1, in &lt;module&gt;\n    '10' &gt; 5\nTypeError: unorderable types: str() &gt; int()\n"}, {"idx": "webquery-test-8", "doc": "Find an element in a list of tuples", "code": "[item for item in a if item[0] == 1]\n[item for item in a if 1 in item]\n"}, {"idx": "webquery-test-9", "doc": "How to save and load cookies using Python + Selenium WebDriver", "code": "import pickle\nimport selenium.webdriver\n\ndriver = selenium.webdriver.Firefox()\ndriver.get(\"http://www.google.com\")\npickle.dump( driver.get_cookies() , open(\"cookies.pkl\",\"wb\"))\nimport pickle\nimport selenium.webdriver\n\ndriver = selenium.webdriver.Firefox()\ndriver.get(\"http://www.google.com\")\ncookies = pickle.load(open(\"cookies.pkl\", \"rb\"))\nfor cookie in cookies:\n    driver.add_cookie(cookie)\n"}, {"idx": "webquery-test-10", "doc": "How to specify credentials when connecting to boto3 S3?", "code": "import boto3\nsession = boto3.Session(\n    aws_access_key_id=settings.AWS_SERVER_PUBLIC_KEY,\n    aws_secret_access_key=settings.AWS_SERVER_SECRET_KEY,\n)\ns3 = session.resource('s3')\n"}, {"idx": "webquery-test-11", "doc": "how to return index of a sorted list?", "code": "key&gt;&gt;&gt; s = [2, 3, 1, 4, 5, 3]\n&gt;&gt;&gt; sorted(range(len(s)), key=lambda k: s[k])\n[2, 0, 1, 5, 3, 4]\n&gt;&gt;&gt; \n"}, {"idx": "webquery-test-12", "doc": "Print very long string completely in pandas dataframe", "code": "options.display.max_colwidthIn [2]: df\nOut[2]:\n                                                 one\n0                                                one\n1                                                two\n2  This is very long string very long string very...\n\nIn [3]: pd.options.display.max_colwidth\nOut[3]: 50\n\nIn [4]: pd.options.display.max_colwidth = 100\n\nIn [5]: df\nOut[5]:\n                                                                               one\n0                                                                              one\n1                                                                              two\n2  This is very long string very long string very long string veryvery long string\ndf.iloc[2]In [7]: df.iloc[2,0]    # or df.loc[2,'one']\nOut[7]: 'This is very long string very long string very long string veryvery long string'\n"}, {"idx": "webquery-test-13", "doc": "Difference between dict.clear() and assigning {} in Python", "code": "&gt;&gt;&gt; d = {\"stuff\": \"things\"}\n&gt;&gt;&gt; d2 = d\n&gt;&gt;&gt; d = {}\n&gt;&gt;&gt; d2\n{'stuff': 'things'}\n&gt;&gt;&gt; d = {\"stuff\": \"things\"}\n&gt;&gt;&gt; d2 = d\n&gt;&gt;&gt; d.clear()\n&gt;&gt;&gt; d2\n{}\nd = {}d = {}d = {}d = {}d = {}d = {}"}, {"idx": "webquery-test-14", "doc": "Matplotlib: draw grid lines behind other graph elements", "code": "Axis.set_axisbelow(True)"}, {"idx": "webquery-test-15", "doc": "How do I disable a test using pytest?", "code": "skipskip@pytest.mark.skip(reason=\"no way of currently testing this\")\ndef test_the_unknown():\n    ...\n\nimport sys\n@pytest.mark.skipif(sys.version_info &lt; (3,3),\n                    reason=\"requires python3.3\")\ndef test_function():\n    ...\nimport sys\ntry:\n    import pandas as pd\nexcept ImportError:\n    pass\n\n@pytest.mark.skipif('pandas' not in sys.modules,\n                    reason=\"requires the Pandas library\")\ndef test_pandas_function():\n    ...\n"}, {"idx": "webquery-test-16", "doc": "Re-raise exception with a different type and message, preserving existing information", "code": "try:\n    frobnicate()\nexcept KeyError as exc:\n    raise ValueError(\"Bad grape\") from exc\nexc__cause__"}, {"idx": "webquery-test-17", "doc": "High performance fuzzy string comparison in Python, use Levenshtein or difflib", "code": "import codecs, difflib, Levenshtein, distance\n\nwith codecs.open(\"titles.tsv\",\"r\",\"utf-8\") as f:\n    title_list = f.read().split(\"\\n\")[:-1]\n\n    for row in title_list:\n\n        sr      = row.lower().split(\"\\t\")\n\n        diffl   = difflib.SequenceMatcher(None, sr[3], sr[4]).ratio()\n        lev     = Levenshtein.ratio(sr[3], sr[4]) \n        sor     = 1 - distance.sorensen(sr[3], sr[4])\n        jac     = 1 - distance.jaccard(sr[3], sr[4])\n\n        print diffl, lev, sor, jac\nlibrary(ggplot2)\nrequire(GGally)\n\ndifflib &lt;- read.table(\"similarity_measures.txt\", sep = \" \")\ncolnames(difflib) &lt;- c(\"difflib\", \"levenshtein\", \"sorensen\", \"jaccard\")\n\nggpairs(difflib)\n"}, {"idx": "webquery-test-18", "doc": "How do I include related model fields using Django Rest Framework?", "code": "class ClassroomSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Classroom\n        depth = 1\nclass TeacherSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Teacher\n        fields = ('id', 'name', 'tenure')\n\nclass ClassroomSerializer(serializers.ModelSerializer):\n    teachers = TeacherSerializer(source='teacher_set')\n\n    class Meta:\n        model = Classroom\nsourcesourcesourcesource"}, {"idx": "webquery-test-1", "doc": "How do I get monitor resolution in Python?", "code": "pip install screeninfo\nfrom screeninfo import get_monitors\nfor m in get_monitors():\n    print(str(m))\nMonitor(x=3840, y=0, width=3840, height=2160, width_mm=1420, height_mm=800, name='HDMI-0', is_primary=False)\nMonitor(x=0, y=0, width=3840, height=2160, width_mm=708, height_mm=399, name='DP-0', is_primary=True)\n"}, {"idx": "webquery-test-2", "doc": "How to write a file or data to an S3 object using boto3", "code": "import boto3\n\nsome_binary_data = b'Here we have some data'\nmore_binary_data = b'Here we have some more data'\n\n# Method 1: Object.put()\ns3 = boto3.resource('s3')\nobject = s3.Object('my_bucket_name', 'my/key/including/filename.txt')\nobject.put(Body=some_binary_data)\n\n# Method 2: Client.put_object()\nclient = boto3.client('s3')\nclient.put_object(Body=more_binary_data, Bucket='my_bucket_name', Key='my/key/including/anotherfilename.txt')\n# Boto 2.x\nfrom boto.s3.key import Key\nkey = Key('hello.txt')\nkey.set_contents_from_file('/tmp/hello.txt')\n\n# Boto 3\ns3.Object('mybucket', 'hello.txt').put(Body=open('/tmp/hello.txt', 'rb'))\n"}, {"idx": "webquery-test-3", "doc": "Compute a confidence interval from sample data", "code": "import numpy as np\nimport scipy.stats\n\ndef mean_confidence_interval(data, confidence=0.95):\n    a = 1.0 * np.array(data)\n    n = len(a)\n    m, se = np.mean(a), scipy.stats.sem(a)\n    h = se * scipy.stats.t.ppf((1 + confidence) / 2., n-1)\n    return m, m-h, m+h\n"}, {"idx": "webquery-test-4", "doc": "Python xml ElementTree from a string source?", "code": "import xml.etree.ElementTree as ET\ntree = ET.ElementTree(ET.fromstring(xmlstring))\nparse()parse()"}, {"idx": "webquery-test-5", "doc": "Convert int to ASCII and back in Python", "code": "ord('a')\n97str(unichr(97))str(unichr(97))'a'"}, {"idx": "webquery-test-6", "doc": "ImportError: No Module Named bs4 (BeautifulSoup)", "code": "$ pip install BeautifulSoup4\nbs4bs4bs4"}, {"idx": "webquery-test-7", "doc": "What is the most efficient way to store a list in the Django models?", "code": "listfrom django.db import models\n\nclass SeparatedValuesField(models.TextField):\n    __metaclass__ = models.SubfieldBase\n\n    def __init__(self, *args, **kwargs):\n        self.token = kwargs.pop('token', ',')\n        super(SeparatedValuesField, self).__init__(*args, **kwargs)\n\n    def to_python(self, value):\n        if not value: return\n        if isinstance(value, list):\n            return value\n        return value.split(self.token)\n\n    def get_db_prep_value(self, value):\n        if not value: return\n        assert(isinstance(value, list) or isinstance(value, tuple))\n        return self.token.join([unicode(s) for s in value])\n\n    def value_to_string(self, obj):\n        value = self._get_val_from_obj(obj)\n        return self.get_db_prep_value(value)\nfrom django.db import models\nfrom custom.fields import SeparatedValuesField \n\nclass Person(models.Model):\n    name = models.CharField(max_length=64)\n    friends = SeparatedValuesField()\n"}, {"idx": "webquery-test-8", "doc": "Check if value already exists within list of dictionaries?", "code": "if not any(d['main_color'] == 'red' for d in a):\n    # does not exist\nTrueTrueKeyErrorKeyErrorKeyErrorif not any(d.get('main_color', default_value) == 'red' for d in a):\n    # does not exist\n"}, {"idx": "webquery-test-9", "doc": "When to use %r instead of %s in Python?", "code": "%s%s%s%srepr()&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; d = datetime.date.today()\n&gt;&gt;&gt; str(d)\n'2011-05-14'\n&gt;&gt;&gt; repr(d)\n'datetime.date(2011, 5, 14)'\nrepr()repr()"}, {"idx": "webquery-test-10", "doc": "Get Output From the logging Module in IPython Notebook", "code": "import logging\nlogger = logging.getLogger()\nlogger.setLevel(logging.DEBUG)\nlogging.debug(\"test\")\n"}, {"idx": "webquery-test-11", "doc": "Allowing specific values for an Argparse argument", "code": "choices...\nparser.add_argument('--val',\n                    choices=['a', 'b', 'c'],\n                    help='Special testing value')\n\nargs = parser.parse_args(sys.argv[1:])\n"}, {"idx": "webquery-test-12", "doc": "Peak-finding algorithm for Python/SciPy", "code": "scipy.signal.find_peaksscipy.signal.find_peaksscipy.signal.find_peaksscipy.signal.find_peaksscipy.signal.find_peakswidthwidthwidthwidthwidthwidthimport numpy as np\nimport matplotlib.pyplot as plt \nfrom scipy.signal import find_peaks\n\nx = np.sin(2*np.pi*(2**np.linspace(2,10,1000))*np.arange(1000)/48000) + np.random.normal(0, 1, 1000) * 0.15\npeaks, _ = find_peaks(x, distance=20)\npeaks2, _ = find_peaks(x, prominence=1)      # BEST!\npeaks3, _ = find_peaks(x, width=20)\npeaks4, _ = find_peaks(x, threshold=0.4)     # Required vertical distance to its direct neighbouring samples, pretty useless\nplt.subplot(2, 2, 1)\nplt.plot(peaks, x[peaks], \"xr\"); plt.plot(x); plt.legend(['distance'])\nplt.subplot(2, 2, 2)\nplt.plot(peaks2, x[peaks2], \"ob\"); plt.plot(x); plt.legend(['prominence'])\nplt.subplot(2, 2, 3)\nplt.plot(peaks3, x[peaks3], \"vg\"); plt.plot(x); plt.legend(['width'])\nplt.subplot(2, 2, 4)\nplt.plot(peaks4, x[peaks4], \"xk\"); plt.plot(x); plt.legend(['threshold'])\nplt.show()\n"}, {"idx": "webquery-test-13", "doc": "Python's \"in\" set operator", "code": "hash(b) == hash(x)"}, {"idx": "webquery-test-14", "doc": "What's the difference between globals(), locals(), and vars()?", "code": "globals()globals()globals()localslocalslocalslocalslocalslocalslocalsimport inspect\n\ndef f():\n    x = 1\n    l = locals()\n    print(l)\n    locals()\n    print(l)\n    x = 2\n    print(x, l['x'])\n    l['x'] = 3\n    print(x, l['x'])\n    inspect.currentframe().f_locals\n    print(x, l['x'])\n\nf()\n{'x': 1}\n{'x': 1, 'l': {...}}\n2 1\n2 3\n2 2\nprint(l)print(l)print(l)print(l)print(l)print(l)print(l)print(l)print(l)print(l)print(l)exec \"pass\"exec \"pass\"locals()class Test(object):\n    a = 'one'\n    b = 'two'\n    huh = locals()\n    c = 'three'\n    huh['d'] = 'four'\n    print huh\n{\n  'a': 'one',\n  'b': 'two',\n  'c': 'three',\n  'd': 'four',\n  'huh': {...},\n  '__module__': '__main__',\n}\nlocals()locals()locals()locals()locals()class Test(object):\n    a = 'one'\n    b = 'two'\n    def frobber(self):\n        print self.c\nt = Test()\nhuh = vars(t)\nhuh['c'] = 'three'\nt.frobber()\nthree\n__dict____dict__def f(outer):\n    if outer:\n        f(False)\n        print('Outer call locals:', locals())\n        print('f.__dict__:', f.__dict__)\n    else:\n        print('Inner call locals:', locals())\n        print('f.__dict__:', f.__dict__)\n\nf.x = 3\n\nf(True)\nInner call locals: {'outer': False}\nf.__dict__: {'x': 3}\nOuter call locals: {'outer': True}\nf.__dict__: {'x': 3}\nffff"}, {"idx": "webquery-test-15", "doc": "How can I share Jupyter notebooks with non-programmers?", "code": ".ipynb"}, {"idx": "webquery-test-16", "doc": "Python mysqldb: Library not loaded: libmysqlclient.18.dylib", "code": "/usr/local/mysql/lib\n/usr/lib\nsudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/lib/libmysqlclient.18.dylib\nls -l libmysqlclient.18.dylib \nlrwxr-xr-x  1 root  wheel  44 16 Jul 14:01 libmysqlclient.18.dylib -&gt; /usr/local/mysql/lib/libmysqlclient.18.dylib\n/usr/lib//usr/lib/sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/local/lib/libmysqlclient.18.dylib\n"}, {"idx": "webquery-test-17", "doc": "Flask-SQLalchemy update a row's information", "code": "db.session.commit()admin = User.query.filter_by(username='admin').first()\nadmin.email = 'my_new_email@example.com'\ndb.session.commit()\n\nuser = User.query.get(5)\nuser.name = 'New Name'\ndb.session.commit()\n"}, {"idx": "webquery-test-18", "doc": "Fail during installation of Pillow (Python module) in Linux", "code": "libjpeglibjpeglibjpeg8-devpip&gt;=1.4pip&gt;=1.4pip install --upgrade pip \npippippip install --upgrade pillow\nsudo apt-get install libtiff4-dev libjpeg8-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev tcl8.5-dev tk8.5-dev python-tk\nsudo apt-get install libtiff5-dev libjpeg8-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev python-tk\nsudo apt install libjpeg8-dev zlib1g-dev\nlibjpeg8-devlibjpeg8-devsudo yum install libtiff-devel libjpeg-devel libzip-devel freetype-devel lcms2-devel libwebp-devel tcl-devel tk-devel\nbrew install libjpeg zlib\nbrew link zlib --force\nsudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /\nzlibzlibbrew tap homebrew/dupes\nbrew install zlib\nzlibzlibxcode-select --install\n"}, {"idx": "webquery-test-1", "doc": "Python unit test with base and sub class", "code": "class BaseTestCases:\n\n    class BaseTest(unittest.TestCase):\n\n        def testCommon(self):\n            print('Calling BaseTest:testCommon')\n            value = 5\n            self.assertEqual(value, 5)\n\n\nclass SubTest1(BaseTestCases.BaseTest):\n\n    def testSub1(self):\n        print('Calling SubTest1:testSub1')\n        sub = 3\n        self.assertEqual(sub, 3)\n\n\nclass SubTest2(BaseTestCases.BaseTest):\n\n    def testSub2(self):\n        print('Calling SubTest2:testSub2')\n        sub = 4\n        self.assertEqual(sub, 4)\n\nif __name__ == '__main__':\n    unittest.main()\nCalling BaseTest:testCommon\n.Calling SubTest1:testSub1\n.Calling BaseTest:testCommon\n.Calling SubTest2:testSub2\n.\n----------------------------------------------------------------------\nRan 4 tests in 0.001s\n\nOK\n"}, {"idx": "webquery-test-2", "doc": "Display an image with Python", "code": "%pylab inline\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimg = mpimg.imread('your_image.png')\nimgplot = plt.imshow(img)\nplt.show()\n"}, {"idx": "webquery-test-3", "doc": "Django-DB-Migrations: cannot ALTER TABLE because it has pending trigger events", "code": "NOT NULLNOT NULL"}, {"idx": "webquery-test-4", "doc": "How can I see function arguments in IPython Notebook Server 3?", "code": "(((((((Shift-Tab"}, {"idx": "webquery-test-5", "doc": "Efficiently sorting a numpy array in descending order?", "code": "temp[::-1].sort()temp[::-1].sort()In [25]: temp = np.random.randint(1,10, 10)\n\nIn [26]: temp\nOut[26]: array([5, 2, 7, 4, 4, 2, 8, 6, 4, 4])\n\nIn [27]: id(temp)\nOut[27]: 139962713524944\n\nIn [28]: temp[::-1].sort()\n\nIn [29]: temp\nOut[29]: array([8, 7, 6, 5, 4, 4, 4, 4, 2, 2])\n\nIn [30]: id(temp)\nOut[30]: 139962713524944\n"}, {"idx": "webquery-test-6", "doc": "Python: Continuing to next iteration in outer loop", "code": "for ii in range(200):\n    for jj in range(200, 400):\n        ...block0...\n        if something:\n            break\n    else:\n        ...block1...\nBreak"}, {"idx": "webquery-test-7", "doc": "Pickle incompatibility of numpy arrays between Python 2 and 3", "code": "loadloadpickle.load(file, encoding='latin1')\n"}, {"idx": "webquery-test-8", "doc": "In Python, how does one catch warnings as if they were exceptions?", "code": "import warnings\nwarnings.filterwarnings(\"error\")\ntry:\n    some_heavy_calculations()\nexcept RuntimeWarning:\n    breakpoint()\nfilterwarnignsfilterwarnigns"}, {"idx": "webquery-test-9", "doc": "How to get the concrete class name as a string?", "code": " instance.__class__.__name__\n&gt;&gt;&gt; class A():\n    pass\n&gt;&gt;&gt; a = A()\n&gt;&gt;&gt; a.__class__.__name__\n'A'\n"}, {"idx": "webquery-test-10", "doc": "What are the differences between Conda and Anaconda?", "code": "conda install anaconda"}, {"idx": "webquery-test-11", "doc": "How to copy a 2D array into a 3rd dimension, N times?", "code": "np.repeata = np.array([[1, 2], [1, 2]])\nprint(a.shape)\n# (2,  2)\n\n# indexing with np.newaxis inserts a new 3rd dimension, which we then repeat the\n# array along, (you can achieve the same effect by indexing with None, see below)\nb = np.repeat(a[:, :, np.newaxis], 3, axis=2)\n\nprint(b.shape)\n# (2, 2, 3)\n\nprint(b[:, :, 0])\n# [[1 2]\n#  [1 2]]\n\nprint(b[:, :, 1])\n# [[1 2]\n#  [1 2]]\n\nprint(b[:, :, 2])\n# [[1 2]\n#  [1 2]]\n(3,)c = np.array([1, 2, 3])\naaaad = a[..., None] + c[None, None, :]\na[..., None]a[..., None]a[..., None]a[..., None]a[..., None]print(d.shape)\n# (2,  2, 3)\n\nprint(d[..., 0])    # a + c[0]\n# [[2 3]\n#  [2 3]]\n\nprint(d[..., 1])    # a + c[1]\n# [[3 4]\n#  [3 4]]\n\nprint(d[..., 2])    # a + c[2]\n# [[4 5]\n#  [4 5]]\nNoneNoneNoneNoneNonea = np.ones((6, 1, 4, 3, 1))  # 6 x 1 x 4 x 3 x 1\nb = np.ones((5, 1, 3, 2))     #     5 x 1 x 3 x 2\nresult = a + b                # 6 x 5 x 4 x 3 x 2\n"}, {"idx": "webquery-test-12", "doc": "Django dynamic model fields", "code": "eav.unregister(Encounter)\neav.register(Patient)\neav.unregister(Encounter)\neav.register(Patient)\neav.unregister(Encounter)\neav.register(Patient)\neav.unregister(Encounter)\neav.register(Patient)\neav.unregister(Encounter)\neav.register(Patient)\neav.unregister(Encounter)\neav.register(Patient)\neav.unregister(Encounter)\neav.register(Patient)\neav.unregister(Encounter)\neav.register(Patient)\neav.unregister(Encounter)\neav.register(Patient)\neav.unregister(Encounter)\neav.register(Patient)\neav.unregister(Encounter)\neav.register(Patient)\n"}, {"idx": "webquery-test-13", "doc": "Backporting Python 3 open(encoding=\"utf-8\") to Python 2", "code": "io.openio.openio.opencodecs.opencodecs.openopen()open(filename, 'rb')\n"}, {"idx": "webquery-test-14", "doc": "Subclass in type hinting", "code": "cls: Acls: Acls: Acls: Acls: Acls: Afrom typing import Type\ndef process_any_subclass_type_of_A(cls: Type[A]):\n    pass\nType[C]Type[C]Type[C]Type[C]Type[C]Type[C]Type[C]Type[C]Type[C]"}, {"idx": "webquery-test-15", "doc": "Purpose of __repr__ method?", "code": "__repr____repr____repr__&gt;&gt;&gt; class Point:\n...     def __init__(self, x, y):\n...             self.x, self.y = x, y\n...     def __repr__(self):\n...             cls = self.__class__.__name__\n...             return f'{cls}(x={self.x!r}, y={self.y!r})'\n&gt;&gt;&gt; p = Point(1, 2)\n&gt;&gt;&gt; p\nPoint(x=1, y=2)\n"}, {"idx": "webquery-test-16", "doc": "How to convert list of numpy arrays into single numpy array?", "code": "numpy.concatenate( LIST, axis=0 )\nstacknumpy.stack( LIST, axis=0 )\nnnvstackvstacknumpy.vstack( LIST )\nnumpy.r_[ array1, ...., arrayN ]numpy.r_[ array1, ...., arrayN ]column_stackcolumn_stackcolumn_stacknumpy.array( LIST )\n"}, {"idx": "webquery-test-17", "doc": "how to set \"camera position\" for 3d plots using python/matplotlib?", "code": "ax.view_initax.view_initax.view_init    from mpl_toolkits.mplot3d import Axes3D\n    ax = Axes3D(fig)\n    ax.scatter(xx,yy,zz, marker='o', s=20, c=\"goldenrod\", alpha=0.6)\n    for ii in xrange(0,360,1):\n        ax.view_init(elev=10., azim=ii)\n        savefig(\"movie%d.png\" % ii)\n"}, {"idx": "webquery-test-18", "doc": "NameError: name 'self' is not defined", "code": "selfNonedef p(self, b=None):\n    if b is None:\n        b = self.a\n    print b\n"}, {"idx": "webquery-test-19", "doc": "Django. Override save for model", "code": "class Model(model.Model):\n    _image=models.ImageField(upload_to='folder')\n    thumb=models.ImageField(upload_to='folder')\n    description=models.CharField()\n\n    def set_image(self, val):\n        self._image = val\n        self._image_changed = True\n\n        # Or put whole logic in here\n        small = rescale_image(self.image,width=100,height=100)\n        self.image_small=SimpleUploadedFile(name,small_pic)\n\n    def get_image(self):\n        return self._image\n\n    image = property(get_image, set_image)\n\n    # this is not needed if small_image is created at set_image\n    def save(self, *args, **kwargs):\n        if getattr(self, '_image_changed', True):\n            small=rescale_image(self.image,width=100,height=100)\n            self.image_small=SimpleUploadedFile(name,small_pic)\n        super(Model, self).save(*args, **kwargs)\n"}, {"idx": "webquery-test-20", "doc": "What are all possible pos tags of NLTK?", "code": "&amp; 'n and both but either et for less minus neither nor or plus so\ntherefore times v. versus vs. whether yet\nmid-1890 nine-thirty forty-two one-tenth ten million 0.5 one forty-\nseven 1987 twenty '79 zero two 78-degrees eighty-four IX '60s .025\nfifteen 271,124 dozen quintillion DM2,000 ...\nall an another any both del each either every half la many much nary\nneither no some such that the them these this those\nthere\nastride among upon whether out inside pro despite on by throughout\nbelow within for towards near behind atop around if like until below\nnext into if beside ...\nthird ill-mannered pre-war regrettable oiled calamitous first separable\nectoplasmic battery-powered participatory fourth still-to-be-named\nmultilingual multi-disciplinary ...\nbleaker braver breezier briefer brighter brisker broader bumper busier\ncalmer cheaper choosier cleaner clearer closer colder commoner costlier\ncozier creamier crunchier cuter ...\ncalmest cheapest choicest classiest cleanest clearest closest commonest\ncorniest costliest crassest creepiest crudest cutest darkest deadliest\ndearest deepest densest dinkiest ...\nA A. B B. C C. D E F First G H I J K One SP-44001 SP-44002 SP-44005\nSP-44007 Second Third Three Two * a b c d first five four one six three\ntwo\ncan cannot could couldn't dare may might must need ought shall should\nshouldn't will would\ncommon-carrier cabbage knuckle-duster Casino afghan shed thermostat\ninvestment slide humour falloff slick wind hyena override subhumanity\nmachinist ...\nMotown Venneboerger Czestochwa Ranzer Conchita Trumplane Christos\nOceanside Escobar Kreisler Sawyer Cougar Yvette Ervin ODI Darryl CTCA\nShannon A.K.C. Meltex Liverpool ...\nundergraduates scotches bric-a-brac products bodyguards facets coasts\ndivestitures storehouses designs clubs fragrances averages\nsubjectivists apprehensions muses factory-jobs ...\nall both half many quite such sure this\n' 's\nhers herself him himself hisself it itself me myself one oneself ours\nourselves ownself self she thee theirs them themselves they thou thy us\nher his mine my our ours their thy your\noccasionally unabatingly maddeningly adventurously professedly\nstirringly prominently technologically magisterially predominately\nswiftly fiscally pitilessly ...\nfurther gloomier grander graver greater grimmer harder harsher\nhealthier heavier higher however larger later leaner lengthier less-\nperfectly lesser lonelier longer louder lower more ...\nbest biggest bluntest earliest farthest first furthest hardest\nheartiest highest largest least less most nearest second tightest worst\naboard about across along apart around aside at away back before behind\nby crop down ever fast for forth from go high i.e. in into just later\nlow more off on open out over per pie raising start teeth that through\nunder unto up up-pp upon whole with you\nto\nGoodbye Goody Gosh Wow Jeepers Jee-sus Hubba Hey Kee-reist Oops amen\nhuh howdy uh dammit whammo shucks heck anyways whodunnit honey golly\nman baby diddle hush sonuvabitch ...\nask assemble assess assign assume atone attention avoid bake balkanize\nbank begin behold believe bend benefit bevel beware bless boil bomb\nboost brace break bring broil brush build ...\ndipped pleaded swiped regummed soaked tidied convened halted registered\ncushioned exacted snubbed strode aimed adopted belied figgered\nspeculated wore appreciated contemplated ...\ntelegraphing stirring focusing angering judging stalling lactating\nhankerin' alleging veering capping approaching traveling besieging\nencrypting interrupting erasing wincing ...\nmultihulled dilapidated aerosolized chaired languished panelized used\nexperimented flourished imitated reunifed factored condensed sheared\nunsettled primed dubbed desired ...\npredominate wrap resort sue twist spill cure lengthen brush terminate\nappear tend stray glisten obtain comprise detest tease attract\nemphasize mold postpone sever return wag ...\nbases reconstructs marks mixes displeases seals carps weaves snatches\nslumps stretches authorizes smolders pictures emerges stockpiles\nseduces fizzes uses bolsters slaps speaks pleads ...\nthat what whatever which whichever\nthat what whatever whatsoever which who whom whosoever\nhow however whence whenever where whereby whereever wherein whereof why\n"}, {"idx": "webquery-test-21", "doc": "Python speed testing - Time Difference - milliseconds", "code": "datetime.timedelta&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; a = datetime.datetime.now()\n&gt;&gt;&gt; b = datetime.datetime.now()\n&gt;&gt;&gt; c = b - a\n\n&gt;&gt;&gt; c\ndatetime.timedelta(0, 4, 316543)\n&gt;&gt;&gt; c.days\n0\n&gt;&gt;&gt; c.seconds\n4\n&gt;&gt;&gt; c.microseconds\n316543\nc.microsecondsc.microseconds&gt;&gt;&gt; c / 10\ndatetime.timedelta(0, 0, 431654)\n"}, {"idx": "webquery-test-22", "doc": "Making an API call in Python with an API that requires a bearer token", "code": "import requests\nendpoint = \".../api/ip\"\ndata = {\"ip\": \"1.1.2.3\"}\nheaders = {\"Authorization\": \"Bearer MYREALLYLONGTOKENIGOT\"}\n\nprint(requests.post(endpoint, data=data, headers=headers).json())\n"}, {"idx": "webquery-test-23", "doc": "Check if key exists and iterate the JSON array using Python", "code": "import json\n\njsonData = \"\"\"{\"from\": {\"id\": \"8\", \"name\": \"Mary Pinter\"}, \"message\": \"How ARE you?\", \"comments\": {\"count\": 0}, \"updated_time\": \"2012-05-01\", \"created_time\": \"2012-05-01\", \"to\": {\"data\": [{\"id\": \"1543\", \"name\": \"Honey Pinter\"}]}, \"type\": \"status\", \"id\": \"id_7\"}\"\"\"\n\ndef getTargetIds(jsonData):\n    data = json.loads(jsonData)\n    if 'to' not in data:\n        raise ValueError(\"No target in given data\")\n    if 'data' not in data['to']:\n        raise ValueError(\"No data for target\")\n\n    for dest in data['to']['data']:\n        if 'id' not in dest:\n            continue\n        targetId = dest['id']\n        print(\"to_id:\", targetId)\nIn [9]: getTargetIds(s)\nto_id: 1543\n"}, {"idx": "webquery-test-24", "doc": "Extract first item of each sublist", "code": "&gt;&gt;&gt; lst = [['a','b','c'], [1,2,3], ['x','y','z']]\n&gt;&gt;&gt; lst2 = [item[0] for item in lst]\n&gt;&gt;&gt; lst2\n['a', 1, 'x']\n"}, {"idx": "webquery-test-1", "doc": "How do I add a new column to a Spark DataFrame (using PySpark)?", "code": "DataFramefrom pyspark.sql.functions import lit\n\ndf = sqlContext.createDataFrame(\n    [(1, \"a\", 23.0), (3, \"B\", -23.0)], (\"x1\", \"x2\", \"x3\"))\n\ndf_with_x4 = df.withColumn(\"x4\", lit(0))\ndf_with_x4.show()\n\n## +---+---+-----+---+\n## | x1| x2|   x3| x4|\n## +---+---+-----+---+\n## |  1|  a| 23.0|  0|\n## |  3|  B|-23.0|  0|\n## +---+---+-----+---+\nfrom pyspark.sql.functions import exp\n\ndf_with_x5 = df_with_x4.withColumn(\"x5\", exp(\"x3\"))\ndf_with_x5.show()\n\n## +---+---+-----+---+--------------------+\n## | x1| x2|   x3| x4|                  x5|\n## +---+---+-----+---+--------------------+\n## |  1|  a| 23.0|  0| 9.744803446248903E9|\n## |  3|  B|-23.0|  0|1.026187963170189...|\n## +---+---+-----+---+--------------------+\njoinfrom pyspark.sql.functions import exp\n\nlookup = sqlContext.createDataFrame([(1, \"foo\"), (2, \"bar\")], (\"k\", \"v\"))\ndf_with_x6 = (df_with_x5\n    .join(lookup, col(\"x1\") == col(\"k\"), \"leftouter\")\n    .drop(\"k\")\n    .withColumnRenamed(\"v\", \"x6\"))\n\n## +---+---+-----+---+--------------------+----+\n## | x1| x2|   x3| x4|                  x5|  x6|\n## +---+---+-----+---+--------------------+----+\n## |  1|  a| 23.0|  0| 9.744803446248903E9| foo|\n## |  3|  B|-23.0|  0|1.026187963170189...|null|\n## +---+---+-----+---+--------------------+----+\nfrom pyspark.sql.functions import rand\n\ndf_with_x7 = df_with_x6.withColumn(\"x7\", rand())\ndf_with_x7.show()\n\n## +---+---+-----+---+--------------------+----+-------------------+\n## | x1| x2|   x3| x4|                  x5|  x6|                 x7|\n## +---+---+-----+---+--------------------+----+-------------------+\n## |  1|  a| 23.0|  0| 9.744803446248903E9| foo|0.41930610446846617|\n## |  3|  B|-23.0|  0|1.026187963170189...|null|0.37801881545497873|\n## +---+---+-----+---+--------------------+----+-------------------+\npyspark.sql.functionszipWithIndex"}, {"idx": "webquery-test-2", "doc": "How to convert a boolean array to an int array", "code": "astypeastype&gt;&gt;&gt; x\narray([ True, False,  True], dtype=bool)\n&gt;&gt;&gt; x + [1, 2, 3]\narray([2, 2, 4])\n"}, {"idx": "webquery-test-3", "doc": "String to Dictionary in Python", "code": "jsonjsonimport json    # or `import simplejson as json` if on Python &lt; 2.6\n\njson_string = u'{ \"id\":\"123456789\", ... }'\nobj = json.loads(json_string)    # obj now contains a dict of the data\n"}, {"idx": "webquery-test-4", "doc": "What is the purpose of Flask's context stacks?", "code": "from werkzeug.wsgi import DispatcherMiddleware\nfrom frontend_app import application as frontend\nfrom backend_app import application as backend\n\napplication = DispatcherMiddleware(frontend, {\n    '/backend':     backend\n})\nFlask(...)from flask import request\nrequestrequestrequestrequestrequestrequestrequest.pathrequest.pathfrom flask import url_for\nrequestrequestrequestapp = Flask(__name__)\ndb = SQLAlchemy() # Initialize the Flask-SQLAlchemy extension object\ndb.init_app(app)\nappappfrom myapp import app, db\n\n# Set up models\ndb.create_all()\nappappappwith app.app_context()from myapp import app, db\n\n# Set up models\nwith app.app_context():\n    db.create_all()\nappimport unittest\nfrom flask import request\n\nclass MyTest(unittest.TestCase):\n    def test_thing(self):\n        with app.test_request_context('/?next=http://example.com/') as ctx:\n            # You can now view attributes on request context stack by using `request`.\n\n        # Now the request context stack is empty\n"}, {"idx": "webquery-test-5", "doc": "Convert a 1D array to a 2D array in numpy", "code": "reshapeB = np.reshape(A, (-1, 2))\n-1"}, {"idx": "webquery-test-6", "doc": "How do I convert a Django QuerySet into list of dicts?", "code": ".values()&gt;&gt;&gt; Blog.objects.values()\n[{'id': 1, 'name': 'Beatles Blog', 'tagline': 'All the latest Beatles news.'}],\n&gt;&gt;&gt; Blog.objects.values('id', 'name')\n[{'id': 1, 'name': 'Beatles Blog'}]\nQuerySetQuerySetQuerySetQuerySet"}, {"idx": "webquery-test-7", "doc": "Cython: \"fatal error: numpy/arrayobject.h: No such file or directory\"", "code": "setup.pysetup.pysetup.pynp.import_array()from distutils.core import setup, Extension\nfrom Cython.Build import cythonize\nimport numpy\n\nsetup(\n    ext_modules=[\n        Extension(\"my_module\", [\"my_module.c\"],\n                  include_dirs=[numpy.get_include()]),\n    ],\n)\n\n# Or, if you use cythonize() to make the ext_modules list,\n# include_dirs can be passed to setup()\n\nsetup(\n    ext_modules=cythonize(\"my_module.pyx\"),\n    include_dirs=[numpy.get_include()]\n)    \n"}, {"idx": "webquery-test-8", "doc": "Change one value based on another value in pandas", "code": "pandaspandasimport pandas\ndf = pandas.read_csv(\"test.csv\")\ndf.loc[df.ID == 103, 'FirstName'] = \"Matt\"\ndf.loc[df.ID == 103, 'LastName'] = \"Jones\"\ndf.loc[df.ID == 103, ['FirstName', 'LastName']] = 'Matt', 'Jones'\npandaspandasimport pandas\ndf = pandas.read_csv(\"test.csv\")\ndf['FirstName'][df.ID == 103] = \"Matt\"\ndf['LastName'][df.ID == 103] = \"Jones\"\n"}, {"idx": "webquery-test-9", "doc": "Why aren't superclass __init__ methods automatically invoked?", "code": "__init____init____init____init____init____init____init__"}, {"idx": "webquery-test-10", "doc": "Difference between subprocess.Popen and os.system", "code": "os.system()os.system()sts = os.system(\"mycmd\" + \" myarg\")\nsts = Popen(\"mycmd\" + \" myarg\", shell=True).wait()\nsubprocess.Popen()subprocess.Popen()subprocess.Popen()subprocess.Popen()subprocess.Popen()"}, {"idx": "webquery-test-11", "doc": "'and' (boolean) vs '&' (bitwise) - Why difference in behavior with lists vs numpy arrays?", "code": "andandandandandandFalseFalseFalse&gt;&gt;&gt; if [False]:\n...    print 'True'\n...\nTrue\nTrueTrueTrueandandandand"}, {"idx": "webquery-test-12", "doc": "Nohup is not writing log to output file", "code": "-unohup python -u ./cmd.py &gt; cmd.log &amp;\n"}, {"idx": "webquery-test-13", "doc": "How to avoid circular imports in Python?", "code": "a.pya.py/package\n    __init__.py\n    a.py\n    b.py\nimport package.a           # (1) Absolute import\nimport package.a as a_mod  # (2) Absolute import bound to different name\nfrom package import a      # (3) Alternate absolute import\nimport a                   # (4) Implicit relative import (deprecated, python 2 only)\nfrom . import a            # (5) Explicit relative import\nImportErrorImportErrorImportErrorImportErrora.pyimport package.b\nb.pyimport package.a\na.pydef func():\n    from package import b\nb.pydef func():\n    from package import a\n__init__.pyfrom . import a\nfrom . import b\na.pyimport package\n\ndef func():\n    package.b.some_object()\nb.pyimport package\n\ndef func():\n    package.a.some_object()\nimport package.b\n\ndef func_a():\n    return \"a\"\nimport package.a\n\ndef func_b():\n    # Notice how package.a is only referenced *inside* a function\n    # and not the top level of the module.\n    return package.a.func_a() + \"b\"\nimport package.b\n\nclass A(object):\n    pass\nimport package.a\n\n# package.a is referenced at the top level of the module\nclass B(package.a.A):\n    pass\n"}, {"idx": "webquery-test-1", "doc": "Test if lists share any items in python", "code": "not set(a).isdisjoint(b)aabool(set(a) &amp; set(b))\nO(1)O(1)O(1)O(1)O(1)O(1)any(i in a for i in b)\ninina = set(a); any(i in a for i in b)\nisdisjoint()not set(a).isdisjoint(b)\nfrom timeit import timeit\n&gt;&gt;&gt; timeit('bool(set(a) &amp; set(b))', setup=\"a=list(range(1000));b=list(range(1000))\", number=100000)\n26.077727576019242\n&gt;&gt;&gt; timeit('any(i in a for i in b)', setup=\"a=list(range(1000));b=list(range(1000))\", number=100000)\n0.16220548999262974\nisdisjoint()&gt;&gt;&gt; timeit('any(i in a for i in b)', setup=\"a=list(range(1000));b=[x+998 for x in range(999,0,-1)]\", number=1000))\n13.739536046981812\n&gt;&gt;&gt; timeit('bool(set(a) &amp; set(b))', setup=\"a=list(range(1000));b=[x+998 for x in range(999,0,-1)]\", number=1000))\n0.08102107048034668\n[1, 2*len(a)][1, 2*len(a)]aaaaanot set(a).isdisjoint(b)not set(a).isdisjoint(b)not set(a).isdisjoint(b)not set(a).isdisjoint(b)not set(a).isdisjoint(b)isdisjoint()"}, {"idx": "webquery-test-2", "doc": "How to use Python requests to fake a browser visit a.k.a and generate User Agent?", "code": "User-Agentimport requests\n\nurl = 'http://www.ichangtou.com/#company:data_000008.html'\nheaders = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}\n\nresponse = requests.get(url, headers=headers)\nprint(response.content)\n&gt;&gt;&gt; from fake_useragent import UserAgent\n&gt;&gt;&gt; ua = UserAgent()\n&gt;&gt;&gt; ua.chrome\nu'Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1667.0 Safari/537.36'\n&gt;&gt;&gt; ua.random\nu'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.67 Safari/537.36'\n"}, {"idx": "webquery-test-3", "doc": "Reloading module giving NameError: name 'reload' is not defined", "code": "reloadimportlib.reloadimportlib.reloadimportlib.reload"}, {"idx": "webquery-test-4", "doc": "How to sort a list of strings numerically?", "code": "list1 = [\"1\",\"10\",\"3\",\"22\",\"23\",\"4\",\"2\",\"200\"]\nlist1 = [int(x) for x in list1]\nlist1.sort()\nsortsortlist1 = [\"1\",\"10\",\"3\",\"22\",\"23\",\"4\",\"2\",\"200\"]\n# call int(x) on each element before comparing it\nlist1.sort(key=int)\n"}, {"idx": "webquery-test-5", "doc": "List all base classes in a hierarchy of given class?", "code": "inspect.getmro(cls)inspect.getmro(cls)&gt;&gt;&gt; class A(object):\n&gt;&gt;&gt;     pass\n&gt;&gt;&gt;\n&gt;&gt;&gt; class B(A):\n&gt;&gt;&gt;     pass\n&gt;&gt;&gt;\n&gt;&gt;&gt; import inspect\n&gt;&gt;&gt; inspect.getmro(B)\n(&lt;class '__main__.B'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)\n"}, {"idx": "webquery-test-6", "doc": "Does 'finally' always execute in Python?", "code": "finallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinallyfinally"}, {"idx": "webquery-test-7", "doc": "Matplotlib transparent line plots", "code": "plt.plot(x, y, 'r-', alpha=0.7)\n"}, {"idx": "webquery-test-8", "doc": "What does model.train() do in PyTorch?", "code": "model.train()model.train()model.train()model.train()model.train()"}, {"idx": "webquery-test-9", "doc": "Creating dataframe from a dictionary where entries have different lengths", "code": "import pandas as pd\nimport numpy as np\n\nd = dict( A = np.array([1,2]), B = np.array([1,2,3,4]) )\n    \npd.DataFrame(dict([ (k,pd.Series(v)) for k,v in d.items() ]))\n\nOut[7]: \n    A  B\n0   1  1\n1   2  2\n2 NaN  3\n3 NaN  4\nd.items()d.items()"}, {"idx": "webquery-test-10", "doc": "Is explicitly closing files important?", "code": "with open(\"filename\") as f:\n     for line in f:\n        # ... do stuff ...\n"}, {"idx": "webquery-test-11", "doc": "How to turn off INFO logging in Spark?", "code": "cp conf/log4j.properties.template conf/log4j.properties\n# Set everything to be logged to the console\nlog4j.rootCategory=INFO, console\nlog4j.appender.console=org.apache.log4j.ConsoleAppender\nlog4j.appender.console.target=System.err\nlog4j.appender.console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n\n\n# Settings to quiet third party logs that are too verbose\nlog4j.logger.org.eclipse.jetty=WARN\nlog4j.logger.org.eclipse.jetty.util.component.AbstractLifeCycle=ERROR\nlog4j.logger.org.apache.spark.repl.SparkIMain$exprTyper=INFO\nlog4j.logger.org.apache.spark.repl.SparkILoop$SparkILoopInterpreter=INFO\nlog4j.rootCategory=INFO, console\nlog4j.rootCategory=WARN, console\n"}, {"idx": "webquery-test-12", "doc": "\"OSError: [Errno 2] No such file or directory\" while using python subprocess with command and arguments", "code": "shell=Trueshell=Trueshellshellsubprocess.call(crop, shell=True)\nimport shlex\nsubprocess.call(shlex.split(crop))\n"}, {"idx": "webquery-test-13", "doc": "Python style - line continuation with strings?", "code": "print(\"Why, hello there wonderful \"\n      \"stackoverflow people!\")\n"}, {"idx": "webquery-test-14", "doc": "How can I put multiple statements in one line?", "code": "for i in range(10): print \"foo\"; print \"bar\"\niffor i in range(10): print \"i equals 9\" if i==9 else None\ntry ... excepttry ... excepttry ... excepttry ... excepttry ... except"}, {"idx": "webquery-test-15", "doc": "unique combinations of values in selected columns in pandas data frame and count", "code": "groupbygroupbygroupbygroupbyIn [26]:\n\ndf1.groupby(['A','B']).size().reset_index().rename(columns={0:'count'})\nOut[26]:\n     A    B  count\n0   no   no      1\n1   no  yes      2\n2  yes   no      4\n3  yes  yes      3\nsizeIn[202]:\ndf1.groupby(['A','B']).size()\n\nOut[202]: \nA    B  \nno   no     1\n     yes    2\nyes  no     4\n     yes    3\ndtype: int64\nreset_indexIn[203]:\ndf1.groupby(['A','B']).size().reset_index()\n\nOut[203]: \n     A    B  0\n0   no   no  1\n1   no  yes  2\n2  yes   no  4\n3  yes  yes  3\n0In[204]:\ndf1.groupby(['A','B']).size().reset_index().rename(columns={0:'count'})\n\nOut[204]: \n     A    B  count\n0   no   no      1\n1   no  yes      2\n2  yes   no      4\n3  yes  yes      3\ngroupbygroupbygroupbygroupbyIn[205]:\ndf1.groupby(['A','B'], as_index=False).size()\n\nOut[205]: \nA    B  \nno   no     1\n     yes    2\nyes  no     4\n     yes    3\ndtype: int64\n"}, {"idx": "webquery-test-16", "doc": "Convert timedelta to years?", "code": "timedeltadateutil.relativedeltadateutil.relativedeltadateutil.relativedeltafrom dateutil.relativedelta import relativedelta\n\ndef yearsago(years, from_date=None):\n    if from_date is None:\n        from_date = datetime.now()\n    return from_date - relativedelta(years=years)\nfrom datetime import datetime\ndef yearsago(years, from_date=None):\n    if from_date is None:\n        from_date = datetime.now()\n    try:\n        return from_date.replace(year=from_date.year - years)\n    except ValueError:\n        # Must be 2/29!\n        assert from_date.month == 2 and from_date.day == 29 # can be removed\n        return from_date.replace(month=2, day=28,\n                                 year=from_date.year-years)\nreturn    return from_date.replace(month=3, day=1,\n                             year=from_date.year-years)\nyearsagodef num_years(begin, end=None):\n    if end is None:\n        end = datetime.now()\n    num_years = int((end - begin).days / 365.2425)\n    if begin &gt; yearsago(num_years, end):\n        return num_years - 1\n    else:\n        return num_years\n"}, {"idx": "webquery-test-1", "doc": "Split string based on a regular expression", "code": "((&gt;&gt;&gt; str1 = \"a    b     c      d\"\n&gt;&gt;&gt; re.split(\" +\", str1)\n['a', 'b', 'c', 'd']\nstr.split&gt;&gt;&gt; str1.split()\n['a', 'b', 'c', 'd']\n'\\s'&gt;&gt;&gt; re.split(\"\\s+\", str1)\n['a', 'b', 'c', 'd']\n&gt;&gt;&gt; re.findall(r'\\S+',str1)\n['a', 'b', 'c', 'd']\n"}, {"idx": "webquery-test-2", "doc": "How to suppress py.test internal deprecation warnings", "code": "pytest --help--disable-pytest-warnings\n                      disable warnings summary, overrides -r w flag\n"}, {"idx": "webquery-test-3", "doc": "How to len(generator())", "code": "listsum(1 for x in generator)\nlen(list(generator))"}, {"idx": "webquery-test-4", "doc": "Adding a user to a group in django", "code": "from django.contrib.auth.models import Group\nmy_group = Group.objects.get(name='my_group_name') \nmy_group.user_set.add(your_user)\n"}, {"idx": "webquery-test-5", "doc": "Can I redirect the stdout into some sort of string buffer?", "code": "from cStringIO import StringIO # Python3 use: from io import StringIO\nimport sys\n\nold_stdout = sys.stdout\nsys.stdout = mystdout = StringIO()\n\n# blah blah lots of code ...\n\nsys.stdout = old_stdout\n\n# examine mystdout.getvalue()\n"}, {"idx": "webquery-test-6", "doc": "Cleanest and most Pythonic way to get tomorrow's date?", "code": "datetime.date.today() + datetime.timedelta(days=1)"}, {"idx": "webquery-test-7", "doc": "Return first N key:value pairs from dict", "code": "dictn_items = take(n, d.iteritems())\ntaketakefrom itertools import islice\n\ndef take(n, iterable):\n    \"Return first n items of the iterable as a list\"\n    return list(islice(iterable, n))\nn_items = take(n, d.items())\n"}, {"idx": "webquery-test-8", "doc": "How do I get the opposite (negation) of a Boolean in Python?", "code": "notnot bool\nififreturn not bool\nisisisis"}, {"idx": "webquery-test-9", "doc": "How to send email via Django?", "code": "EMAIL_USE_TLS = True\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_HOST_USER = 'me@gmail.com'\nEMAIL_HOST_PASSWORD = 'password'\n"}, {"idx": "webquery-test-10", "doc": "Could pandas use column as index?", "code": "pandas.DataFrame.set_indexpandas.DataFrame.set_indexdata.set_index('Locality', inplace=True)\ninplace=Trueinplace=True&gt; import pandas as pd\n&gt; df = pd.DataFrame([['ABBOTSFORD', 427000, 448000],\n                     ['ABERFELDIE', 534000, 600000]],\n                    columns=['Locality', 2005, 2006])\n\n&gt; df\n     Locality    2005    2006\n0  ABBOTSFORD  427000  448000\n1  ABERFELDIE  534000  600000\n\n&gt; df.set_index('Locality', inplace=True)\n&gt; df\n              2005    2006\nLocality                  \nABBOTSFORD  427000  448000\nABERFELDIE  534000  600000\n\n&gt; df.loc['ABBOTSFORD']\n2005    427000\n2006    448000\nName: ABBOTSFORD, dtype: int64\n\n&gt; df.loc['ABBOTSFORD'][2005]\n427000\n\n&gt; df.loc['ABBOTSFORD'].values\narray([427000, 448000])\n\n&gt; df.loc['ABBOTSFORD'].tolist()\n[427000, 448000]\n"}, {"idx": "webquery-test-11", "doc": "What is the difference between os.path.basename() and os.path.dirname()?", "code": "os.path.split(path)os.path.split(path)os.path.split(path)os.path.dirname(path)'/foo/bar/item''/foo/bar/item'os.path.basename(path)'/foo/bar/item''/foo/bar/item'"}, {"idx": "webquery-test-12", "doc": "initialize a numpy array", "code": "numpy.zerosnumpy.onesnumpy.emptynumpy.append"}, {"idx": "webquery-test-13", "doc": "TensorFlow, why was python the chosen language?", "code": "h1 = tf.nn.relu(tf.matmul(l1, W1) + b1)\nh2 = ...\nsess.run(eval_results)\n"}, {"idx": "webquery-test-14", "doc": "Python Logging - Disable logging from imported modules", "code": "getLoggergetLoggerlogger = logging.getLogger('my_module_name')\n# as before\nlogger.debuglogger.debuglogger.debug"}, {"idx": "webquery-test-15", "doc": "Converting list to *args when calling function", "code": "*timeseries_list = [timeseries1 timeseries2 ...]\nr = scikits.timeseries.lib.reportlib.Report(*timeseries_list)\n****"}, {"idx": "webquery-test-16", "doc": "How do I run a Python script from C#?", "code": "UseShellExecute = falseFileNameFileNameRedirectStandardOutputRedirectStandardOutputprivate void run_cmd(string cmd, string args)\n{\n     ProcessStartInfo start = new ProcessStartInfo();\n     start.FileName = \"my/full/path/to/python.exe\";\n     start.Arguments = string.Format(\"{0} {1}\", cmd, args);\n     start.UseShellExecute = false;\n     start.RedirectStandardOutput = true;\n     using(Process process = Process.Start(start))\n     {\n         using(StreamReader reader = process.StandardOutput)\n         {\n             string result = reader.ReadToEnd();\n             Console.Write(result);\n         }\n     }\n}\n"}, {"idx": "webquery-test-17", "doc": "How can mypy ignore a single line in a source file?", "code": "# type: ignore# type: ignore# type: ignore"}, {"idx": "webquery-test-18", "doc": "Split views.py in several files", "code": "__init__.pyviews.pydef view1(arg):\n    pass\n\ndef view2(arg):\n   pass\nviews/\n   __init__.py\n   viewsa.py\n   viewsb.py\nviewsa.pydef view1(arg):\n    pass\nviewsb.pydef view2(arg):\n    pass\n__init__.pyfrom viewsa import view1\nfrom viewsb import view2\nfrom views import view1views.pyviews.pyviews.pyimportimportimportviews/__init__.pyviews/__init__.pyfrom viewsa import *\nfrom viewsb import *\n"}, {"idx": "webquery-test-19", "doc": "Numpy: Divide each row by a vector element", "code": "NoneNoneIn [6]: data - vector[:,None]\nOut[6]:\narray([[0, 0, 0],\n       [0, 0, 0],\n       [0, 0, 0]])\n\nIn [7]: data / vector[:,None]\nOut[7]:\narray([[1, 1, 1],\n       [1, 1, 1],\n       [1, 1, 1]])\n"}, {"idx": "webquery-test-20", "doc": "How to convert an array of strings to an array of floats in numpy?", "code": "np.array(map(float, list_of_strings))np.array(map(float, list_of_strings))np.array(map(float, list_of_strings))np.array(map(float, list_of_strings))np.array(map(float, list_of_strings))astype()import numpy as np\nx = np.array(['1.1', '2.2', '3.3'])\ny = x.astype(np.float)\n"}, {"idx": "webquery-test-21", "doc": "Is there a builtin identity function in python?", "code": "_ = lambda *args: args\n_ = lambda x: x\n"}, {"idx": "webquery-test-1", "doc": "Why is my Python App Engine app using the Translate API getting an error of ImportError: No module named apiclient.discovery?", "code": "sudo pip install --upgrade google-api-python-client\n"}, {"idx": "webquery-test-2", "doc": "Prepend a level to a pandas MultiIndex", "code": "pandas.concat()import pandas as pd\n\npd.concat([df], keys=['Foo'], names=['Firstlevel'])\npd.concat({'Foo': df}, names=['Firstlevel'])\n"}, {"idx": "webquery-test-3", "doc": "How to get the first column of a pandas DataFrame as a Series?", "code": "&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; df = pd.DataFrame({'x' : [1, 2, 3, 4], 'y' : [4, 5, 6, 7]})\n&gt;&gt;&gt; df\n   x  y\n0  1  4\n1  2  5\n2  3  6\n3  4  7\n&gt;&gt;&gt; s = df.ix[:,0]\n&gt;&gt;&gt; type(s)\n&lt;class 'pandas.core.series.Series'&gt;\n&gt;&gt;&gt;\nixixix"}, {"idx": "webquery-test-4", "doc": "What's the difference between %s and %d in Python string formatting?", "code": "%s%s%sname = 'marcog'\nnumber = 42\nprint '%s %d' % (name, number)\nmarcog 42print('%s %d' % (name, number))\n"}, {"idx": "webquery-test-5", "doc": "Duplicate log output when using Python logging module", "code": "logging.getLogger()myLogger()import os\nimport time\nimport datetime\nimport logging\n\nloggers = {}\n\ndef myLogger(name):\n    global loggers\n    \n    if loggers.get(name):\n        return loggers.get(name)\n    else:\n        logger = logging.getLogger(name)\n        logger.setLevel(logging.DEBUG)\n        now = datetime.datetime.now()\n        handler = logging.FileHandler(\n            '/root/credentials/Logs/ProvisioningPython' \n            + now.strftime(\"%Y-%m-%d\") \n            + '.log')\n        formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n        loggers[name] = logger\n                       \n        return logger\n"}, {"idx": "webquery-test-6", "doc": "How to make Firefox headless programmatically in Selenium with Python?", "code": "headlessheadlessfrom selenium import webdriver\nfrom selenium.webdriver.firefox.options import Options\n\noptions = Options()\noptions.headless = True\ndriver = webdriver.Firefox(options=options, executable_path=r'C:\\Utility\\BrowserDrivers\\geckodriver.exe')\ndriver.get(\"http://google.com/\")\nprint (\"Headless Firefox Initialized\")\ndriver.quit()\nMOZ_HEADLESS$ MOZ_HEADLESS=1 python manage.py test # testing example in Django with headless Firefox\n$ export MOZ_HEADLESS=1   # this way you only have to set it once\n$ python manage.py test functional/tests/directory\n$ unset MOZ_HEADLESS      # if you want to disable headless mode\n"}, {"idx": "webquery-test-7", "doc": "Numpy Resize/Rescale Image", "code": "opencvopencvimport cv2\nimport numpy as np\n\nimg = cv2.imread('your_image.jpg')\nres = <b>cv2.resize(img, dsize=(54, 140), interpolation=cv2.INTER_CUBIC)</b>imgimgimgINTER_NEARESTINTER_NEARESTINTER_NEARESTINTER_NEARESTINTER_NEARESTINTER_NEAREST"}, {"idx": "webquery-test-8", "doc": "Is it better to use path() or url() in urls.py for django 2.0?", "code": "url(regex, view, kwargs=None, name=None)url(regex, view, kwargs=None, name=None)pathpathpathre_pathre_path"}, {"idx": "webquery-test-9", "doc": "Binning a column with pandas", "code": "pandas.cutbins = [0, 1, 5, 10, 25, 50, 100]\ndf['binned'] = pd.cut(df['percentage'], bins)\nprint (df)\n   percentage     binned\n0       46.50   (25, 50]\n1       44.20   (25, 50]\n2      100.00  (50, 100]\n3       42.12   (25, 50]\nbins = [0, 1, 5, 10, 25, 50, 100]\nlabels = [1,2,3,4,5,6]\ndf['binned'] = pd.cut(df['percentage'], bins=bins, labels=labels)\nprint (df)\n   percentage binned\n0       46.50      5\n1       44.20      5\n2      100.00      6\n3       42.12      5\nnumpy.searchsortedbins = [0, 1, 5, 10, 25, 50, 100]\ndf['binned'] = np.searchsorted(bins, df['percentage'].values)\nprint (df)\n   percentage  binned\n0       46.50       5\n1       44.20       5\n2      100.00       6\n3       42.12       5\nvalue_countsvalue_countsvalue_countss = pd.cut(df['percentage'], bins=bins).value_counts()\nprint (s)\n(25, 50]     3\n(50, 100]    1\n(10, 25]     0\n(5, 10]      0\n(1, 5]       0\n(0, 1]       0\nName: percentage, dtype: int64\ns = df.groupby(pd.cut(df['percentage'], bins=bins)).size()\nprint (s)\npercentage\n(0, 1]       0\n(1, 5]       0\n(5, 10]      0\n(10, 25]     0\n(25, 50]     3\n(50, 100]    1\ndtype: int64\ncutcutSeriesSeries"}, {"idx": "webquery-test-10", "doc": "Python __call__ special method practical example", "code": "__call__class Factorial:\n    def __init__(self):\n        self.cache = {}\n    def __call__(self, n):\n        if n not in self.cache:\n            if n == 0:\n                self.cache[n] = 1\n            else:\n                self.cache[n] = n * self.__call__(n-1)\n        return self.cache[n]\n\nfact = Factorial()\nfactfor i in xrange(10):                                                             \n    print(\"{}! = {}\".format(i, fact(i)))\n\n# output\n0! = 1\n1! = 1\n2! = 2\n3! = 6\n4! = 24\n5! = 120\n6! = 720\n7! = 5040\n8! = 40320\n9! = 362880\n"}, {"idx": "webquery-test-11", "doc": "How to \"select distinct\" across multiple data frame columns in pandas?", "code": "drop_duplicatesIn [29]: df = pd.DataFrame({'a':[1,2,1,2], 'b':[3,4,3,5]})\n\nIn [30]: df\nOut[30]:\n   a  b\n0  1  3\n1  2  4\n2  1  3\n3  2  5\n\nIn [32]: df.drop_duplicates()\nOut[32]:\n   a  b\n0  1  3\n1  2  4\n3  2  5\nsubset"}, {"idx": "webquery-test-12", "doc": "Use .corr to get the correlation between two columns", "code": "Top15['Citable docs per Capita'].corr(Top15['Energy Supply per Capita'])\n'Citable docs per Capita''Citable docs per Capita'import pandas as pd\n\ndf = pd.DataFrame({'A': range(4), 'B': [2*i for i in range(4)]})\n\n   A  B\n0  0  0\n1  1  2\n2  2  4\n3  3  6\ndf['A'].corr(df['B'])\n1df.loc[2, 'B'] = 4.5\n\n   A    B\n0  0  0.0\n1  1  2.0\n2  2  4.5\n3  3  6.0\ndf['A'].corr(df['B'])\n0.99586\n.corr.corrdf.corr()\n          A         B\nA  1.000000  0.995862\nB  0.995862  1.000000\nNaN"}, {"idx": "webquery-test-13", "doc": "What is the difference between 'content' and 'text'", "code": "requests.Responser.textr.text"}, {"idx": "webquery-test-14", "doc": "How to get numbers after decimal point?", "code": "5.55 % 1\n0.550000000001\n"}, {"idx": "webquery-test-15", "doc": "Python: json.loads returns items prefixing with 'u'", "code": "print mail_accounts[0][\"i\"]\n"}, {"idx": "webquery-test-16", "doc": "How to calculate a mod b in Python?", "code": "%"}, {"idx": "webquery-test-17", "doc": "Disable individual Python unit tests temporarily", "code": "unittest.skip@unittest.skip(\"reason for skipping\")\ndef test_foo():\n    print('This is foo test case.')\n\n\n@unittest.skip  # no reason needed\ndef test_bar():\n    print('This is bar test case.')\n"}, {"idx": "webquery-test-18", "doc": "Assert a function/method was not called using Mock", "code": "assert not my_var.called, 'method should not have been called'\n&gt;&gt;&gt; mock=Mock()\n&gt;&gt;&gt; mock.a()\n&lt;Mock name='mock.a()' id='4349129872'&gt;\n&gt;&gt;&gt; assert not mock.b.called, 'b was called and should not have been'\n&gt;&gt;&gt; assert not mock.a.called, 'a was called and should not have been'\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAssertionError: a was called and should not have been\n"}, {"idx": "webquery-test-19", "doc": "How can I write data in YAML format in a file?", "code": "import yaml\n\ndata = dict(\n    A = 'a',\n    B = dict(\n        C = 'c',\n        D = 'd',\n        E = 'e',\n    )\n)\n\nwith open('data.yml', 'w') as outfile:\n    yaml.dump(data, outfile, default_flow_style=False)\ndefault_flow_style=FalseA: a\nB: {C: c, D: d, E: e}\n"}, {"idx": "webquery-test-1", "doc": "How to run functions in parallel?", "code": "threadingthreadingthreadingthreadingfrom multiprocessing import Process\n\ndef func1():\n  print 'func1: starting'\n  for i in xrange(10000000): pass\n  print 'func1: finishing'\n\ndef func2():\n  print 'func2: starting'\n  for i in xrange(10000000): pass\n  print 'func2: finishing'\n\nif __name__ == '__main__':\n  p1 = Process(target=func1)\n  p1.start()\n  p2 = Process(target=func2)\n  p2.start()\n  p1.join()\n  p2.join()\nrunBothFuncdef runInParallel(*fns):\n  proc = []\n  for fn in fns:\n    p = Process(target=fn)\n    p.start()\n    proc.append(p)\n  for p in proc:\n    p.join()\n\nrunInParallel(func1, func2)\n"}, {"idx": "webquery-test-2", "doc": "Using javadoc for Python documentation", "code": "\"\"\"Replaces template placeholder with values.\n\n:param timestamp: formatted date to display\n:param priority: priority number\n:param priority_name: priority name\n:param message: message to display\n:returns: formatted string\n\"\"\"\n\"\"\"Replaces template placeholder with values.\n\n:param timestamp: formatted date to display\n:type timestamp: str or unicode\n:param priority: priority number\n:type priority: str or unicode\n:param priority_name: priority name\n:type priority_name: str or unicode\n:param message: message to display\n:type message: str or unicode\n:returns: formatted string\n:rtype: str or unicode\n\"\"\"\n"}, {"idx": "webquery-test-3", "doc": "How do I avoid the \"self.x = x; self.y = y; self.z = z\" pattern in __init__?", "code": "class A:\n    def __init__(self, **kwargs):\n        for key in kwargs:\n          setattr(self, key, kwargs[key])\n\na = A(l=1, d=2)\na.l # will return 1\na.d # will return 2\n"}, {"idx": "webquery-test-4", "doc": "How to duplicate virtualenv", "code": "pip freeze &gt; requirements.txt\nDjango==1.3\nFabric==1.0.1\netc...\nDjango==x.xDjango==x.xpip install -r requirements.txt\n"}, {"idx": "webquery-test-5", "doc": "How do I release memory used by a pandas dataframe?", "code": "free()&gt;&gt;&gt; import os, psutil, numpy as np # psutil may need to be installed\n&gt;&gt;&gt; def usage():\n...     process = psutil.Process(os.getpid())\n...     return process.memory_info()[0] / float(2 ** 20)\n... \n&gt;&gt;&gt; usage() # initial memory usage\n27.5 \n\n&gt;&gt;&gt; arr = np.arange(10 ** 8) # create a large array without boxing\n&gt;&gt;&gt; usage()\n790.46875\n&gt;&gt;&gt; del arr\n&gt;&gt;&gt; usage()\n27.52734375 # numpy just free()'d the array\n\n&gt;&gt;&gt; arr = np.arange(10 ** 8, dtype='O') # create lots of objects\n&gt;&gt;&gt; usage()\n3135.109375\n&gt;&gt;&gt; del arr\n&gt;&gt;&gt; usage()\n2372.16796875  # numpy frees the array, but python keeps the heap big\ninplace=TrueIn [1]: import pandas as pd\n\nIn [2]: df = pd.DataFrame({'foo': [1,2,3,4]})\n\nIn [3]: df + 1\nOut[3]: \n   foo\n0    2\n1    3\n2    4\n3    5\n\nIn [4]: df + 2\nOut[4]: \n   foo\n0    3\n1    4\n2    5\n3    6\n\nIn [5]: Out # Still has all our temporary DataFrame objects!\nOut[5]: \n{3:    foo\n 0    2\n 1    3\n 2    4\n 3    5, 4:    foo\n 0    3\n 1    4\n 2    5\n 3    6}\n%reset Out%reset Out&gt;&gt;&gt; df.dtypes\nfoo    float64 # 8 bytes per value\nbar      int64 # 8 bytes per value\nbaz     object # at least 48 bytes per value, often more\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; arr = np.array(['foo', 'bar', 'baz'])\n&gt;&gt;&gt; arr.dtype\ndtype('S3')\n&gt;&gt;&gt; arr.nbytes\n9\n\n&gt;&gt;&gt; import sys; import pandas as pd\n&gt;&gt;&gt; s = pd.Series(['foo', 'bar', 'baz'])\ndtype('O')\n&gt;&gt;&gt; sum(sys.getsizeof(x) for x in s)\n120\n&gt;&gt;&gt; df1.info()\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nInt64Index: 39681584 entries, 0 to 39681583\nData columns (total 1 columns):\nfoo    float64\ndtypes: float64(1)\nmemory usage: 605.5 MB\n\n&gt;&gt;&gt; df1.shape\n(39681584, 1)\n\n&gt;&gt;&gt; df1.foo.isnull().sum() * 100. / len(df1)\n20.628483479893344 # so 20% of values are NaN\n\n&gt;&gt;&gt; df1.to_sparse().info()\n&lt;class 'pandas.sparse.frame.SparseDataFrame'&gt;\nInt64Index: 39681584 entries, 0 to 39681583\nData columns (total 1 columns):\nfoo    float64\ndtypes: float64(1)\nmemory usage: 543.0 MB\n&gt;&gt;&gt; df.info()\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nInt64Index: 39681584 entries, 0 to 39681583\nData columns (total 14 columns):\n...\ndtypes: datetime64[ns](1), float64(8), int64(1), object(4)\nmemory usage: 4.4+ GB\ndf.info(memory_usage='deep')"}, {"idx": "webquery-test-6", "doc": "How to create a DataFrame of random integers with Pandas?", "code": "numpy.random.randintnumpy.random.randintnumpy.random.randintdf = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))\nnp.random.randint(0,100,size=(100, 4))np.random.randint(0,100,size=(100, 4))np.random.randint(0,100,size=(100, 4))import numpy as np\nimport pandas as pd\ndf = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))\n     A   B   C   D\n0   45  88  44  92\n1   62  34   2  86\n2   85  65  11  31\n3   74  43  42  56\n4   90  38  34  93\n5    0  94  45  10\n6   58  23  23  60\n..  ..  ..  ..  ..\n"}, {"idx": "webquery-test-7", "doc": "Mocking a class: Mock() or patch()?", "code": "mock.patchmock.patchmock.patch&gt;&gt;&gt; class MyClass(object):\n...   def __init__(self):\n...     print 'Created MyClass@{0}'.format(id(self))\n... \n&gt;&gt;&gt; def create_instance():\n...   return MyClass()\n... \n&gt;&gt;&gt; x = create_instance()\nCreated MyClass@4299548304\n&gt;&gt;&gt; \n&gt;&gt;&gt; @mock.patch('__main__.MyClass')\n... def create_instance2(MyClass):\n...   MyClass.return_value = 'foo'\n...   return create_instance()\n... \n&gt;&gt;&gt; i = create_instance2()\n&gt;&gt;&gt; i\n'foo'\n&gt;&gt;&gt; def create_instance():\n...   print MyClass\n...   return MyClass()\n...\n&gt;&gt;&gt; create_instance2()\n&lt;mock.Mock object at 0x100505d90&gt;\n'foo'\n&gt;&gt;&gt; create_instance()\n&lt;class '__main__.MyClass'&gt;\nCreated MyClass@4300234128\n&lt;__main__.MyClass object at 0x100505d90&gt;\npatchpatchmock.patchmock.patchmock.patchmock.patchmock.patch"}, {"idx": "webquery-test-8", "doc": "Is it possible to modify a variable in python that is in an outer (enclosing), but not global, scope?", "code": "nonlocalnonlocaldef foo():\n    a = 1\n    def bar():\n        nonlocal a\n        a = 2\n    bar()\n    print(a)  # Output: 2\ndef foo():\n    a = []\n    def bar():\n        a.append(1)\n    bar()\n    bar()\n    print a\n\nfoo()\n[1, 1]\n"}, {"idx": "webquery-test-9", "doc": "What rules does Pandas use to generate a view vs a copy?", "code": "inplace=Trueinplace=Trueinplace=Trueinplace=Truechained indexingdf[df.C &lt;= df.B].loc[:,'B':'E']\ndf.loc[df.C &lt;= df.B, 'B':'E']\nSettingWithCopyWarning"}, {"idx": "webquery-test-10", "doc": "How to convert an XML string to a dictionary?", "code": "xmltodict.parse(\"\"\"\n&lt;?xml version=\"1.0\" ?&gt;\n&lt;person&gt;\n  &lt;name&gt;john&lt;/name&gt;\n  &lt;age&gt;20&lt;/age&gt;\n&lt;/person&gt;\"\"\")\n# {u'person': {u'age': u'20', u'name': u'john'}}\n"}, {"idx": "webquery-test-11", "doc": "Datetime current year and month in Python", "code": "from datetime import datetime\n\ncurrentSecond= datetime.now().second\ncurrentMinute = datetime.now().minute\ncurrentHour = datetime.now().hour\n\ncurrentDay = datetime.now().day\ncurrentMonth = datetime.now().month\ncurrentYear = datetime.now().year\n"}, {"idx": "webquery-test-12", "doc": "Select Pandas rows based on list index", "code": ".iloc.ilocind_list = [1, 3]\ndf.iloc[ind_list]\n"}, {"idx": "webquery-test-13", "doc": "Split a large pandas dataframe", "code": "np.array_splitDocstring:\nSplit an array into multiple sub-arrays.\n\nPlease refer to the ``split`` documentation.  The only difference\nbetween these functions is that ``array_split`` allows\n`indices_or_sections` to be an integer that does *not* equally\ndivide the axis.\nIn [1]: import pandas as pd\n\nIn [2]: df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',\n   ...:                           'foo', 'bar', 'foo', 'foo'],\n   ...:                    'B' : ['one', 'one', 'two', 'three',\n   ...:                           'two', 'two', 'one', 'three'],\n   ...:                    'C' : randn(8), 'D' : randn(8)})\n\nIn [3]: print df\n     A      B         C         D\n0  foo    one -0.174067 -0.608579\n1  bar    one -0.860386 -1.210518\n2  foo    two  0.614102  1.689837\n3  bar  three -0.284792 -1.071160\n4  foo    two  0.843610  0.803712\n5  bar    two -1.514722  0.870861\n6  foo    one  0.131529 -0.968151\n7  foo  three -1.002946 -0.257468\n\nIn [4]: import numpy as np\nIn [5]: np.array_split(df, 3)\nOut[5]: \n[     A    B         C         D\n0  foo  one -0.174067 -0.608579\n1  bar  one -0.860386 -1.210518\n2  foo  two  0.614102  1.689837,\n      A      B         C         D\n3  bar  three -0.284792 -1.071160\n4  foo    two  0.843610  0.803712\n5  bar    two -1.514722  0.870861,\n      A      B         C         D\n6  foo    one  0.131529 -0.968151\n7  foo  three -1.002946 -0.257468]\n"}, {"idx": "webquery-test-14", "doc": "Python Pandas Replacing Header with Top Row", "code": "new_header = df.iloc[0] #grab the first row for the header\ndf = df[1:] #take the data less the header row\ndf.columns = new_header #set the header row as the df header\n"}, {"idx": "webquery-test-15", "doc": "Add SUM of values of two LISTS into new LIST", "code": "zip[x + y for x, y in zip(first, second)]\nlists_of_lists = [[1, 2, 3], [4, 5, 6]]\n[sum(x) for x in zip(*lists_of_lists)]\n# -&gt; [5, 7, 9]\n"}, {"idx": "webquery-test-16", "doc": "How can you set class attributes from variable arguments (kwargs) in python", "code": "__dict__class Bar(object):\n    def __init__(self, **kwargs):\n        self.__dict__.update(kwargs)\n&gt;&gt;&gt; bar = Bar(a=1, b=2)\n&gt;&gt;&gt; bar.a\n1\nallowed_keys = {'a', 'b', 'c'}\nself.__dict__.update((k, v) for k, v in kwargs.items() if k in allowed_keys)\niteritemsiteritems"}, {"idx": "webquery-test-17", "doc": "Django 1.7 throws django.core.exceptions.AppRegistryNotReady: Models aren't loaded yet", "code": "import django\ndjango.setup()\n"}, {"idx": "webquery-test-18", "doc": "Why are trailing commas allowed in a list?", "code": "s = ['manny',\n     'mo',\n     'jack',\n]\ns = ['manny',\n     'mo',\n     'jack',\n     'roger',\n]\n  s = ['manny',\n       'mo',\n       'jack',\n+      'roger',\n  ]\n  s = ['manny',\n       'mo',\n-      'jack'\n+      'jack',\n+      'roger'\n  ]\ns = ['manny',\n     'mo',\n     'jack'\n     'roger'  # Added this line, but forgot to add a comma on the previous line\n]\ns = ['manny', 'mo', 'jackroger']"}, {"idx": "webquery-test-1", "doc": "dropping rows from dataframe based on a \"not in\" condition", "code": "pandas.Dataframe.isinpandas.Dateframe.isinpandas.Dateframe.isinpandas.Dateframe.isinpandas.Dateframe.isinpandas.Dateframe.isinimport pandas as pd\n\na = ['2015-01-01' , '2015-02-01']\n\ndf = pd.DataFrame(data={'date':['2015-01-01' , '2015-02-01', '2015-03-01' , '2015-04-01', '2015-05-01' , '2015-06-01']})\n\nprint(df)\n#         date\n#0  2015-01-01\n#1  2015-02-01\n#2  2015-03-01\n#3  2015-04-01\n#4  2015-05-01\n#5  2015-06-01\n\ndf = df[~df['date'].isin(a)]\n\nprint(df)\n#         date\n#2  2015-03-01\n#3  2015-04-01\n#4  2015-05-01\n#5  2015-06-01\n"}, {"idx": "webquery-test-2", "doc": "How do I revert to a previous package in Anaconda?", "code": "installconda install pandas=0.13.1\n"}, {"idx": "webquery-test-3", "doc": "Can I use __init__.py to define global variables?", "code": "__init__.pymypackage/__init__.pyMY_CONSTANT = 42\nmypackage/mymodule.pyfrom mypackage import MY_CONSTANT\nprint \"my constant is\", MY_CONSTANT\n&gt;&gt;&gt; from mypackage import mymodule\nmy constant is 42\nmypackage/__init__.pyfrom mypackage.constants import *\nmypackagemypackage"}, {"idx": "webquery-test-4", "doc": "Difference between numpy dot() and Python 3.5+ matrix multiplication @", "code": "@@@@&gt;&gt;&gt; a = np.random.rand(8,13,13)\n&gt;&gt;&gt; b = np.random.rand(8,13,13)\n&gt;&gt;&gt; np.matmul(a, b).shape\n(8, 13, 13)\nmatmulmatmuldotdotmatmulnp.dot"}, {"idx": "webquery-test-5", "doc": "What is dtype('O'), in pandas?", "code": "'O'     (Python) objects\n'b'       boolean\n'i'       (signed) integer\n'u'       unsigned integer\n'f'       floating-point\n'c'       complex-floating point\n'O'       (Python) objects\n'S', 'a'  (byte-)string\n'U'       Unicode\n'V'       raw data (void)\ntype"}, {"idx": "webquery-test-6", "doc": "How does the class_weight parameter in scikit-learn work?", "code": "class_weightclass_weightclass_weightclass_weightclass_weightclass_weight=\"auto\"class_weight=\"auto\""}, {"idx": "webquery-test-7", "doc": "Python nested functions variable scoping", "code": "nonlocalnonlocaldef sum_list_items(_list):\n    total = 0\n\n    def do_the_sum(_list):\n        for i in _list:\n            total += i\n\n    do_the_sum(_list)\n\n    return total\n\nsum_list_items([1, 2, 3])\nUnboundLocalError: local variable 'total' referenced before assignmentnonlocaldef sum_list_items(_list):\n    total = 0\n\n    def do_the_sum(_list):\n\n        # Define the total variable as non-local, causing it to bind\n        # to the nearest non-global variable also called total.\n        nonlocal total\n\n        for i in _list:\n            total += i\n\n    do_the_sum(_list)\n\n    return total\n\nsum_list_items([1, 2, 3])\ndef sum_list_items(_list):\n\n    total = 0\n\n    def do_the_sum(_list):\n\n        # The nonlocal total binds to this variable.\n        total = 0\n\n        def do_core_computations(_list):\n\n            # Define the total variable as non-local, causing it to bind\n            # to the nearest non-global variable also called total.\n            nonlocal total\n\n            for i in _list:\n                total += i\n\n        do_core_computations(_list)\n\n    do_the_sum(_list)\n\n    return total\n\nsum_list_items([1, 2, 3])\ntotaltotaltotaltotaltotaltotaltotaldef sum_list_items(_list):\n\n    # The nonlocal total binds to this variable.\n    total = 0\n\n    def do_the_sum(_list):\n\n        def do_core_computations(_list):\n\n            # Define the total variable as non-local, causing it to bind\n            # to the nearest non-global variable also called total.\n            nonlocal total\n\n            for i in _list:\n                total += i\n\n        do_core_computations(_list)\n\n    do_the_sum(_list)\n\n    return total\n\nsum_list_items([1, 2, 3])\ntotaltotal"}, {"idx": "webquery-test-8", "doc": "How to drop rows from pandas data frame that contains a particular string in a particular column?", "code": "In [91]: df = pd.DataFrame(dict(A=[5,3,5,6], C=[\"foo\",\"bar\",\"fooXYZbar\", \"bat\"]))\n\nIn [92]: df\nOut[92]:\n   A          C\n0  5        foo\n1  3        bar\n2  5  fooXYZbar\n3  6        bat\n\nIn [93]: df[~df.C.str.contains(\"XYZ\")]\nOut[93]:\n   A    C\n0  5  foo\n1  3  bar\n3  6  bat\n"}, {"idx": "webquery-test-9", "doc": "Remove and Replace Printed items", "code": "import time\nfor x in range (0,5):  \n    b = \"Loading\" + \".\" * x\n    print (b, end=\"\\r\")\n    time.sleep(1)\n"}, {"idx": "webquery-test-10", "doc": "How to test the membership of multiple values in a list", "code": "&gt;&gt;&gt; all(x in ['b', 'a', 'foo', 'bar'] for x in ['a', 'b'])\nTrue\n'a','b' in ['b', 'a', 'foo', 'bar']&gt;&gt;&gt; 'a', 'b'\n('a', 'b')\n&gt;&gt;&gt; 'a', 5 + 2\n('a', 7)\n&gt;&gt;&gt; 'a', 'x' in 'xerxes'\n('a', True)\n&gt;&gt;&gt; set(['a', 'b']).issubset(set(['a', 'b', 'foo', 'bar']))\nTrue\n&gt;&gt;&gt; {'a', 'b'} &lt;= {'a', 'b', 'foo', 'bar'}\nTrue\n&gt;&gt;&gt; {'a', ['b']} &lt;= {'a', ['b'], 'foo', 'bar'}\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unhashable type: 'list'\nall(x in container for x in items)all(x in container for x in items)all(x in container for x in items)&gt;&gt;&gt; container = [['b'], 'a', 'foo', 'bar']\n&gt;&gt;&gt; items = (i for i in ('a', ['b']))\n&gt;&gt;&gt; all(x in [['b'], 'a', 'foo', 'bar'] for x in items)\nTrue\nallcontainercontainer&gt;&gt;&gt; smallset = set(range(10))\n&gt;&gt;&gt; smallsubset = set(range(5))\n&gt;&gt;&gt; %timeit smallset &gt;= smallsubset\n110 ns \u00b1 0.702 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n&gt;&gt;&gt; %timeit all(x in smallset for x in smallsubset)\n951 ns \u00b1 11.5 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\ncontainercontainer&gt;&gt;&gt; bigset = set(range(100000))\n&gt;&gt;&gt; bigsubset = set(range(50000))\n&gt;&gt;&gt; %timeit bigset &gt;= bigsubset\n1.14 ms \u00b1 13.9 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n&gt;&gt;&gt; %timeit all(x in bigset for x in bigsubset)\n5.96 ms \u00b1 37 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\nccitems&gt;&gt;&gt; %timeit bigset &gt;= set(bigsubseq)\n2.1 ms \u00b1 49.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\ncontainer&gt;&gt;&gt; %timeit set(bigseq) &gt;= set(bigsubseq)\n4.36 ms \u00b1 31.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\ncontainer&gt;&gt;&gt; %timeit all(x in bigseq for x in bigsubseq)\n184 ms \u00b1 994 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\nbigseq&gt;&gt;&gt; %timeit bigset = set(bigseq); all(x in bigset for x in bigsubseq)\n7.24 ms \u00b1 78 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\nset(bigseq) &gt;= set(bigsubseq)allallall&gt;&gt;&gt; %timeit hugeiter = (x * 10 for bss in [bigsubseq] * 2000 for x in bss); set(bigset) &gt;= set(hugeiter)\n13.1 s \u00b1 167 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n&gt;&gt;&gt; %timeit hugeiter = (x * 10 for bss in [bigsubseq] * 2000 for x in bss); all(x in bigset for x in hugeiter)\n2.33 ms \u00b1 65.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\nsetsetcontainercontainercontainerall"}, {"idx": "webquery-test-11", "doc": "Convert string in base64 to image and save on filesystem", "code": "img_data = b'iVBORw0KGgoAAAANSUhEUgAABoIAAAaCCAYAAAABZu+EAAAqOElEQVR42uzBAQEAAACAkP6v7ggK\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACA2YMDAQAAAAAg\\n/9dGUFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVWkPDgkA\\nAAAABP1/7QobAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\nAAAAAAAAAAAAAAAAAIcAeHkAAeLqlDIAAAAASUVORK5CYII='\n# In Python 2.7\nfh = open(\"imageToSave.png\", \"wb\")\nfh.write(img_data.decode('base64'))\nfh.close()\n\n# or, more concisely using with statement\nwith open(\"imageToSave.png\", \"wb\") as fh:\n    fh.write(img_data.decode('base64'))\n.encode().encode()# For both Python 2.7 and Python 3.x\nimport base64\nwith open(\"imageToSave.png\", \"wb\") as fh:\n    fh.write(base64.decodebytes(img_data))\n"}, {"idx": "webquery-test-12", "doc": "Understand Python swapping: why is a, b = b, a not always equivalent to b, a = a, b?", "code": "nums[i], nums[nums[i]-1] = nums[nums[i]-1], nums[i]\ntmp = nums[nums[i]-1], nums[i]\nnums[i] = tmp[0]\nnums[nums[i] - 1] = tmp[1]\nnums[nums[i]-1], nums[i] = nums[i], nums[nums[i]-1]\ntmp = nums[i], nums[nums[i]-1]\nnums[nums[i] - 1] = tmp[0]\nnums[i] = tmp[1]\nnums[i]nums[i]nums[i]"}, {"idx": "webquery-test-13", "doc": "When should I use ugettext_lazy?", "code": "gettext()gettext()gettext_lazygettext_lazygettextgettextgettext_noop()import logging\nfrom django.http import HttpResponse\nfrom django.utils.translation import gettext as _, gettext_noop as _noop\n\ndef view(request):\n    msg = _noop(\"An error has occurred\")\n    logging.error(msg)\n    return HttpResponse(_(msg))\n"}, {"idx": "webquery-test-14", "doc": "Get selected subcommand with argparse", "code": "&gt;&gt;&gt; parser = argparse.ArgumentParser()\n&gt;&gt;&gt; parser.add_argument('-g', '--global')\n&gt;&gt;&gt; subparsers = parser.add_subparsers(dest=\"subparser_name\") # this line changed\n&gt;&gt;&gt; foo_parser = subparsers.add_parser('foo')\n&gt;&gt;&gt; foo_parser.add_argument('-c', '--count')\n&gt;&gt;&gt; bar_parser = subparsers.add_parser('bar')\n&gt;&gt;&gt; args = parser.parse_args(['-g', 'xyz', 'foo', '--count', '42'])\n&gt;&gt;&gt; args\nNamespace(count='42', global='xyz', subparser_name='foo')\nset_defaults()"}, {"idx": "webquery-test-15", "doc": "Python 3 integer division", "code": "a = 1\nb = 2\nint_div  = a // b\n"}, {"idx": "webquery-test-16", "doc": "Why can't non-default arguments follow default arguments?", "code": "SyntaxErrordef fun1(a=\"who is you\", b=\"True\", x, y):\n...     print a,b,x,y\nfunc1(\"ok a\", \"ok b\", 1)  # Is 1 assigned to x or ?\nfunc1(1)                  # Is 1 assigned to a or ?\nfunc1(1, 2)               # ?\n&gt;&gt;&gt; def fun1(x, y, a=\"who is you\", b=\"True\"):\n...     print a,b,x,y\n... \n"}, {"idx": "webquery-test-17", "doc": "ImportError: No module named Crypto.Cipher", "code": "pippippippip uninstall pycrypto\neasy_install pycrypto\n"}, {"idx": "webquery-test-18", "doc": "How to send cookies in a post request with the Python Requests library?", "code": "import requests\n\ncookies = {'enwiki_session': '17ab96bd8ffbe8ca58a78657a918558'}\n\nr = requests.post('http://wikipedia.org', cookies=cookies)\n"}, {"idx": "webquery-test-19", "doc": "How to save S3 object to a file using boto3", "code": "s3_client = boto3.client('s3')\nopen('hello.txt').write('Hello, world!')\n\n# Upload the file to S3\ns3_client.upload_file('hello.txt', 'MyBucket', 'hello-remote.txt')\n\n# Download the file from S3\ns3_client.download_file('MyBucket', 'hello-remote.txt', 'hello2.txt')\nprint(open('hello2.txt').read())\ns3_client.download_files3_client.download_file"}, {"idx": "webquery-test-20", "doc": "Convert Year/Month/Day to Day of Year in Python", "code": "datetime.timetuple()datetime.timetuple()datetime.timetuple()datetime.timetuple()from datetime import datetime\nday_of_year = datetime.now().timetuple().tm_yday  # returns 1 for January 1st\n"}, {"idx": "webquery-test-1", "doc": "Reading an Excel file in python using pandas", "code": "ExcelFileExcelFile&gt;&gt;&gt; xl = pd.ExcelFile(\"dummydata.xlsx\")\n&gt;&gt;&gt; xl.sheet_names\n[u'Sheet1', u'Sheet2', u'Sheet3']\n&gt;&gt;&gt; df = xl.parse(\"Sheet1\")\n&gt;&gt;&gt; df.head()\n                  Tid  dummy1    dummy2    dummy3    dummy4    dummy5  \\\n0 2006-09-01 00:00:00       0  5.894611  0.605211  3.842871  8.265307   \n1 2006-09-01 01:00:00       0  5.712107  0.605211  3.416617  8.301360   \n2 2006-09-01 02:00:00       0  5.105300  0.605211  3.090865  8.335395   \n3 2006-09-01 03:00:00       0  4.098209  0.605211  3.198452  8.170187   \n4 2006-09-01 04:00:00       0  3.338196  0.605211  2.970015  7.765058   \n\n     dummy6  dummy7    dummy8    dummy9  \n0  0.623354       0  2.579108  2.681728  \n1  0.554211       0  7.210000  3.028614  \n2  0.567841       0  6.940000  3.644147  \n3  0.581470       0  6.630000  4.016155  \n4  0.595100       0  6.350000  3.974442  \n&gt;&gt;&gt; parsed = pd.io.parsers.ExcelFile.parse(xl, \"Sheet1\")\n&gt;&gt;&gt; parsed.columns\nIndex([u'Tid', u'dummy1', u'dummy2', u'dummy3', u'dummy4', u'dummy5', u'dummy6', u'dummy7', u'dummy8', u'dummy9'], dtype=object)\n"}, {"idx": "webquery-test-2", "doc": "Function for factorial in Python", "code": "math.factorialimport math\nmath.factorial(1000)\ndef factorial(n):\n    fact = 1\n    for num in range(2, n + 1):\n        fact *= num\n    return fact\ndef factorial(n):\n    if n &lt; 2:\n        return 1\n    else:\n        return n * factorial(n-1)\nn &gt;= 0n &gt;= 0n &gt;= 0n &gt;= 0n &gt;= 0"}, {"idx": "webquery-test-3", "doc": "How do I convert hex to decimal in Python?", "code": "s = \"6a48f82d8e828ce82b82\"\ni = int(s, 16)\nstr(i)\n"}, {"idx": "webquery-test-4", "doc": "What does \"mro()\" do?", "code": "&gt;&gt;&gt; class A(object): pass\n... \n&gt;&gt;&gt; A.__mro__\n(&lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)\n&gt;&gt;&gt; class B(A): pass\n... \n&gt;&gt;&gt; B.__mro__\n(&lt;class '__main__.B'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)\n&gt;&gt;&gt; class C(A): pass\n... \n&gt;&gt;&gt; C.__mro__\n(&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)\n&gt;&gt;&gt; \n__mro____mro__&gt;&gt;&gt; class D(B, C): pass\n... \n&gt;&gt;&gt; D.__mro__\n(&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)\n__mro____mro____mro____mro__"}, {"idx": "webquery-test-5", "doc": "Python Matplotlib figure title overlaps axes label when using twiny", "code": "plt.title(figure_title, y=1.08)\nplt.suptitle()plt.suptitle()"}, {"idx": "webquery-test-6", "doc": "Modular multiplicative inverse function in Python", "code": "y = pow(x, -1, p)\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, y, x = egcd(b % a, a)\n        return (g, x - (b // a) * y, y)\n\ndef modinv(a, m):\n    g, x, y = egcd(a, m)\n    if g != 1:\n        raise Exception('modular inverse does not exist')\n    else:\n        return x % m\n"}, {"idx": "webquery-test-7", "doc": "How to handle exceptions in a list comprehensions?", "code": "def catch(func, handle=lambda e : e, *args, **kwargs):\n    try:\n        return func(*args, **kwargs)\n    except Exception as e:\n        return handle(e)\neggs = (1,3,0,3,2)\n[catch(lambda : 1/egg) for egg in eggs]\n[1, 0, ('integer division or modulo by zero'), 0, 0]\n*args*argsdef catch(func, *args, handle=lambda e : e, **kwargs):\n    try:\n        return func(*args, **kwargs)\n    except Exception as e:\n        return handle(e)\nfrom math import log    \neggs = [1,3,0,3,2]\n[catch(log, egg) for egg in eggs]\n[0.0, 1.0986122886681098, ValueError('math domain error'), 1.0986122886681098, 0.6931471805599453]\nhandlehandle"}, {"idx": "webquery-test-8", "doc": "How to get a value from a Pandas DataFrame and not the index and object type", "code": "df[df.Letters=='C'].Letters.item()\n"}, {"idx": "webquery-test-9", "doc": "How to get the PATH environment-variable separator in Python?", "code": "os.pathsep"}, {"idx": "webquery-test-10", "doc": "How to source virtualenv activate in a Bash script", "code": "activate () {\n  . ../.env/bin/activate\n}\nalias activate=\". ../.env/bin/activate\"\n"}, {"idx": "webquery-test-11", "doc": "How do I detect whether sys.stdout is attached to terminal or not?", "code": "isattyif sys.stdout.isatty():\n    # You're running in a real terminal\nelse:\n    # You're being piped or redirected\npython -c \"import sys; print(sys.stdout.isatty())\"python -c \"import sys; print(sys.stdout.isatty())\""}, {"idx": "webquery-test-12", "doc": "How to re-raise an exception in nested try/except blocks?", "code": "raise etry:\n    something()\nexcept SomeError as e:\n    try:\n        plan_B()\n    except AlsoFailsError:\n        raise e  # or raise e from None - see below\nSomeErrorSomeErrorSomeErrorSomeErrorSomeErrorSomeErrorSomeErrorSomeErrorSomeErrorraisetry:\n    something()\nexcept SomeError:\n    t, v, tb = sys.exc_info()\n    try:\n        plan_B()\n    except AlsoFailsError:\n        raise t, v, tb\n"}, {"idx": "webquery-test-13", "doc": "Python string class like StringBuilder in C#?", "code": "def method6():\n  return ''.join([`num` for num in xrange(loop_count)])\n"}, {"idx": "webquery-test-14", "doc": "What exactly does += do?", "code": "+=+=+=+=+=+=__iadd____iadd____iadd____iadd__&gt;&gt;&gt; class Adder(object):\n        def __init__(self, num=0):\n            self.num = num\n\n        def __iadd__(self, other):\n            print 'in __iadd__', other\n            self.num = self.num + other\n            return self.num\n    \n&gt;&gt;&gt; a = Adder(2)\n&gt;&gt;&gt; a += 3\nin __iadd__ 3\n&gt;&gt;&gt; a\n5\n"}, {"idx": "webquery-test-15", "doc": "How do I install Python 3 on an AWS EC2 instance?", "code": "sudo yum list | grep python3\nsudo yum install python34 python34-pip\n"}, {"idx": "webquery-test-16", "doc": "How to remove all of the data in a table using Django", "code": "def delete_everything(self):\n    Reporter.objects.all().delete()\n\ndef drop_table(self):\n    cursor = connection.cursor()\n    table_name = self.model._meta.db_table\n    sql = \"DROP TABLE %s;\" % (table_name, )\n    cursor.execute(sql)\n"}, {"idx": "webquery-test-17", "doc": "How to find children of nodes using BeautifulSoup", "code": "li = soup.find('li', {'class': 'text'})\nchildren = li.findChildren(\"a\" , recursive=False)\nfor child in children:\n    print(child)\n"}, {"idx": "webquery-test-1", "doc": "How to check if all of the following items are in a list?", "code": "&lt;=set.issubsetset(['a', 'b']).issubset(['a', 'b', 'c'])\n"}, {"idx": "webquery-test-2", "doc": "How can I read a function's signature including default argument values?", "code": "import inspect\n\ndef foo(a, b, x='blah'):\n    pass\n\nprint(inspect.signature(foo))\n# (a, b, x='blah')\ninspect.signature()"}, {"idx": "webquery-test-3", "doc": "How do I pick 2 random items from a Python set?", "code": "randomimport random\nrandom.sample(set([1, 2, 3, 4, 5, 6]), 2)\n"}, {"idx": "webquery-test-4", "doc": "multiprocessing: How do I share a dict among multiple processes?", "code": "Managerfrom multiprocessing import Process, Manager\n\ndef f(d):\n    d[1] += '1'\n    d['2'] += 2\n\nif __name__ == '__main__':\n    manager = Manager()\n\n    d = manager.dict()\n    d[1] = '1'\n    d['2'] = 2\n\n    p1 = Process(target=f, args=(d,))\n    p2 = Process(target=f, args=(d,))\n    p1.start()\n    p2.start()\n    p1.join()\n    p2.join()\n\n    print d\n$ python mul.py \n{1: '111', '2': 6}\n"}, {"idx": "webquery-test-5", "doc": "Python group by", "code": "&gt;&gt;&gt; input = [('11013331', 'KAT'), ('9085267', 'NOT'), ('5238761', 'ETH'), ('5349618', 'ETH'), ('11788544', 'NOT'), ('962142', 'ETH'), ('7795297', 'ETH'), ('7341464', 'ETH'), ('9843236', 'KAT'), ('5594916', 'ETH'), ('1550003', 'ETH')]\n&gt;&gt;&gt; from collections import defaultdict\n&gt;&gt;&gt; res = defaultdict(list)\n&gt;&gt;&gt; for v, k in input: res[k].append(v)\n...\n&gt;&gt;&gt; [{'type':k, 'items':v} for k,v in res.items()]\n[{'items': ['9085267', '11788544'], 'type': 'NOT'}, {'items': ['5238761', '5349618', '962142', '7795297', '7341464', '5594916', '1550003'], 'type': 'ETH'}, {'items': ['11013331', '9843236'], 'type': 'KAT'}]\n&gt;&gt;&gt; sorted_input = sorted(input, key=itemgetter(1))\n&gt;&gt;&gt; groups = groupby(sorted_input, key=itemgetter(1))\n&gt;&gt;&gt; [{'type':k, 'items':[x[0] for x in v]} for k, v in groups]\n[{'items': ['5238761', '5349618', '962142', '7795297', '7341464', '5594916', '1550003'], 'type': 'ETH'}, {'items': ['11013331', '9843236'], 'type': 'KAT'}, {'items': ['9085267', '11788544'], 'type': 'NOT'}]\n&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; res = OrderedDict()\n&gt;&gt;&gt; for v, k in input:\n...   if k in res: res[k].append(v)\n...   else: res[k] = [v]\n... \n&gt;&gt;&gt; [{'type':k, 'items':v} for k,v in res.items()]\n[{'items': ['11013331', '9843236'], 'type': 'KAT'}, {'items': ['9085267', '11788544'], 'type': 'NOT'}, {'items': ['5238761', '5349618', '962142', '7795297', '7341464', '5594916', '1550003'], 'type': 'ETH'}]\n"}, {"idx": "webquery-test-6", "doc": "What exactly is file.flush() doing?", "code": "flushflushflushos.fsync"}, {"idx": "webquery-test-7", "doc": "Python Pandas: How to read only first n rows of CSV files in?", "code": "read_csv(..., nrows=999999)\nread_csv(..., skiprows=1000000, nrows=999999)\n"}, {"idx": "webquery-test-8", "doc": "Why do two identical lists have a different memory footprint?", "code": "[None] * 10&gt;&gt;&gt; sys.getsizeof([None]*15)\n184\n&gt;&gt;&gt; sys.getsizeof([None]*16)\n192\n&gt;&gt;&gt; sys.getsizeof([None for _ in range(15)])\n192\n&gt;&gt;&gt; sys.getsizeof([None for _ in range(16)])\n192\n&gt;&gt;&gt; sys.getsizeof([None for _ in range(17)])\n264\n"}, {"idx": "webquery-test-9", "doc": "Using a string variable as a variable name", "code": "exec&gt;&gt;&gt; foo = \"bar\"\n&gt;&gt;&gt; exec(foo + \" = 'something else'\")\n&gt;&gt;&gt; print bar\nsomething else\n&gt;&gt;&gt; \n"}, {"idx": "webquery-test-10", "doc": "Making heatmap from pandas DataFrame", "code": "heatmap()import numpy as np \nfrom pandas import DataFrame\nimport seaborn as sns\n%matplotlib inline\n\nIndex= ['aaa', 'bbb', 'ccc', 'ddd', 'eee']\nCols = ['A', 'B', 'C', 'D']\ndf = DataFrame(abs(np.random.randn(5, 4)), index=Index, columns=Cols)\n\nsns.heatmap(df, annot=True)\n%matplotlib"}, {"idx": "webquery-test-11", "doc": "Open document with default OS application in Python, both in Windows and Mac OS", "code": "subprocesssubprocessimport subprocess, os, platform\nif platform.system() == 'Darwin':       # macOS\n    subprocess.call(('open', filepath))\nelif platform.system() == 'Windows':    # Windows\n    os.startfile(filepath)\nelse:                                   # linux variants\n    subprocess.call(('xdg-open', filepath))\nsubprocess.call()subprocess.call()subprocess.call()"}, {"idx": "webquery-test-12", "doc": "How can I see if there's an available and active network connection in Python?", "code": "import urllib2\n\ndef internet_on():\n    try:\n        urllib2.urlopen('http://216.58.192.142', timeout=1)\n        return True\n    except urllib2.URLError as err: \n        return False\nhttp://216.58.192.142urllib_request.urlopen% dig google.com  +trace \n...\ngoogle.com.     300 IN  A   216.58.192.142\n"}, {"idx": "webquery-test-13", "doc": "How can I make pandas dataframe column headers all lowercase?", "code": "data.columns = map(str.lower, data.columns)\ndata.columns = [x.lower() for x in data.columns]\n&gt;&gt;&gt; data = pd.DataFrame({'A':range(3), 'B':range(3,0,-1), 'C':list('abc')})\n&gt;&gt;&gt; data\n   A  B  C\n0  0  3  a\n1  1  2  b\n2  2  1  c\n&gt;&gt;&gt; data.columns = map(str.lower, data.columns)\n&gt;&gt;&gt; data\n   a  b  c\n0  0  3  a\n1  1  2  b\n2  2  1  c\n"}, {"idx": "webquery-test-14", "doc": "Why were pandas merges in python faster than data.table merges in R in 2012?", "code": "data.tabledata.table"}, {"idx": "webquery-test-15", "doc": "Replace first occurrence of string in Python", "code": "&gt;&gt;&gt; u'longlongTESTstringTEST'.replace('TEST', '?', 1)\nu'longlong?stringTEST'\n"}, {"idx": "webquery-test-16", "doc": "Saving images in Python at a very high quality", "code": "plt.savefig('destination_path.eps', format='eps')\ndpiplt.savefigplt.savefigax.view_init(elev=elevation_angle, azim=azimuthal_angle)\nelevation_angleelevation_angle"}, {"idx": "webquery-test-17", "doc": "How can I find the first occurrence of a sub-string in a python string?", "code": "find()&gt;&gt;&gt; s = \"the dude is a cool dude\"\n&gt;&gt;&gt; s.find('dude')\n4\n"}, {"idx": "webquery-test-1", "doc": "pandas how to check dtype for all columns in a dataframe?", "code": "dtypedtypedataframe.column.dtype\ndataframe.dtypes\nimport pandas as pd\ndf = pd.DataFrame({'A': [1,2,3], 'B': [True, False, False], 'C': ['a', 'b', 'c']})\n\ndf.A.dtype\n# dtype('int64')\ndf.B.dtype\n# dtype('bool')\ndf.C.dtype\n# dtype('O')\n\ndf.dtypes\n#A     int64\n#B      bool\n#C    object\n#dtype: object\n"}, {"idx": "webquery-test-2", "doc": "matplotlib get ylim values", "code": "axes.get_ylim()axes.get_ylim()"}, {"idx": "webquery-test-3", "doc": "Python pandas: fill a dataframe row by row", "code": "df['y'].loc.ix.ixIn [6]: import pandas as pd\n\nIn [7]: df = pd.DataFrame(columns=['a','b','c','d'], index=['x','y','z'])\n\nIn [8]: df.loc['y'] = pd.Series({'a':1, 'b':5, 'c':2, 'd':3})\n\nIn [9]: df\nOut[9]: \n     a    b    c    d\nx  NaN  NaN  NaN  NaN\ny    1    5    2    3\nz  NaN  NaN  NaN  NaN\n"}, {"idx": "webquery-test-4", "doc": "Python ValueError: too many values to unpack", "code": "self.materialsself.materialsself.materialsself.materialsself.materialsself.materialstupletupletuplefor m in self.materials.itervalues():\ndict.values()for m in self.materials.values():\n"}, {"idx": "webquery-test-5", "doc": "How to remove multiple items from a list in just one statement?", "code": "item_list = ['item', 5, 'foo', 3.14, True]\nitem_list = [e for e in item_list if e not in ('item', 5)]\nitem_list = ['item', 5, 'foo', 3.14, True]\nnew_list = []\nfor e in item_list:\n    if e not in ('item', 5):\n        new_list.append(e)\nitem_list = new_list\n('item', 5)('item', 5)('item', 5)unwanted = {'item', 5}\nitem_list = [e for e in item_list if e not in unwanted]\n"}, {"idx": "webquery-test-6", "doc": "Add column with constant value to pandas dataframe", "code": "df['new'] = 0df = pd.DataFrame('x', index=range(4), columns=list('ABC'))\ndf\n\n   A  B  C\n0  x  x  x\n1  x  x  x\n2  x  x  x\n3  x  x  x\ndf['new'] = 'y'\n# Same as,\n# df.loc[:, 'new'] = 'y'\ndf\n\n   A  B  C new\n0  x  x  x   y\n1  x  x  x   y\n2  x  x  x   y\n3  x  x  x   y\nobjectobjectdf.assign(new=0)DataFrame.assigndf.assign(new='y')\n\n   A  B  C new\n0  x  x  x   y\n1  x  x  x   y\n2  x  x  x   y\n3  x  x  x   y\nc = ['new1', 'new2', ...]\ndf.assign(**dict.fromkeys(c, 'y'))\n\n   A  B  C new1 new2\n0  x  x  x    y    y\n1  x  x  x    y    y\n2  x  x  x    y    y\n3  x  x  x    y    y\nassignc = {'new1': 'w', 'new2': 'y', 'new3': 'z'}\ndf.assign(**c)\n\n   A  B  C new1 new2 new3\n0  x  x  x    w    y    z\n1  x  x  x    w    y    z\n2  x  x  x    w    y    z\n3  x  x  x    w    y    z\n"}, {"idx": "webquery-test-7", "doc": "How to convert a dataframe to a dictionary", "code": "lakeslakesarea_dict = dict(zip(lakes.id, lakes.value))\n"}, {"idx": "webquery-test-8", "doc": "SQLAlchemy: cascade delete", "code": "ChildParentchildren = relationship(\"Child\", cascade=\"all,delete\", backref=\"parent\")\n\"Child\"delete-orphandelete-orphandelete-orphanChildparent = relationship(Parent, backref=backref(\"children\", cascade=\"all,delete\"))\nfrom sqlalchemy.orm import backref"}, {"idx": "webquery-test-9", "doc": "Executing periodic actions", "code": "foo()foo()foo()foo()foo()foo()import time, threading\ndef foo():\n    print(time.ctime())\n    threading.Timer(10, foo).start()\n\nfoo()\n\n#output:\n#Thu Dec 22 14:46:08 2011\n#Thu Dec 22 14:46:18 2011\n#Thu Dec 22 14:46:28 2011\n#Thu Dec 22 14:46:38 2011\n"}, {"idx": "webquery-test-10", "doc": "Why does @foo.setter in Python not work for me?", "code": "objectobjectclass testDec(object):\n\n    @property\n    def x(self): \n        print 'called getter'\n        return self._x\n\n    @x.setter\n    def x(self, value): \n        print 'called setter'\n        self._x = value\n&gt;&gt;&gt; k = testDec()\n&gt;&gt;&gt; k.x\ncalled getter\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/devel/class_test.py\", line 6, in x\n    return self._x\nAttributeError: 'testDec' object has no attribute '_x'\n&gt;&gt;&gt; k.x = 5\ncalled setter\n&gt;&gt;&gt; k.x\ncalled getter\n5\n&gt;&gt;&gt; \n@x.setter\ndef x_setter(self, value):\n    ...\nname 'x' is not defined"}, {"idx": "webquery-test-11", "doc": "Check list of words in another string", "code": "if any(word in 'some one long two phrase three' for word in list_):\n"}, {"idx": "webquery-test-12", "doc": "Enable access control on simple HTTP server", "code": "SimpleHTTPRequestHandlersimple-cors-http-server.pypython simple-cors-http-server.pysimple-cors-http-server.pySimpleHTTPRequestHandlerSimpleHTTPRequestHandlerSimpleHTTPRequestHandler#!/usr/bin/env python3\nfrom http.server import HTTPServer, SimpleHTTPRequestHandler, test\nimport sys\n\nclass CORSRequestHandler (SimpleHTTPRequestHandler):\n    def end_headers (self):\n        self.send_header('Access-Control-Allow-Origin', '*')\n        SimpleHTTPRequestHandler.end_headers(self)\n\nif __name__ == '__main__':\n    test(CORSRequestHandler, HTTPServer, port=int(sys.argv[1]) if len(sys.argv) &gt; 1 else 8000)\nSimpleHTTPServer.SimpleHTTPRequestHandlerSimpleHTTPServer.SimpleHTTPRequestHandler#!/usr/bin/env python2\nfrom SimpleHTTPServer import SimpleHTTPRequestHandler\nimport BaseHTTPServer\n\nclass CORSRequestHandler (SimpleHTTPRequestHandler):\n    def end_headers (self):\n        self.send_header('Access-Control-Allow-Origin', '*')\n        SimpleHTTPRequestHandler.end_headers(self)\n\nif __name__ == '__main__':\n    BaseHTTPServer.test(CORSRequestHandler, BaseHTTPServer.HTTPServer)\n#!/usr/bin/env python\ntry:\n    # Python 3\n    from http.server import HTTPServer, SimpleHTTPRequestHandler, test as test_orig\n    import sys\n    def test (*args):\n        test_orig(*args, port=int(sys.argv[1]) if len(sys.argv) &gt; 1 else 8000)\nexcept ImportError: # Python 2\n    from BaseHTTPServer import HTTPServer, test\n    from SimpleHTTPServer import SimpleHTTPRequestHandler\n\nclass CORSRequestHandler (SimpleHTTPRequestHandler):\n    def end_headers (self):\n        self.send_header('Access-Control-Allow-Origin', '*')\n        SimpleHTTPRequestHandler.end_headers(self)\n\nif __name__ == '__main__':\n    test(CORSRequestHandler, HTTPServer)\n"}, {"idx": "webquery-test-13", "doc": "In Python, how do I read the exif data for an image?", "code": "_getexif()import PIL.Image\nimg = PIL.Image.open('img.jpg')\nexif_data = img._getexif()\nimport PIL.ExifTags\nexif = {\n    PIL.ExifTags.TAGS[k]: v\n    for k, v in img._getexif().items()\n    if k in PIL.ExifTags.TAGS\n}\n"}, {"idx": "webquery-test-14", "doc": "Adding headers to requests module", "code": "url = 'https://api.github.com/some/endpoint'\npayload = {'some': 'data'}\nheaders = {'content-type': 'application/json'}\n\nr = requests.post(url, data=json.dumps(payload), headers=headers)\n.get.getheaders = {'foobar': 'raboof'}\nrequests.get('http://himom.com', headers=headers)\n"}, {"idx": "webquery-test-15", "doc": "Read a zipped file as a pandas DataFrame", "code": "read_csvdf = pd.read_csv('filename.zip')\ndf = pd.read_csv('filename.zip', compression='zip', header=0, sep=',', quotechar='\"')\n"}, {"idx": "webquery-test-16", "doc": "Flask at first run: Do not use the development server in a production environment", "code": "waitressfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    return \"&lt;h1&gt;Hello!&lt;/h1&gt;\"\n\nif __name__ == \"__main__\":\n    from waitress import serve\n    serve(app, host=\"0.0.0.0\", port=8080)\n$ python hello.py\nwaitress-servewaitress-servewaitress-servewaitress-servewaitress-serve"}, {"idx": "webquery-test-17", "doc": "Extracting double-digit months and days from a Python date", "code": "In [1]: import datetime\n\nIn [2]: d = datetime.date.today()\n\nIn [3]: type(d.month)\nOut[3]: &lt;type 'int'&gt;\n\nIn [4]: type(d.day)\nOut[4]: &lt;type 'int'&gt;\nIn [5]: '{:02d}'.format(d.month)\nOut[5]: '03'\n\nIn [6]: '%02d' % d.month\nOut[6]: '03'\n\nIn [7]: d.strftime('%m')\nOut[7]: '03'\n\nIn [8]: f'{d.month:02d}'\nOut[8]: '03'\n"}, {"idx": "webquery-test-18", "doc": "Removing duplicates from a list of lists", "code": "&gt;&gt;&gt; k = [[1, 2], [4], [5, 6, 2], [1, 2], [3], [4]]\n&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; k.sort()\n&gt;&gt;&gt; list(k for k,_ in itertools.groupby(k))\n[[1, 2], [3], [4], [5, 6, 2]]\nitertoolstimeittimeitimport itertools\n\nk = [[1, 2], [4], [5, 6, 2], [1, 2], [3], [4]]\n\ndef doset(k, map=map, list=list, set=set, tuple=tuple):\n  return map(list, set(map(tuple, k)))\n\ndef dosort(k, sorted=sorted, xrange=xrange, len=len):\n  ks = sorted(k)\n  return [ks[i] for i in xrange(len(ks)) if i == 0 or ks[i] != ks[i-1]]\n\ndef dogroupby(k, sorted=sorted, groupby=itertools.groupby, list=list):\n  ks = sorted(k)\n  return [i for i, _ in itertools.groupby(ks)]\n\ndef donewk(k):\n  newk = []\n  for i in k:\n    if i not in newk:\n      newk.append(i)\n  return newk\n\n# sanity check that all functions compute the same result and don't alter k\nif __name__ == '__main__':\n  savek = list(k)\n  for f in doset, dosort, dogroupby, donewk:\n    resk = f(k)\n    assert k == savek\n    print '%10s %s' % (f.__name__, sorted(resk))\npython nodup.py$ python -mtimeit -s'import nodup' 'nodup.doset(nodup.k)'\n100000 loops, best of 3: 11.7 usec per loop\n$ python -mtimeit -s'import nodup' 'nodup.dosort(nodup.k)'\n100000 loops, best of 3: 9.68 usec per loop\n$ python -mtimeit -s'import nodup' 'nodup.dogroupby(nodup.k)'\n100000 loops, best of 3: 8.74 usec per loop\n$ python -mtimeit -s'import nodup' 'nodup.donewk(nodup.k)'\n100000 loops, best of 3: 4.44 usec per loop\n$ python -mtimeit -s'import nodup' 'nodup.donewk([[i] for i in range(12)])'\n10000 loops, best of 3: 25.4 usec per loop\n$ python -mtimeit -s'import nodup' 'nodup.dogroupby([[i] for i in range(12)])'\n10000 loops, best of 3: 23.7 usec per loop\n$ python -mtimeit -s'import nodup' 'nodup.doset([[i] for i in range(12)])'\n10000 loops, best of 3: 31.3 usec per loop\n$ python -mtimeit -s'import nodup' 'nodup.dosort([[i] for i in range(12)])'\n10000 loops, best of 3: 25 usec per loop\nk"}, {"idx": "webquery-test-19", "doc": "How do I call setattr() on the current module?", "code": "import sys\n\nthismodule = sys.modules[__name__]\n\nsetattr(thismodule, name, value)\nsetattrglobals()[name] = value\nvars()[name] = value\nvars()"}, {"idx": "webquery-test-20", "doc": "Creating functions (or lambdas) in a loop (or comprehension)", "code": "iiidef f():def f():def f(i=i):\n    return i\niiiiiiifdef make_f(i):\n    def f():\n        return i\n    return f\nf = make_f(i)f = make_f(i)"}, {"idx": "webquery-test-21", "doc": "What is the 'pythonic' equivalent to the 'fold' function from functional programming?", "code": "sumsumsumsumdef product(xs):\n    return reduce(operator.mul, xs, 1)\nreducereducereducereduce"}, {"idx": "webquery-test-1", "doc": "How does tf.app.run() work?", "code": "if __name__ == \"__main__\":\ntf.app.run()\napp.pydef run(main=None, argv=None):\n  \"\"\"Runs the program with an optional 'main' function and 'argv' list.\"\"\"\n  f = flags.FLAGS\n\n  # Extract the args from the optional `argv` list.\n  args = argv[1:] if argv else None\n\n  # Parse the known flags from that list, or from the command\n  # line otherwise.\n  # pylint: disable=protected-access\n  flags_passthrough = f._parse_flags(args=args)\n  # pylint: enable=protected-access\n\n  main = main or sys.modules['__main__'].main\n\n  # Call the main function, passing through any arguments\n  # to the final program.\n  sys.exit(main(sys.argv[:1] + flags_passthrough))\nflags_passthrough = f._parse_flags(args=args)\npython my_model.py --data_dir='...' --max_iteration=10000python my_model.py --data_dir='...' --max_iteration=10000main = main or sys.modules['__main__'].main\nmainmainmainmainmainmainmainmainmainmainsys.exit(main(sys.argv[:1] + flags_passthrough))\nmain(argv)main(argv)"}, {"idx": "webquery-test-2", "doc": "Python assigning multiple variables to same value? list behavior", "code": "aaaaNotorious B.I.G.Notorious B.I.G.Notorious B.I.G.Notorious B.I.G.Notorious B.I.G.Notorious B.I.G.is&gt;&gt;&gt; a=b=c=[0,3,5]\n&gt;&gt;&gt; a is b\nTrue\nd=e=f=3\ne=4\nprint('f:',f)\nprint('e:',e)\neeeea[0]a[0]a[0]a[0]a[0]idid&gt;&gt;&gt; a=b=c=[0,3,5]\n&gt;&gt;&gt; id(a)\n4473392520\n&gt;&gt;&gt; id(b)\n4473392520\n&gt;&gt;&gt; id(a[0])\n4297261120\n&gt;&gt;&gt; id(b[0])\n4297261120\n\n&gt;&gt;&gt; a[0] = 1\n&gt;&gt;&gt; id(a)\n4473392520\n&gt;&gt;&gt; id(b)\n4473392520\n&gt;&gt;&gt; id(a[0])\n4297261216\n&gt;&gt;&gt; id(b[0])\n4297261216\na[0]a[0]a[0]a[0]a[0]=1a[0]=1a[0]=1a[0]=1a = b = c =  10a = b = c = [1, 2, 3]intintintintintintintintintintintintintintint"}, {"idx": "webquery-test-3", "doc": "sqlalchemy.exc.NoSuchModuleError: Can't load plugin: sqlalchemy.dialects:postgres", "code": "postgresql://postgresql://postgresql://"}, {"idx": "webquery-test-4", "doc": "Python debugging tips", "code": "pdb.set_trace()&gt;&gt;&gt; import pdb\n&gt;&gt;&gt; a=\"a string\"\n&gt;&gt;&gt; pdb.set_trace()\n--Return--\n&gt; &lt;stdin&gt;(1)&lt;module&gt;()-&gt;None\n(Pdb) p a\n'a string'\n(Pdb)\nccc"}, {"idx": "webquery-test-5", "doc": "Join a list of strings in python and wrap each string in quotation marks", "code": "&gt;&gt;&gt; words = ['hello', 'world', 'you', 'look', 'nice']\n&gt;&gt;&gt; ', '.join(f'\"{w}\"' for w in words)\n'\"hello\", \"world\", \"you\", \"look\", \"nice\"'\n&gt;&gt;&gt; words = ['hello', 'world', 'you', 'look', 'nice']\n&gt;&gt;&gt; ', '.join('\"{0}\"'.format(w) for w in words)\n'\"hello\", \"world\", \"you\", \"look\", \"nice\"'\n"}, {"idx": "webquery-test-6", "doc": "What is the difference between isinstance('aaa', basestring) and isinstance('aaa', str)?", "code": "strstr          object\n             |\n             |\n         basestring\n            / \\\n           /   \\\n         str  unicode\nstrstr&gt;&gt;&gt; string1 = \"I am a plain string\"\n&gt;&gt;&gt; string2 = u\"I am a unicode string\"\n&gt;&gt;&gt; isinstance(string1, str)\nTrue\n&gt;&gt;&gt; isinstance(string2, str)\nFalse\n&gt;&gt;&gt; isinstance(string1, unicode)\nFalse\n&gt;&gt;&gt; isinstance(string2, unicode)\nTrue\n&gt;&gt;&gt; isinstance(string1, basestring)\nTrue\n&gt;&gt;&gt; isinstance(string2, basestring)\nTrue\n"}, {"idx": "webquery-test-7", "doc": "`staticmethod` and `abc.abstractmethod`: Will it blend?", "code": "@staticmethod@staticmethod@staticmethod\n@abstractmethod\ndef my_abstract_staticmethod(...):\n@abstractstatic"}, {"idx": "webquery-test-8", "doc": "How can I get dict from sqlite query?", "code": "import sqlite3\n\ndef dict_factory(cursor, row):\n    d = {}\n    for idx, col in enumerate(cursor.description):\n        d[col[0]] = row[idx]\n    return d\n\ncon = sqlite3.connect(\":memory:\")\ncon.row_factory = dict_factory\ncur = con.cursor()\ncur.execute(\"select 1 as a\")\nprint cur.fetchone()[\"a\"]\ncon = sqlite3.connect(\u2026)\ncon.row_factory = sqlite3.Row   #   add this row\ncursor = con.cursor()\n"}, {"idx": "webquery-test-9", "doc": "Hiding a password in a python script (insecure obfuscation only)", "code": "&gt;&gt;&gt; import base64\n&gt;&gt;&gt;  print(base64.b64encode(\"password\".encode(\"utf-8\")))\ncGFzc3dvcmQ=\n&gt;&gt;&gt; print(base64.b64decode(\"cGFzc3dvcmQ=\").decode(\"utf-8\"))\npassword\n"}, {"idx": "webquery-test-10", "doc": "How to capture botocore's NoSuchKey exception?", "code": "from botocore.exceptions import ClientError\n\ntry:\n    response = self.client.get_object(Bucket=bucket, Key=key)\n    return json.loads(response[\"Body\"].read())\nexcept ClientError as ex:\n    if ex.response['Error']['Code'] == 'NoSuchKey':\n        logger.info('No object found - returning empty')\n        return dict()\n    else:\n        raise\n"}, {"idx": "webquery-test-11", "doc": "How to select all columns whose names start with X in a pandas DataFrame", "code": "In [28]:\n\nfilter_col = [col for col in df if col.startswith('foo')]\nfilter_col\nOut[28]:\n['foo.aa', 'foo.bars', 'foo.fighters', 'foo.fox', 'foo.manchu']\nIn [29]:\n\ndf[filter_col]\nOut[29]:\n   foo.aa  foo.bars  foo.fighters  foo.fox foo.manchu\n0     1.0         0             0        2         NA\n1     2.1         0             1        4          0\n2     NaN         0           NaN        1          0\n3     4.7         0             0        0          0\n4     5.6         0             0        0          0\n5     6.8         1             0        5          0\nstartswithIn [33]:\n\ndf[df.columns[pd.Series(df.columns).str.startswith('foo')]]\nOut[33]:\n   foo.aa  foo.bars  foo.fighters  foo.fox foo.manchu\n0     1.0         0             0        2         NA\n1     2.1         0             1        4          0\n2     NaN         0           NaN        1          0\n3     4.7         0             0        0          0\n4     5.6         0             0        0          0\n5     6.8         1             0        5          0\n==1In [36]:\n\ndf[df[df.columns[pd.Series(df.columns).str.startswith('foo')]]==1]\nOut[36]:\n   bar.baz  foo.aa  foo.bars  foo.fighters  foo.fox foo.manchu nas.foo\n0      NaN       1       NaN           NaN      NaN        NaN     NaN\n1      NaN     NaN       NaN             1      NaN        NaN     NaN\n2      NaN     NaN       NaN           NaN        1        NaN     NaN\n3      NaN     NaN       NaN           NaN      NaN        NaN     NaN\n4      NaN     NaN       NaN           NaN      NaN        NaN     NaN\n5      NaN     NaN         1           NaN      NaN        NaN     NaN\nIn [72]:\n\ndf.loc[df[df[df.columns[pd.Series(df.columns).str.startswith('foo')]] == 1].dropna(how='all', axis=0).index]\nOut[72]:\n   bar.baz  foo.aa  foo.bars  foo.fighters  foo.fox foo.manchu nas.foo\n0      5.0     1.0         0             0        2         NA      NA\n1      5.0     2.1         0             1        4          0       0\n2      6.0     NaN         0           NaN        1          0       1\n5      6.8     6.8         1             0        5          0       0\n"}, {"idx": "webquery-test-12", "doc": "Deleting all files in a directory with Python", "code": "os.listdiros.listdirimport os\n\nfilelist = [ f for f in os.listdir(mydir) if f.endswith(\".bak\") ]\nfor f in filelist:\n    os.remove(os.path.join(mydir, f))\nfor f in os.listdir(mydir):\n    if not f.endswith(\".bak\"):\n        continue\n    os.remove(os.path.join(mydir, f))\nglob.globimport glob, os, os.path\n\nfilelist = glob.glob(os.path.join(mydir, \"*.bak\"))\nfor f in filelist:\n    os.remove(f)\nos.chdir"}, {"idx": "webquery-test-13", "doc": "How to filter objects for count annotation in Django?", "code": "filterfrom django.db.models import Q, Count\nevents = Event.objects.annotate(\n    paid_participants=Count('participants', filter=Q(participants__is_paid=True))\n)\n"}, {"idx": "webquery-test-14", "doc": "How to customize a requirements.txt for multiple environments?", "code": "`-- django_project_root\n|-- requirements\n|   |-- common.txt\n|   |-- dev.txt\n|   `-- prod.txt\n`-- requirements.txt\n# Contains requirements common to all environments\nreq1==1.0\nreq2==1.0\nreq3==1.0\n...\n# Specifies only dev-specific requirements\n# But imports the common ones too\n-r common.txt\ndev_req==1.0\n...\n# Same for prod...\n-r common.txt\nprod_req==1.0\n...\npip install -r requirements/dev.txt\npip install -r requirements/prod.txt\n# Mirrors prod\n-r requirements/prod.txt\n"}, {"idx": "webquery-test-15", "doc": "how to iterate through dictionary in a dictionary in django template?", "code": "data = {'a': [ [1, 2] ], 'b': [ [3, 4] ],'c':[ [5,6]] }data.items()data.items()data.items()data.items()&lt;table&gt;\n    &lt;tr&gt;\n        &lt;td&gt;a&lt;/td&gt;\n        &lt;td&gt;b&lt;/td&gt;\n        &lt;td&gt;c&lt;/td&gt;\n    &lt;/tr&gt;\n\n    {% for key, values in data.items %}\n    &lt;tr&gt;\n        &lt;td&gt;{{key}}&lt;/td&gt;\n        {% for v in values[0] %}\n        &lt;td&gt;{{v}}&lt;/td&gt;\n        {% endfor %}\n    &lt;/tr&gt;\n    {% endfor %}\n&lt;/table&gt;\nreturn render_to_response('some_page.html', {'data': sorted(data.items())}){% for key, value in data %}\n    &lt;tr&gt;\n        &lt;td&gt; Key: {{ key }} &lt;/td&gt; \n        &lt;td&gt; Value: {{ value }} &lt;/td&gt;\n    &lt;/tr&gt;\n{% endfor %}\n"}, {"idx": "webquery-test-16", "doc": "Group by & count function in sqlalchemy", "code": "group_bygroup_byfrom sqlalchemy import func\nsession.query(Table.column, \n   func.count(Table.column)).group_by(Table.column).all()\n"}, {"idx": "webquery-test-17", "doc": "sqlalchemy flush() and get inserted id?", "code": "f = Foo(bar=x)\nsession.add(f)\nsession.flush()\n# At this point, the object f has been pushed to the DB, \n# and has been automatically assigned a unique primary key id\n\nf.id\n# is None\n\nsession.refresh(f)\n# refresh updates given object in the session with its state in the DB\n# (and can also only refresh certain attributes - search for documentation)\n\nf.id\n# is the automatically assigned primary key ID given in the database.\n"}, {"idx": "webquery-test-18", "doc": "How do I find the length (or dimensions, size) of a numpy matrix in python?", "code": "shapeA.shape\nmatrixmatrixmatrix"}, {"idx": "webquery-test-19", "doc": "How to save traceback / sys.exc_info() values in a variable?", "code": "&gt;&gt;&gt; import traceback\n&gt;&gt;&gt; try:\n...   int('k')\n... except:\n...   var = traceback.format_exc()\n... \n&gt;&gt;&gt; print var\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 2, in &lt;module&gt;\nValueError: invalid literal for int() with base 10: 'k'\n"}, {"idx": "webquery-test-20", "doc": "Sorting a set of values", "code": "sss&gt;&gt;&gt; s = set(['0.000000000', '0.009518000', '10.277200999', '0.030810999', '0.018384000', '4.918560000'])\n&gt;&gt;&gt; sorted(s)\n['0.000000000', '0.009518000', '0.018384000', '0.030810999', '10.277200999', '4.918560000']\nsortedsortedsortedsortedsortedkey&gt;&gt;&gt; sorted(s, key=float)\n['0.000000000', '0.009518000', '0.018384000', '0.030810999', '4.918560000', '10.277200999']\n"}, {"idx": "webquery-test-21", "doc": "Update row values where certain condition is met in pandas", "code": "locdf1.loc[df1['stream'] == 2, ['feat','another_feat']] = 'aaaa'\nprint df1\n   stream        feat another_feat\na       1  some_value   some_value\nb       2        aaaa         aaaa\nc       2        aaaa         aaaa\nd       3  some_value   some_value\ndf1.loc[df1['stream'] == 2, 'feat'] = 10\nprint df1\n   stream        feat another_feat\na       1  some_value   some_value\nb       2          10   some_value\nc       2          10   some_value\nd       3  some_value   some_value\nnumpy.wheredf1['feat'] = np.where(df1['stream'] == 2, 10,20)\nprint df1\n   stream  feat another_feat\na       1    20   some_value\nb       2    10   some_value\nc       2    10   some_value\nd       3    20   some_value\nstreamstreamprint df1\n   stream  feat  another_feat\na       1     4             5\nb       2     4             5\nc       2     2             9\nd       3     1             7\n\n#filter columns all without stream\ncols = [col for col in df1.columns if col != 'stream']\nprint cols\n['feat', 'another_feat']\n\ndf1.loc[df1['stream'] == 2, cols ] = df1 / 2\nprint df1\n   stream  feat  another_feat\na       1   4.0           5.0\nb       2   2.0           2.5\nc       2   1.0           4.5\nd       3   1.0           7.0\nnumpy.wherenumpy.wheredf0 = pd.DataFrame({'Col':[5,0,-6]})\n\ndf0['New Col1'] = np.where((df0['Col'] &gt; 0), 'Increasing', \n                          np.where((df0['Col'] &lt; 0), 'Decreasing', 'No Change'))\n\ndf0['New Col2'] = np.select([df0['Col'] &gt; 0, df0['Col'] &lt; 0],\n                            ['Increasing',  'Decreasing'], \n                            default='No Change')\n\nprint (df0)\n   Col    New Col1    New Col2\n0    5  Increasing  Increasing\n1    0   No Change   No Change\n2   -6  Decreasing  Decreasing\n"}, {"idx": "webquery-test-22", "doc": "Seaborn showing scientific notation in heatmap for 3-digit numbers", "code": "fmt='.2g'fmt='.2g'sns.heatmap(table2,annot=True,cmap='Blues', fmt='g')\n"}, {"idx": "webquery-test-23", "doc": "Rotating a two-dimensional array in Python", "code": "zip()zip()list(zip(*original[::-1]))\n[::-1][::-1][::-1][::-1][::-1][::-1][::-1][ [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9] ]\n[ [7, 8, 9],\n  [4, 5, 6],\n  [1, 2, 3] ]\nzipzip([7, 8, 9], [4, 5, 6], [1, 2, 3])\nzip()[(7, 4, 1), \n (8, 5, 2), \n (9, 6, 3)]\nzipzipzipzipzipziprotated = list(reversed(list(zip(*original))))\nreversed()reversed()rotated = list(zip(*original))[::-1]\n"}, {"idx": "webquery-test-24", "doc": "How do I write a \"tab\" in Python?", "code": "f = open(filename, 'w')\nf.write(\"hello\\talex\")\n\\t"}, {"idx": "webquery-test-25", "doc": "subtract two times in python", "code": "from datetime import datetime, date\n\ndatetime.combine(date.today(), exit) - datetime.combine(date.today(), enter)\ncombine"}, {"idx": "webquery-test-1", "doc": "How can I set the aspect ratio in matplotlib?", "code": "import matplotlib.pyplot as plt\nimport numpy as np\n\ndef forceAspect(ax,aspect=1):\n    im = ax.get_images()\n    extent =  im[0].get_extent()\n    ax.set_aspect(abs((extent[1]-extent[0])/(extent[3]-extent[2]))/aspect)\n\ndata = np.random.rand(10,20)\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.imshow(data)\nax.set_xlabel('xlabel')\nax.set_aspect(2)\nfig.savefig('equal.png')\nax.set_aspect('auto')\nfig.savefig('auto.png')\nforceAspect(ax,aspect=1)\nfig.savefig('force.png')\naxes.set_aspect()axes.set_aspect()import matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.rand(10,20)\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.imshow(data)\nax.set_aspect('equal')\nfig.savefig('equal.png')\nax.set_aspect('auto')\nfig.savefig('auto.png')\nimport matplotlib.pyplot as plt\n\ndef adjustFigAspect(fig,aspect=1):\n    '''\n    Adjust the subplot parameters so that the figure has the correct\n    aspect ratio.\n    '''\n    xsize,ysize = fig.get_size_inches()\n    minsize = min(xsize,ysize)\n    xlim = .4*minsize/xsize\n    ylim = .4*minsize/ysize\n    if aspect &lt; 1:\n        xlim *= aspect\n    else:\n        ylim /= aspect\n    fig.subplots_adjust(left=.5-xlim,\n                        right=.5+xlim,\n                        bottom=.5-ylim,\n                        top=.5+ylim)\n\nfig = plt.figure()\nadjustFigAspect(fig,aspect=.5)\nax = fig.add_subplot(111)\nax.plot(range(10),range(10))\n\nfig.savefig('axAspect.png')\nhspacehspace"}, {"idx": "webquery-test-2", "doc": "Class constants in python", "code": "HorseHorseprint(Animal.SIZES[1])\nprint(self.SIZES[1])\nSIZES[1]class Animal:\n    SIZE_HUGE=\"Huge\"\n    SIZE_BIG=\"Big\"\n    SIZE_MEDIUM=\"Medium\"\n    SIZE_SMALL=\"Small\"\n\nclass Horse(Animal):\n    def printSize(self):\n        print(self.SIZE_BIG)\nHugeAnimalHugeAnimal"}, {"idx": "webquery-test-3", "doc": "Can iterators be reset in Python?", "code": "list()list()teeL = list(DictReader(...))L = list(DictReader(...))csvcsvcsv"}, {"idx": "webquery-test-4", "doc": "How to print a string at a fixed width?", "code": "str.format&gt;&gt;&gt; '{0: &lt;5}'.format('s')\n's    '\n&gt;&gt;&gt; '{0: &lt;5}'.format('ss')\n'ss   '\n&gt;&gt;&gt; '{0: &lt;5}'.format('sss')\n'sss  '\n&gt;&gt;&gt; '{0: &lt;5}'.format('ssss')\n'ssss '\n&gt;&gt;&gt; '{0: &lt;5}'.format('sssss')\n'sssss'\n&gt;&gt;&gt;&gt;&gt; '{0: &gt;5}'.format('ss')\n'   ss'\n000sub_str='s'\nfor i in range(1,6):\n    s = sub_str*i\n    print(f'{s:&gt;5}')\n    \n'    s'\n'   ss'\n'  sss'\n' ssss'\n'sssss'\nfor i in range(1,5):\n    s = sub_str*i\n    print(f'{s:&lt;5}')\n's    '\n'ss   '\n'sss  '\n'ssss '\n'sssss'\n' '"}, {"idx": "webquery-test-5", "doc": "Filter Pyspark dataframe column with None value", "code": "Column.isNullColumn.isNulldf.where(col(\"dt_mvmt\").isNull())\n\ndf.where(col(\"dt_mvmt\").isNotNull())\nNULLNULLNULLdf.na.drop(subset=[\"dt_mvmt\"])\nNULLNULLNULLsqlContext.sql(\"SELECT NULL = NULL\").show()\n## +-------------+\n## |(NULL = NULL)|\n## +-------------+\n## |         null|\n## +-------------+\n\n\nsqlContext.sql(\"SELECT NULL != NULL\").show()\n## +-------------------+\n## |(NOT (NULL = NULL))|\n## +-------------------+\n## |               null|\n## +-------------------+\nNULLNULLNULLNULLNULL"}, {"idx": "webquery-test-6", "doc": "How do I create a multiline Python string with inline variables?", "code": "format()&gt;&gt;&gt; s = \"This is an {example} with {vars}\".format(vars=\"variables\", example=\"example\")\n&gt;&gt;&gt; s\n'This is an example with variables'\n&gt;&gt;&gt; s = '''\\\n... This is a {length} example.\n... Here is a {ordinal} line.\\\n... '''.format(length='multi-line', ordinal='second')\n&gt;&gt;&gt; print(s)\nThis is a multi-line example.\nHere is a second line.\n&gt;&gt;&gt; d = { 'vars': \"variables\", 'example': \"example\" }\n&gt;&gt;&gt; s = \"This is an {example} with {vars}\"\n&gt;&gt;&gt; s.format(**d)\n'This is an example with variables'\n&gt;&gt;&gt; from string import Template\n&gt;&gt;&gt; t = Template(\"This is an $example with $vars\")\n&gt;&gt;&gt; t.substitute({ 'example': \"example\", 'vars': \"variables\"})\n'This is an example with variables'\nformat()"}, {"idx": "webquery-test-7", "doc": "How to decorate a class?", "code": "@addID\nclass Foo:\n    pass\nclass Foo:\n    pass\n\nFoo = addID(Foo)\ndef addID(original_class):\n    orig_init = original_class.__init__\n    # Make copy of original __init__, so we can call it without recursion\n\n    def __init__(self, id, *args, **kws):\n        self.__id = id\n        self.getId = getId\n        orig_init(self, *args, **kws) # Call the original __init__\n\n    original_class.__init__ = __init__ # Set the class' __init__ to the new one\n    return original_class\n__init__"}, {"idx": "webquery-test-8", "doc": "Python Requests and persistent sessions", "code": "s = requests.Session()\ns.post('https://localhost/login.py', login_data)\n# logged in! cookies saved for future requests.\nr2 = s.get('https://localhost/profile_data.json', ...)\n# cookies sent automatically!\n# do whatever, s will keep your cookies intact :)\nSession"}, {"idx": "webquery-test-9", "doc": "Visibility of global variables in imported modules", "code": "staticfimport module1\nthingy1 = module1.Thingy(a=3)\nthingy1.f()\nmodule1import module1\nmodule1.a=3\nmodule1.f()\naimport shared_stuff\nimport module1\nshared_stuff.a = 3\nmodule1.f()\nimport shared_stuff\ndef f():\n    print shared_stuff.a\nfromfromfromfromfromfromimport builtins\nimport module1\nbuiltins.a = 3\nmodule1.f()\n"}, {"idx": "webquery-test-10", "doc": "how do you filter pandas dataframes by multiple columns", "code": "&amp;&amp;males = df[(df[Gender]=='Male') &amp; (df[Year]==2014)]\ndictfrom collections import defaultdict\ndic={}\nfor g in ['male', 'female']:\n  dic[g]=defaultdict(dict)\n  for y in [2013, 2014]:\n    dic[g][y]=df[(df[Gender]==g) &amp; (df[Year]==y)] #store the DataFrames to a dict of dict\ngetDFdef getDF(dic, gender, year):\n  return dic[gender][year]\n\nprint genDF(dic, 'male', 2014)\n"}, {"idx": "webquery-test-11", "doc": "How to set timeout on python's socket recv method?", "code": "recv()recv()recv()import select\n\nmysocket.setblocking(0)\n\nready = select.select([mysocket], [], [], timeout_in_seconds)\nif ready[0]:\n    data = mysocket.recv(4096)\nselect()socket.settimeout()"}, {"idx": "webquery-test-12", "doc": "Understanding the main method of python", "code": "__name____name____name____name__#!/usr/bin/env python\nfrom __future__ import print_function\nimport this, that, other, stuff\nclass SomeObject(object):\n    pass\n\ndef some_function(*args,**kwargs):\n    pass\n\nif __name__ == '__main__':\n    print(\"This only executes when %s is executed rather than imported\" % __file__)\nif __name__if __name__if __name____name__ == \"__main__\"if __name__ == '__main__':def main(*args)def main(*args)def main(*args)def main(*args)def main(*args)def main(*args)if __file__ == $0"}, {"idx": "webquery-test-13", "doc": ".filter() vs .get() for single object? (Django)", "code": "get()get()"}, {"idx": "webquery-test-14", "doc": "How to get element-wise matrix multiplication (Hadamard product) in numpy?", "code": "matrixmatriximport numpy as np\na = np.array([[1,2],[3,4]])\nb = np.array([[5,6],[7,8]])\nnp.multiply(a,b)\narray([[ 5, 12],\n       [21, 32]])\narrayarrayarrayarraya * b\n@a @ b  # matrix multiplication\n"}, {"idx": "webquery-test-15", "doc": "TypeError: 'dict_keys' object does not support indexing", "code": "d.keys()d.keys()d.keys()d.keys()d.keys()d.keys()d.keys()list(d.keys())list(d.keys())list(d.keys())"}, {"idx": "webquery-test-16", "doc": "Can scrapy be used to scrape dynamic content from websites that are using AJAX?", "code": "scrapyclass spider(BaseSpider):\n    name = 'RubiGuesst'\n    start_urls = ['http://www.rubin-kazan.ru/guestbook.html']\n\n    def parse(self, response):\n        url_list_gb_messages = re.search(r'url_list_gb_messages=\"(.*)\"', response.body).group(1)\n        yield FormRequest('http://www.rubin-kazan.ru' + url_list_gb_messages, callback=self.RubiGuessItem,\n                          formdata={'page': str(page + 1), 'uid': ''})\n\n    def RubiGuessItem(self, response):\n        json_file = response.body\nparseparse"}, {"idx": "webquery-test-17", "doc": "What does preceding a string literal with \"r\" mean?", "code": "r'\\n''\\n''\\n''\\n''r''r''r''r''r''r'"}, {"idx": "webquery-test-1", "doc": "__init__ for unittest.TestCase", "code": "class TestingClass(unittest.TestCase):\n\n    def __init__(self, *args, **kwargs):\n        super(TestingClass, self).__init__(*args, **kwargs)\n        self.gen_stubs()\nTestCaseTestCase"}, {"idx": "webquery-test-2", "doc": "How to read pickle file?", "code": "pickle.loadpickle.loadobjects = []\nwith (open(\"myfile\", \"rb\")) as openfile:\n    while True:\n        try:\n            objects.append(pickle.load(openfile))\n        except EOFError:\n            break\n"}, {"idx": "webquery-test-3", "doc": "How to create a tuple with only one element", "code": "a = [('a'), ('b'), ('c', 'd')]\n&gt;&gt;&gt; type( ('a') )\n&lt;type 'str'&gt;\n\n&gt;&gt;&gt; type( ('a',) )\n&lt;type 'tuple'&gt;\n&gt;&gt;&gt; a = [('a',), ('b',), ('c', 'd')]\n\n             ^       ^\nlistlistx = tuple(['a'])\n"}, {"idx": "webquery-test-4", "doc": "Django: reverse accessors for foreign keys clashing", "code": "related_name create_user = models.ForeignKey(User, related_name='%(class)s_requests_created')\n"}, {"idx": "webquery-test-5", "doc": "Remove all line breaks from a long string of text", "code": "raw_inputraw_input&gt;&gt;&gt; mystr = raw_input('please enter string: ')\nplease enter string: hello world, how do i enter line breaks?\n&gt;&gt;&gt; # pressing enter didn't work...\n...\n&gt;&gt;&gt; mystr\n'hello world, how do i enter line breaks?'\n&gt;&gt;&gt; mystr.replace(' ', '')\n'helloworld,howdoienterlinebreaks?'\n&gt;&gt;&gt;\n'\\n''\\n''\\n'# you probably want to use a space ' ' to replace `\\n`\nmystring = mystring.replace('\\n', ' ').replace('\\r', '')\nstringstringstring"}, {"idx": "webquery-test-6", "doc": "sprintf like functionality in Python", "code": "%&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; b = \"hello\"\n&gt;&gt;&gt; buf = \"A = %d\\n , B = %s\\n\" % (a, b)\n&gt;&gt;&gt; print buf\nA = 5\n , B = hello\n\n&gt;&gt;&gt; c = 10\n&gt;&gt;&gt; buf = \"C = %d\\n\" % c\n&gt;&gt;&gt; print buf\nC = 10\nformat&gt;&gt;&gt; print \"This is the {}th tome of {}\".format(5, \"knowledge\")\nThis is the 5th tome of knowledge\n"}, {"idx": "webquery-test-7", "doc": "How to postpone/defer the evaluation of f-strings?", "code": "eval()__str____str__import inspect\n\nclass magic_fstring_function:\n    def __init__(self, payload):\n        self.payload = payload\n    def __str__(self):\n        vars = inspect.currentframe().f_back.f_globals.copy()\n        vars.update(inspect.currentframe().f_back.f_locals)\n        return self.payload.format(**vars)\n\ntemplate = \"The current name is {name}\"\n\ntemplate_a = magic_fstring_function(template)\n\n# use it inside a function to demonstrate it gets the scoping right\ndef new_scope():\n    names = [\"foo\", \"bar\"]\n    for name in names:\n        print(template_a)\n\nnew_scope()\n# The current name is foo\n# The current name is bar\n"}, {"idx": "webquery-test-8", "doc": "How to add a custom loglevel to Python's logging facility", "code": "99import logging\nDEBUG_LEVELV_NUM = 9 \nlogging.addLevelName(DEBUG_LEVELV_NUM, \"DEBUGV\")\ndef debugv(self, message, *args, **kws):\n    if self.isEnabledFor(DEBUG_LEVELV_NUM):\n        # Yes, logger takes its '*args' as 'args'.\n        self._log(DEBUG_LEVELV_NUM, message, args, **kws) \nlogging.Logger.debugv = debugv\nclass Loggerclass Logger"}, {"idx": "webquery-test-9", "doc": "Create Django model or update if exists", "code": "# In both cases, the call will get a person object with matching\n# identifier or create one if none exists; if a person is created,\n# it will be created with name equal to the value in `name`.\n\n# In this case, if the Person already exists, its existing name is preserved\nperson, created = Person.objects.get_or_create(\n        identifier=identifier, defaults={\"name\": name}\n)\n\n# In this case, if the Person already exists, its name is updated\nperson, created = Person.objects.update_or_create(\n        identifier=identifier, defaults={\"name\": name}\n)\n"}, {"idx": "webquery-test-1", "doc": "Installing SciPy and NumPy using pip", "code": "sudo apt-get install libblas-dev liblapack-dev libatlas-base-dev gfortran\npip install scipy\n"}, {"idx": "webquery-test-2", "doc": "Python + Django page redirect", "code": "from django.http import HttpResponseRedirect\n\ndef myview(request):\n    ...\n    return HttpResponseRedirect(\"/path/\")\ngeneric viewsfrom django.views.generic.simple import redirect_to\n\nurlpatterns = patterns('',   \n    (r'^one/$', redirect_to, {'url': '/another/'}),\n\n    #etc...\n)\nfrom django.views.generic import RedirectView\n\nurlpatterns = patterns('',\n    (r'^one/$', RedirectView.as_view(url='/another/')),\n)\n"}, {"idx": "webquery-test-3", "doc": "cv2.imshow command doesn't work properly in opencv-python", "code": "imshow()imshow()import cv2\nimg = cv2.imread('C:/Python27/03323_HD.jpg')\ncv2.imshow('ImageWindow', img)\ncv2.waitKey()\n"}, {"idx": "webquery-test-4", "doc": "How can I add the sqlite3 module to Python?", "code": "sqlite3"}, {"idx": "webquery-test-5", "doc": "How can I connect to MySQL in Python 3 on Windows?", "code": "MySQLdbMySQLdbpython-mysqldbpython-mysqldb"}, {"idx": "webquery-test-6", "doc": "How to hash a string into 8 digits?", "code": "hashlibhashlib&gt;&gt;&gt; s = 'she sells sea shells by the sea shore'\n\n&gt;&gt;&gt; # Use hashlib\n&gt;&gt;&gt; import hashlib\n&gt;&gt;&gt; int(hashlib.sha1(s.encode(\"utf-8\")).hexdigest(), 16) % (10 ** 8)\n58097614L\n\n&gt;&gt;&gt; # Use hash()\n&gt;&gt;&gt; abs(hash(s)) % (10 ** 8)\n82148974\n"}, {"idx": "webquery-test-7", "doc": "Days between two dates?", "code": "timedelta&gt;&gt;&gt; from datetime import date\n&gt;&gt;&gt; a = date(2011,11,24)\n&gt;&gt;&gt; b = date(2011,11,17)\n&gt;&gt;&gt; a-b\ndatetime.timedelta(7)\n&gt;&gt;&gt; (a-b).days\n7\n&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; a = datetime(2011,11,24,0,0,0)\n&gt;&gt;&gt; b = datetime(2011,11,17,23,59,59)\n&gt;&gt;&gt; a-b\ndatetime.timedelta(6, 1)\n&gt;&gt;&gt; (a-b).days\n6\n"}, {"idx": "webquery-test-8", "doc": "How do you do a simple \"chmod +x\" from within python?", "code": "os.stat()os.stat()os.stat()import os\nimport stat\n\nst = os.stat('somefile')\nos.chmod('somefile', st.st_mode | stat.S_IEXEC)\n"}, {"idx": "webquery-test-9", "doc": "What is the difference between json.dumps and json.load?", "code": "dumps&gt;&gt;&gt; a = {'foo': 3}\n&gt;&gt;&gt; json.dumps(a)\n'{\"foo\": 3}'\nloadwith open('file.json') as fh:\n    a = json.load(fh)\ndumpdumpdumpdumpdumpdumpdef dump(obj, fh):\n    fh.write(dumps(obj))\n\ndef load(fh):\n    return loads(fh.read())\n"}, {"idx": "webquery-test-10", "doc": "Should I use scipy.pi, numpy.pi, or math.pi?", "code": "&gt;&gt;&gt; import math\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; import scipy\n&gt;&gt;&gt; math.pi == np.pi == scipy.pi\nTrue\npi"}, {"idx": "webquery-test-11", "doc": "How to change any data type into a string?", "code": "myvariable = 4\nmystring = str(myvariable)  # '4'\nmystring = repr(myvariable) # '4'\n"}, {"idx": "webquery-test-12", "doc": "Can I run Keras model on gpu?", "code": "sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))sess = tf.compat.v1.Session(config=tf.compat.v1.ConfigProto(log_device_placement=True))from tensorflow.python.client import device_lib\nprint(device_lib.list_local_devices())\n[\n  name: \"/cpu:0\"device_type: \"CPU\",\n  name: \"/gpu:0\"device_type: \"GPU\"\n]\nfrom keras import backend as K\nK.tensorflow_backend._get_available_gpus()\n"}, {"idx": "webquery-test-13", "doc": "Python how to write to a binary file?", "code": "bytearraynewFileByteArray = bytearray(newFileBytes)\nnewFile.write(newFileByteArray)\nbytesbytesbytes&gt;&gt;&gt; bytearray(newFileBytes)\nbytearray(b'{\\x03\\xff\\x00d')\n&gt;&gt;&gt; bytes(newFileBytes)\nb'{\\x03\\xff\\x00d'\n&gt;&gt;&gt; bytearray(newFileBytes)\nbytearray(b'{\\x03\\xff\\x00d')\n&gt;&gt;&gt; bytes(newFileBytes)\n'[123, 3, 255, 0, 100]'\n"}, {"idx": "webquery-test-14", "doc": "How can I profile Python code line-by-line?", "code": "File: pystone.py\nFunction: Proc2 at line 149\nTotal time: 0.606656 s\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n   149                                           @profile\n   150                                           def Proc2(IntParIO):\n   151     50000        82003      1.6     13.5      IntLoc = IntParIO + 10\n   152     50000        63162      1.3     10.4      while 1:\n   153     50000        69065      1.4     11.4          if Char1Glob == 'A':\n   154     50000        66354      1.3     10.9              IntLoc = IntLoc - 1\n   155     50000        67263      1.3     11.1              IntParIO = IntLoc - IntGlob\n   156     50000        65494      1.3     10.8              EnumLoc = Ident1\n   157     50000        68001      1.4     11.2          if EnumLoc == Ident1:\n   158     50000        63739      1.3     10.5              break\n   159     50000        61575      1.2     10.1      return IntParIO\n"}, {"idx": "webquery-test-15", "doc": "ImportError: No module named MySQLdb", "code": "PyMySQLpip install pymysqlSQLALCHEMY_DATABASE_URI = 'mysql+pymysql://.....'\n"}, {"idx": "webquery-test-16", "doc": "How can I create a simple message box in Python?", "code": "import ctypes  # An included library with Python install.   \nctypes.windll.user32.MessageBoxW(0, \"Your text\", \"Your title\", 1)\nimport ctypes  # An included library with Python install.\ndef Mbox(title, text, style):\n    return ctypes.windll.user32.MessageBoxW(0, text, title, style)\nMbox('Your title', 'Your text', 1)\n##  Styles:\n##  0 : OK\n##  1 : OK | Cancel\n##  2 : Abort | Retry | Ignore\n##  3 : Yes | No | Cancel\n##  4 : Yes | No\n##  5 : Retry | Cancel \n##  6 : Cancel | Try Again | Continue\nMessageBoxWMessageBoxW"}, {"idx": "webquery-test-1", "doc": "Python regular expressions return true/false", "code": "TrueTrueTrue&gt;&gt;&gt; bool(re.search(\"hi\", \"abcdefghijkl\"))\nTrue\n&gt;&gt;&gt; bool(re.search(\"hi\", \"abcdefgijkl\"))\nFalse\nififif"}, {"idx": "webquery-test-2", "doc": "Bundling data files with PyInstaller (--onefile)", "code": "envenvdef resource_path(relative_path):\n    \"\"\" Get absolute path to resource, works for dev and for PyInstaller \"\"\"\n    try:\n        # PyInstaller creates a temp folder and stores path in _MEIPASS\n        base_path = sys._MEIPASS\n    except Exception:\n        base_path = os.path.abspath(\".\")\n\n    return os.path.join(base_path, relative_path)\n"}, {"idx": "webquery-test-3", "doc": "What is an 'endpoint' in Flask?", "code": "@app.route('/greeting/&lt;name&gt;')\ndef give_greeting(name):\n    return 'Hello, {0}!'.format(name)\n# No \"route\" decorator here. We will add routing using a different method below.\ndef give_greeting(name):\n    return 'Hello, {0}!'.format(name)\n\napp.add_url_rule('/greeting/&lt;name&gt;', 'give_greeting', give_greeting)\nhttp://www.example.org/greeting/Mark\n/greeting/Mark\ngive_greetingURL (http://www.example.org/greeting/Mark) should be handled by View Function (the function \"give_greeting\")\nURL (http://www.example.org/greeting/Mark) should be handled by Endpoint \"give_greeting\".\nRequests to Endpoint \"give_greeting\" should be handled by View Function \"give_greeting\"\n@app.route('/greeting/&lt;name&gt;', endpoint='say_hello')\ndef give_greeting(name):\n    return 'Hello, {0}!'.format(name)\nURL (http://www.example.org/greeting/Mark) should be handled by Endpoint \"say_hello\".\nEndpoint \"say_hello\" should be handled by View Function \"give_greeting\"\nurl_for()@app.route('/')\ndef index():\n    print url_for('give_greeting', name='Mark') # This will print '/greeting/Mark'\n\n@app.route('/greeting/&lt;name&gt;')\ndef give_greeting(name):\n    return 'Hello, {0}!'.format(name)\nfrom flask import Flask, Blueprint\nfrom admin import admin\nfrom user import user\n\napp = Flask(__name__)\napp.register_blueprint(admin, url_prefix='admin')\napp.register_blueprint(user, url_prefix='user')\nadmin = Blueprint('admin', __name__)\n\n@admin.route('/greeting')\ndef greeting():\n    return 'Hello, administrative user!'\nuser = Blueprint('user', __name__)\n@user.route('/greeting')\ndef greeting():\n    return 'Hello, lowly normal user!'\nprint url_for('admin.greeting') # Prints '/admin/greeting'\nprint url_for('user.greeting') # Prints '/user/greeting'\n"}, {"idx": "webquery-test-4", "doc": "Local (?) variable referenced before assignment", "code": "test1test1test1 = 0\ndef test_func():\n    global test1 \n    test1 += 1\ntest_func()\nglobaltest1 = 0\ndef test_func():\n    print(test1)\ntest_func()\nglobal"}, {"idx": "webquery-test-5", "doc": "Given a URL to a text file, what is the simplest way to read the contents of the text file?", "code": "import urllib2  # the lib that handles the url stuff\n\ndata = urllib2.urlopen(target_url) # it's a file like object and works just like a file\nfor line in data: # files are iterable\n    print line\nimport urllib2\n\nfor line in urllib2.urlopen(target_url):\n    print line\nimport urllib2\n\ndata = urllib2.urlopen(\"http://www.google.com\").read(20000) # read only 20 000 chars\ndata = data.split(\"\\n\") # then split it into lines\n\nfor line in data:\n    print line\nimport urllib.request  # the lib that handles the url stuff\n\nfor line in urllib.request.urlopen(target_url):\n    print(line.decode('utf-8')) #utf-8 or iso8859-1 or whatever the page encoding scheme is\n"}, {"idx": "webquery-test-6", "doc": "How to exit pdb and allow program to continue?", "code": "continue(Pdb) break\nNum Type         Disp Enb   Where\n1   breakpoint   keep yes   at /path/to/test.py:5\n(Pdb) clear 1\nDeleted breakpoint 1\n(Pdb) continue\npdb.set_trace()(Pdb) pdb.set_trace = lambda: None  # This replaces the set_trace() function!\n(Pdb) continue\n# No more breaks!\n"}, {"idx": "webquery-test-7", "doc": "How to test single file under pytest", "code": "pytestpytest tests/test_file.py::pytest test_mod.py::test_functest_functest_func"}, {"idx": "webquery-test-8", "doc": "Releasing memory in Python", "code": "concurrent.futuresconcurrent.futureswith concurrent.futures.ProcessPoolExecutor(max_workers=1) as executor:\n    result = executor.submit(func, *args, **kwargs).result()\nmultiprocessingmmapmmapmmapmmap"}, {"idx": "webquery-test-9", "doc": "TypeError: can't use a string pattern on a bytes-like object in re.findall()", "code": ".decode.decode"}, {"idx": "webquery-test-10", "doc": "Find the index of a dict within a list, by matching the dict's value", "code": "lst = [{'id':'1234','name':'Jason'}, {'id':'2345','name':'Tom'}, {'id':'3456','name':'Art'}]\n\ntom_index = next((index for (index, d) in enumerate(lst) if d[\"name\"] == \"Tom\"), None)\n# 1\ndef build_dict(seq, key):\n    return dict((d[key], dict(d, index=index)) for (index, d) in enumerate(seq))\n\npeople_by_name = build_dict(lst, key=\"name\")\ntom_info = people_by_name.get(\"Tom\")\n# {'index': 1, 'id': '2345', 'name': 'Tom'}\n"}, {"idx": "webquery-test-11", "doc": "How to extract the year from a Python datetime object?", "code": "import datetime\nyear = datetime.date.today().year\nimport datetime\nyear = datetime.datetime.today().year\n"}, {"idx": "webquery-test-12", "doc": "How to convert a Scikit-learn dataset to a Pandas dataset", "code": "pd.DataFramepd.DataFramepd.DataFramepd.DataFramepd.DataFrameimport numpy as np\nimport pandas as pd\nfrom sklearn.datasets import load_iris\n\n# save load_iris() sklearn dataset to iris\n# if you'd like to check dataset type use: type(load_iris())\n# if you'd like to view list of attributes use: dir(load_iris())\niris = load_iris()\n\n# np.c_ is the numpy concatenate function\n# which is used to concat iris['data'] and iris['target'] arrays \n# for pandas column argument: concat iris['feature_names'] list\n# and string list (in this case one string); you can make this anything you'd like..  \n# the original dataset would probably call this ['Species']\ndata1 = pd.DataFrame(data= np.c_[iris['data'], iris['target']],\n                     columns= iris['feature_names'] + ['target'])\n"}, {"idx": "webquery-test-13", "doc": "Drop rows with all zeros in pandas data frame", "code": "df.loc[~(df==0).all(axis=1)]\ndf.loc[(df!=0).any(axis=1)]\n"}, {"idx": "webquery-test-14", "doc": "Is there a better way to iterate over two lists, getting one element from each list for each iteration?", "code": "for lat, long in zip(Latitudes, Longitudes):\n    print(lat, long)\n"}, {"idx": "webquery-test-15", "doc": "More elegant way of declaring multiple variables at the same time", "code": "a, b, c, d, e, g, h, i, j = (True,)*9\nf = False\n"}, {"idx": "webquery-test-16", "doc": "How to get the parent dir location", "code": "dirname(dirname(file))dirname(dirname(file))dirname(dirname(file))"}, {"idx": "webquery-test-17", "doc": "Python Regex instantly replace groups", "code": "re.subresult = re.sub(r\"(\\d.*?)\\s(\\d.*?)\", r\"\\1 \\2\", string1)\ngroup(...)group(...)"}, {"idx": "webquery-test-18", "doc": "How to override and extend basic Django admin templates?", "code": "{% extends \"admin:admin/index.html\" %}\n\n{% block sidebar %}\n    {{block.super}}\n    &lt;div&gt;\n        &lt;h1&gt;Extra links&lt;/h1&gt;\n        &lt;a href=\"/admin/extra/\"&gt;My extra link&lt;/a&gt;\n    &lt;/div&gt;\n{% endblock %}\n"}, {"idx": "webquery-test-19", "doc": "Understanding inplace=True in pandas", "code": "inplace=Truedf.an_operation(inplace=True)\ninplace=Falsedf = df.an_operation(inplace=False) \n"}, {"idx": "webquery-test-20", "doc": "How to export plots from matplotlib with transparent background?", "code": "savefigsavefigIn [30]: x = np.linspace(0,6,31)\n\nIn [31]: y = np.exp(-0.5*x) * np.sin(x)\n\nIn [32]: plot(x, y, 'bo-')\nOut[32]: [&lt;matplotlib.lines.Line2D at 0x3f29750&gt;]            \n\nIn [33]: savefig('demo.png', transparent=True)\ndisplay"}, {"idx": "webquery-test-21", "doc": "How to convert a set to a list in python?", "code": "&gt;&gt;&gt; type(my_set)\n&lt;class 'list'&gt;\n&gt;&gt;&gt; my_set = set([1, 2, 3, 4])\n&gt;&gt;&gt; my_list = list(my_set)\n&gt;&gt;&gt; print(my_list)\n[1, 2, 3, 4]\n&gt;&gt;&gt; my_list = [1,2,3,4]\n&gt;&gt;&gt; my_set = set(my_list)\n&gt;&gt;&gt; my_new_list = list(my_set)\n&gt;&gt;&gt; print(my_new_list)\n[1, 2, 3, 4]\n&gt;&gt;&gt; set = set()\n&gt;&gt;&gt; set([1, 2])\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'set' object is not callable\n"}, {"idx": "webquery-test-1", "doc": "Coroutine vs Continuation vs Generator", "code": "def my_coroutine_body(*args):\n    while True:\n        # Do some funky stuff\n        *args = yield value_im_returning\n        # Do some more funky stuff\n\nmy_coro = make_coroutine(my_coroutine_body)\n\nx = 0\nwhile True:\n   # The coroutine does some funky stuff to x, and returns a new value.\n   x = my_coro(x)\n   print x\ncallcc()def foo(x, y, cc):\n   cc(max(x, y))\n\nbiggest = callcc(foo, [23, 42])\nprint biggest\ncallcc()callcc()callcc()callcc()callcc()callcc()callcc()'42'"}, {"idx": "webquery-test-2", "doc": "Times-two faster than bit-shift, for Python 3.x integers?", "code": "xstatic PyObject *\nlong_mul(PyLongObject *a, PyLongObject *b)\n{\n    PyLongObject *z;\n\n    CHECK_BINOP(a, b);\n\n    /* fast path for single-digit multiplication */\n    if (Py_ABS(Py_SIZE(a)) &lt;= 1 &amp;&amp; Py_ABS(Py_SIZE(b)) &lt;= 1) {\n        stwodigits v = (stwodigits)(MEDIUM_VALUE(a)) * MEDIUM_VALUE(b);\n#ifdef HAVE_LONG_LONG\n        return PyLong_FromLongLong((PY_LONG_LONG)v);\n#else\n        /* if we don't have long long then we're almost certainly\n           using 15-bit digits, so v will fit in a long.  In the\n           unlikely event that we're using 30-bit digits on a platform\n           without long long, a large v will just cause us to fall\n           through to the general multiplication code below. */\n        if (v &gt;= LONG_MIN &amp;&amp; v &lt;= LONG_MAX)\n            return PyLong_FromLong((long)v);\n#endif\n    }\nMEDIUM_VALUE()MEDIUM_VALUE()long_lshift()long_lshift()static PyObject *\nlong_lshift(PyObject *v, PyObject *w)\n{\n    /*** ... ***/\n\n    wordshift = shiftby / PyLong_SHIFT;   /*** zero for small w ***/\n    remshift  = shiftby - wordshift * PyLong_SHIFT;   /*** w for small w ***/\n\n    oldsize = Py_ABS(Py_SIZE(a));   /*** 1 for small v &gt; 0 ***/\n    newsize = oldsize + wordshift;\n    if (remshift)\n        ++newsize;   /*** here newsize becomes at least 2 for w &gt; 0, v &gt; 0 ***/\n    z = _PyLong_New(newsize);\n\n    /*** ... ***/\n}\n////"}, {"idx": "webquery-test-3", "doc": "Why use Python's os module methods instead of executing shell commands directly?", "code": "os.systemos.systemos.systemos.systemos.systemos.systemos.systemos.systemos.systemos.systemos.systemos.systemos.systemos.systemos.systemos.systemos.systemos.systemos.systemos.system"}, {"idx": "webquery-test-4", "doc": "How do you calculate program run time in python?", "code": "import timeit\n\nstart = timeit.default_timer()\n\n#Your statements here\n\nstop = timeit.default_timer()\n\nprint('Time: ', stop - start)  \n"}, {"idx": "webquery-test-5", "doc": "Length of generator output", "code": "sum(1 for _ in gen)"}, {"idx": "webquery-test-6", "doc": "SQLAlchemy ORM conversion to pandas DataFrame", "code": "df = pd.read_sql(query.statement, query.session.bind)\npandas.read_sql"}, {"idx": "webquery-test-7", "doc": "Find a file in python", "code": "import os\n\ndef find(name, path):\n    for root, dirs, files in os.walk(path):\n        if name in files:\n            return os.path.join(root, name)\ndef find_all(name, path):\n    result = []\n    for root, dirs, files in os.walk(path):\n        if name in files:\n            result.append(os.path.join(root, name))\n    return result\nimport os, fnmatch\ndef find(pattern, path):\n    result = []\n    for root, dirs, files in os.walk(path):\n        for name in files:\n            if fnmatch.fnmatch(name, pattern):\n                result.append(os.path.join(root, name))\n    return result\n\nfind('*.txt', '/path/to/dir')\n"}, {"idx": "webquery-test-8", "doc": "Extract a page from a pdf as a jpeg", "code": "pip install pdf2image\nfrom pdf2image import convert_from_path\npages = convert_from_path('pdf_file', 500)\nfor page in pages:\n    page.save('out.jpg', 'JPEG')\npdftoppmsudo apt install poppler-utilsconda install -c conda-forge poppler\n"}, {"idx": "webquery-test-9", "doc": "Updating Python on Mac", "code": "python3.1python3.1"}, {"idx": "webquery-test-10", "doc": "What is the use of verbose in Keras while validating the model?", "code": "verbose=0verbose=1verbose=2"}, {"idx": "webquery-test-11", "doc": "Permission denied when activating venv", "code": ". venv/bin/activate\nsource venv/bin/activate\nactivate.    .  filename [arguments]\n   source filename [arguments]\n          Read  and execute commands from filename in the current shell\n          environment and return the exit status of the last command\n          executed from filename.\n.."}, {"idx": "webquery-test-12", "doc": "How to remove leading and trailing zeros in a string? Python", "code": "your_string.strip(\"0\")\n.rstrip.rstriptrailing_removed = [s.rstrip(\"0\") for s in listOfNum]\nleading_removed = [s.lstrip(\"0\") for s in listOfNum]\nboth_removed = [s.strip(\"0\") for s in listOfNum]\n"}, {"idx": "webquery-test-13", "doc": "How do I write a Python dictionary to a csv file?", "code": "DictWriter.writerows()DictWriter.writerows()DictWriter.writeheader()withimport csv\n\nmy_dict = {\"test\": 1, \"testing\": 2}\n\nwith open('mycsvfile.csv', 'w') as f:  # You will need 'wb' mode in Python 2.x\n    w = csv.DictWriter(f, my_dict.keys())\n    w.writeheader()\n    w.writerow(my_dict)\ntest,testing\n1,2\n"}, {"idx": "webquery-test-14", "doc": "<Django object > is not JSON serializable", "code": "simplejsonsimplejsondata = serializers.serialize('json', self.get_queryset())\nreturn HttpResponse(data, content_type=\"application/json\")\nself.get_queryset()self.get_queryset()self.get_queryset()from django.forms.models import model_to_dict\n\ndata = self.get_queryset()\n\nfor item in data:\n   item['product'] = model_to_dict(item['product'])\n\nreturn HttpResponse(json.simplejson.dumps(data), mimetype=\"application/json\")\n"}, {"idx": "webquery-test-15", "doc": "UnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 13: ordinal not in range(128)", "code": "strstrjob_titles = [line.strip() for line in title_file.readlines()]\nstrstrjob_titles = [line.decode('utf-8').strip() for line in title_file.readlines()]\ncodecscodecscodecs"}, {"idx": "webquery-test-16", "doc": "Flask ImportError: No Module Named Flask", "code": "virtualenv flask\ncd flask\nsource bin/activate\n(flask)&amp; .\\Flask\\Scripts\\activatepip install flask\nhello.pyhello.pyfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n\nif __name__ == \"__main__\":\n    app.run()\npython hello.py\nhello.pyfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\nFLASK_APP=hello.py flask run\nhello.py"}, {"idx": "webquery-test-17", "doc": "How to write to an existing excel file without overwriting data (using pandas)?", "code": "ExcelWriterimport pandas\nfrom openpyxl import load_workbook\n\nbook = load_workbook('Masterfile.xlsx')\nwriter = pandas.ExcelWriter('Masterfile.xlsx', engine='openpyxl') \nwriter.book = book\n\n## ExcelWriter for some reason uses writer.sheets to access the sheet.\n## If you leave it empty it will not know that sheet Main is already there\n## and will create a new sheet.\n\nwriter.sheets = dict((ws.title, ws) for ws in book.worksheets)\n\ndata_filtered.to_excel(writer, \"Main\", cols=['Diff1', 'Diff2'])\n\nwriter.save()\n"}, {"idx": "webquery-test-18", "doc": "How do I write data into CSV format as string (not file)?", "code": "&gt;&gt;&gt; import io\n&gt;&gt;&gt; import csv\n&gt;&gt;&gt; output = io.StringIO()\n&gt;&gt;&gt; csvdata = [1,2,'a','He said \"what do you mean?\"',\"Whoa!\\nNewlines!\"]\n&gt;&gt;&gt; writer = csv.writer(output, quoting=csv.QUOTE_NONNUMERIC)\n&gt;&gt;&gt; writer.writerow(csvdata)\n59\n&gt;&gt;&gt; output.getvalue()\n'1,2,\"a\",\"He said \"\"what do you mean?\"\"\",\"Whoa!\\nNewlines!\"\\r\\n'\n&gt;&gt;&gt; output = io.BytesIO()\n&gt;&gt;&gt; writer = csv.writer(output)\n&gt;&gt;&gt; writer.writerow(csvdata)\n57L\n&gt;&gt;&gt; output.getvalue()\n'1,2,a,\"He said \"\"what do you mean?\"\"\",\"Whoa!\\nNewlines!\"\\r\\n'\n"}, {"idx": "webquery-test-19", "doc": "Can I use `pip` instead of `easy_install` for `python setup.py install` dependency resolution?", "code": "pip install https://pypi.python.org/packages/source/r/requests/requests-2.3.0.tar.gz\nwget https://pypi.python.org/packages/source/r/requests/requests-2.3.0.tar.gz\npip install requests-2.3.0.tar.gz\ntar -zxvf requests-2.3.0.tar.gz\ncd requests-2.3.0\npip install .\nrequests-2.3.0pip install -e .\n"}, {"idx": "webquery-test-20", "doc": "Get pandas.read_csv to read empty values as empty string instead of nan", "code": "keep_default_na=Falsepd.read_csv('test.csv', keep_default_na=False)\n"}, {"idx": "webquery-test-21", "doc": "How do I keep track of pip-installed packages in an Anaconda (Conda) environment?", "code": "conda env export -n &lt;env-name&gt; &gt; environment.yml\nname: stats\nchannels:\n  - javascript\ndependencies:\n  - python=3.4\n  - bokeh=0.9.2\n  - numpy=1.9.*\n  - nodejs=0.10.*\n  - flask\n  - pip:\n    - Flask-Testing\nenvironment.ymlconda env create -f path/to/environment.yml\n"}, {"idx": "webquery-test-22", "doc": "How can I make setuptools install a package that's not on PyPI?", "code": "setup(\n   ...\n   dependency_links = ['http://github.com/mtai/python-gearman/tarball/master#egg=gearman-2.0.0beta']\n)\n--process-dependency-links--process-dependency-links"}, {"idx": "webquery-test-23", "doc": "Python: Is it bad form to raise exceptions within __init__?", "code": "__init__()ValueError"}, {"idx": "webquery-test-24", "doc": "Numpy argsort - what is it doing?", "code": "22222222"}, {"idx": "webquery-test-1", "doc": "Pelican 3.3 pelican-quickstart error \"ValueError: unknown locale: UTF-8\"", "code": "export LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\nlocale -alocale -a"}, {"idx": "webquery-test-2", "doc": "Why are empty strings returned in split() results?", "code": "str.splitstr.split\"/\".join(['', 'segment', 'segment', ''])\n'/''/'"}, {"idx": "webquery-test-3", "doc": "\"for loop\" with two variables?", "code": "import itertools\nfor i, j in itertools.product(range(x), range(y)):\n    # Stuff...\nfor i, j in zip(range(x), range(y)):\n    # Stuff...\nxxxxzipzipzipdef equal_elements(t1, t2):\n    return list(set(t1).intersection(set(t2)))\n    # You could also do\n    # return list(set(t1) &amp; set(t2))\nintersectionintersectionintersectionintersectionintersectionintersectionintersectionzipdef equal_elements(t1, t2):\n    return [x for x, y in zip(t1, t2) if x == y]\n"}, {"idx": "webquery-test-4", "doc": "Get path from open file in Python", "code": "namename&gt;&gt;&gt; f = open('/Users/Desktop/febROSTER2012.xls')\n&gt;&gt;&gt; f.name\n'/Users/Desktop/febROSTER2012.xls'\n"}, {"idx": "webquery-test-5", "doc": "Check if Python Package is installed", "code": "import importlib.util\nimport sys\n\n# For illustrative purposes.\nname = 'itertools'\n\nif name in sys.modules:\n    print(f\"{name!r} already in sys.modules\")\nelif (spec := importlib.util.find_spec(name)) is not None:\n    # If you choose to perform the actual import ...\n    module = importlib.util.module_from_spec(spec)\n    sys.modules[name] = module\n    spec.loader.exec_module(module)\n    print(f\"{name!r} has been imported\")\nelse:\n    print(f\"can't find the {name!r} module\")\ntry:\n    import mymodule\nexcept ImportError as e:\n    pass  # module doesn't exist, deal with it.\ntry:\n    import mymodule\nexcept ImportError, e:\n    pass  # module doesn't exist, deal with it.\n"}, {"idx": "webquery-test-6", "doc": "How can I add new dimensions to a Numpy array?", "code": "image = image[..., np.newaxis]\n"}, {"idx": "webquery-test-7", "doc": "Python Dictionary to URL Parameters", "code": "urllib.parse.urlencode()urllib.parse.urlencode()&gt;&gt;&gt; import urllib.parse\n&gt;&gt;&gt; params = {'a':'A', 'b':'B'}\n&gt;&gt;&gt; urllib.parse.urlencode(params)\n'a=A&amp;b=B'\np=1&amp;p=2&amp;p=3&gt;&gt;&gt; a = (('p',1),('p',2), ('p', 3))\n&gt;&gt;&gt; urllib.parse.urlencode(a)\n'p=1&amp;p=2&amp;p=3'\n&gt;&gt;&gt; urllib.parse.urlencode({'p': [1, 2, 3]}, doseq=True)\n'p=1&amp;p=2&amp;p=3'\nurllib.urlencode()"}, {"idx": "webquery-test-8", "doc": "How to split text in a column into multiple rows", "code": "In [43]: df\nOut[43]: \n   CustNum     CustomerName  ItemQty Item                 Seatblocks  ItemExt\n0    32363  McCartney, Paul        3  F04               2:218:10:4,6       60\n1    31316     Lennon, John       25  F01  1:13:36:1,12 1:13:37:1,13      300\n\nIn [44]: s = df['Seatblocks'].str.split(' ').apply(Series, 1).stack()\n\nIn [45]: s.index = s.index.droplevel(-1) # to line up with df's index\n\nIn [46]: s.name = 'Seatblocks' # needs a name to join\n\nIn [47]: s\nOut[47]: \n0    2:218:10:4,6\n1    1:13:36:1,12\n1    1:13:37:1,13\nName: Seatblocks, dtype: object\n\nIn [48]: del df['Seatblocks']\n\nIn [49]: df.join(s)\nOut[49]: \n   CustNum     CustomerName  ItemQty Item  ItemExt    Seatblocks\n0    32363  McCartney, Paul        3  F04       60  2:218:10:4,6\n1    31316     Lennon, John       25  F01      300  1:13:36:1,12\n1    31316     Lennon, John       25  F01      300  1:13:37:1,13\nIn [50]: df.join(s.apply(lambda x: Series(x.split(':'))))\nOut[50]: \n   CustNum     CustomerName  ItemQty Item  ItemExt  0    1   2     3\n0    32363  McCartney, Paul        3  F04       60  2  218  10   4,6\n1    31316     Lennon, John       25  F01      300  1   13  36  1,12\n1    31316     Lennon, John       25  F01      300  1   13  37  1,13\n"}, {"idx": "webquery-test-9", "doc": "What does the caret (^) operator do?", "code": "TrueTrueTrue&gt;&gt;&gt; 0^0\n0\n&gt;&gt;&gt; 1^1\n0\n&gt;&gt;&gt; 1^0\n1\n&gt;&gt;&gt; 0^1\n1\n&gt;&gt;&gt; 8^3\n11\n"}, {"idx": "webquery-test-10", "doc": "TypeError: cannot concatenate 'str' and 'int' objects", "code": "printstr(c)str(c)str(c)print \"a + b as integers: \", c  # note the comma here\nstr(c)\nEnter a: 3\nEnter b: 7\na + b as strings:  37\na + b as integers:  10\na = raw_input(\"Enter a: \")\nb = raw_input(\"Enter b: \")\nprint \"a + b as strings: \" + a + b  # + everywhere is ok since all are strings\na = int(a)\nb = int(b)\nc = a + b\nprint \"a + b as integers: \", c\n"}, {"idx": "webquery-test-11", "doc": "Unittest setUp/tearDown for several tests", "code": "setUpClasssetUpClasssetUpClasssetUpClassrun()run()"}, {"idx": "webquery-test-12", "doc": "How To Check If A Key in **kwargs Exists?", "code": "if 'errormessage' in kwargs:\n    print(\"found it\")\nerrormessageif 'errormessage' in kwargs:\n    print(\"errormessage equals \" + kwargs.get(\"errormessage\"))\nkwargskwargskwargskwargsif errormessage in kwargs:if errormessage in kwargs:if errormessage in kwargs:if errormessage in kwargs:if errormessage in kwargs:.get().get().get().get().get().get()"}, {"idx": "webquery-test-13", "doc": "Resolving new pip backtracking runtime issue", "code": "pippip--use-deprecated=legacy-resolver--use-deprecated=legacy-resolver--use-deprecated=legacy-resolver--use-deprecated=legacy-resolver--use-deprecated=legacy-resolverdaskpipreqspip install pipreqspip install pipreqspip install pipreqspip install pipreqspip install pipreqspip-toolspip-toolsrequirements.inrequirements.inrequirements.inrequirements.inrequirements.inrequirements.inrequirements.inrequirements.inrequirements.inrequirements.inrequirements.inpre-commitpre-commitpre-commitpre-commit"}, {"idx": "webquery-test-14", "doc": "How to check if one dictionary is a subset of another larger dictionary?", "code": "dict.items()dict.items()d1.items() &lt;= d2.items()\ndict.viewitems()d1.viewitems() &lt;= d2.viewitems()\nall()all(key in d2 and d2[key] == d1[key] for key in d1)\n"}, {"idx": "webquery-test-15", "doc": "How to return 0 with divide by zero", "code": "&gt;&gt;&gt; a = np.array([-1, 0, 1, 2, 3], dtype=float)\n&gt;&gt;&gt; b = np.array([ 0, 0, 0, 2, 2], dtype=float)\n\n# If you don't pass `out` the indices where (b == 0) will be uninitialized!\n&gt;&gt;&gt; c = np.divide(a, b, out=np.zeros_like(a), where=b!=0)\n&gt;&gt;&gt; print(c)\n[ 0.   0.   0.   1.   1.5]\n"}, {"idx": "webquery-test-16", "doc": "How to merge multiple dataframes", "code": "import pandas as pd\nfrom functools import reduce\n\ndf1 = pd.read_table('file1.csv', sep=',')\ndf2 = pd.read_table('file2.csv', sep=',')\ndf3 = pd.read_table('file3.csv', sep=',')\nmergemerge# compile the list of dataframes you want to merge\ndata_frames = [df1, df2, df3]\nDATEdf_merged = reduce(lambda  left,right: pd.merge(left,right,on=['DATE'],\n                                            how='outer'), data_frames)\n\n# if you want to fill the values that don't exist in the lines of merged dataframe simply fill with required strings as\n\ndf_merged = reduce(lambda  left,right: pd.merge(left,right,on=['DATE'],\n                                            how='outer'), data_frames).fillna('void')\npd.DataFrame.to_csv(df_merged, 'merged.txt', sep=',', na_rep='.', index=False)\nDATE    VALUE1    VALUE2    VALUE3 ...."}, {"idx": "webquery-test-17", "doc": "What is the difference between contiguous and non-contiguous arrays?", "code": "arr = np.arange(12).reshape(3,4)arrarrarr.Tarr.Tnp.sum(arr, axis=1) # sum the rows\nnp.sum(arr, axis=0) # sum the columns\n&gt;&gt;&gt; arr2 = arr.T\n&gt;&gt;&gt; arr2.shape = 12\nAttributeError: incompatible shape for a non-contiguous array\narr.Tshapearr.Tarr2.reshape(12)"}, {"idx": "webquery-test-18", "doc": "How to create PDF files in Python", "code": "from reportlab.pdfgen import canvas\nfrom reportlab.lib.units import inch, cm\nc = canvas.Canvas('ex.pdf')\nc.drawImage('ar.jpg', 0, 0, 10*cm, 10*cm)\nc.showPage()\nc.save()\n"}, {"idx": "webquery-test-1", "doc": "Remove all values within one list from another list?", "code": "&gt;&gt;&gt; a = range(1, 10)\n&gt;&gt;&gt; [x for x in a if x not in [2, 3, 7]]\n[1, 4, 5, 6, 8, 9]\n"}, {"idx": "webquery-test-2", "doc": "how to clear the screen in python", "code": "&gt;&gt;&gt;import os\nos.system('cls')  # on windows\nos.system('clear')  # on linux / os x\n"}, {"idx": "webquery-test-3", "doc": "Python pathlib make directories if they don\u2019t exist", "code": "Path.mkdirpathlib.Path('/tmp/sub1/sub2').mkdir(parents=True, exist_ok=True)\nmkdir -pmkdir -pmkdir -pmkdir -pmkdir -p"}, {"idx": "webquery-test-4", "doc": "numpy get index where value is true", "code": "&gt;&gt;&gt; np.where(np.any(e&gt;15, axis=1))\n(array([1, 2], dtype=int64),)\n"}, {"idx": "webquery-test-5", "doc": "Keyboard Interrupts with python's multiprocessing Pool", "code": "import threading\ncond = threading.Condition(threading.Lock())\ncond.acquire()\ncond.wait(None)\nprint \"done\"\n    results = pool.map(slowly_square, range(40))\n    results = pool.map_async(slowly_square, range(40)).get(9999999)\n"}, {"idx": "webquery-test-6", "doc": "What are some (concrete) use-cases for metaclasses?", "code": "models = {}\n\nclass ModelMetaclass(type):\n    def __new__(meta, name, bases, attrs):\n        models[name] = cls = type.__new__(meta, name, bases, attrs)\n        return cls\n\nclass Model(object):\n    __metaclass__ = ModelMetaclass\nmodels = {}\n\nclass ModelMetaclass(type):\n    def __new__(meta, name, bases, attrs):\n        models[name] = cls = type.__new__(meta, name, bases, attrs)\n        return cls\n\nclass Model(object):\n    __metaclass__ = ModelMetaclass\nmodels = {}\n\nclass ModelMetaclass(type):\n    def __new__(meta, name, bases, attrs):\n        models[name] = cls = type.__new__(meta, name, bases, attrs)\n        return cls\n\nclass Model(object):\n    __metaclass__ = ModelMetaclass\nmodels = {}\n\nclass ModelMetaclass(type):\n    def __new__(meta, name, bases, attrs):\n        models[name] = cls = type.__new__(meta, name, bases, attrs)\n        return cls\n\nclass Model(object):\n    __metaclass__ = ModelMetaclass\nmodels = {}\n\nclass ModelMetaclass(type):\n    def __new__(meta, name, bases, attrs):\n        models[name] = cls = type.__new__(meta, name, bases, attrs)\n        return cls\n\nclass Model(object):\n    __metaclass__ = ModelMetaclass\nmodels = {}\n\nclass ModelMetaclass(type):\n    def __new__(meta, name, bases, attrs):\n        models[name] = cls = type.__new__(meta, name, bases, attrs)\n        return cls\n\nclass Model(object):\n    __metaclass__ = ModelMetaclass\nmodels = {}\n\nclass ModelMetaclass(type):\n    def __new__(meta, name, bases, attrs):\n        models[name] = cls = type.__new__(meta, name, bases, attrs)\n        return cls\n\nclass Model(object):\n    __metaclass__ = ModelMetaclass\nmodels = {}\n\nclass ModelMetaclass(type):\n    def __new__(meta, name, bases, attrs):\n        models[name] = cls = type.__new__(meta, name, bases, attrs)\n        return cls\n\nclass Model(object):\n    __metaclass__ = ModelMetaclass\nmodels = {}\n\nclass ModelMetaclass(type):\n    def __new__(meta, name, bases, attrs):\n        models[name] = cls = type.__new__(meta, name, bases, attrs)\n        return cls\n\nclass Model(object):\n    __metaclass__ = ModelMetaclass\nmodels = {}\n\nclass ModelMetaclass(type):\n    def __new__(meta, name, bases, attrs):\n        models[name] = cls = type.__new__(meta, name, bases, attrs)\n        return cls\n\nclass Model(object):\n    __metaclass__ = ModelMetaclass\nmodels = {}\n\nclass ModelMetaclass(type):\n    def __new__(meta, name, bases, attrs):\n        models[name] = cls = type.__new__(meta, name, bases, attrs)\n        return cls\n\nclass Model(object):\n    __metaclass__ = ModelMetaclass\nmodels = {}\n\nclass ModelMetaclass(type):\n    def __new__(meta, name, bases, attrs):\n        models[name] = cls = type.__new__(meta, name, bases, attrs)\n        return cls\n\nclass Model(object):\n    __metaclass__ = ModelMetaclass\nmodels = {}\n\nclass ModelMetaclass(type):\n    def __new__(meta, name, bases, attrs):\n        models[name] = cls = type.__new__(meta, name, bases, attrs)\n        return cls\n\nclass Model(object):\n    __metaclass__ = ModelMetaclass\nmodels = {}\n\nclass ModelMetaclass(type):\n    def __new__(meta, name, bases, attrs):\n        models[name] = cls = type.__new__(meta, name, bases, attrs)\n        return cls\n\nclass Model(object):\n    __metaclass__ = ModelMetaclass\nmodels = {}\n\nclass ModelMetaclass(type):\n    def __new__(meta, name, bases, attrs):\n        models[name] = cls = type.__new__(meta, name, bases, attrs)\n        return cls\n\nclass Model(object):\n    __metaclass__ = ModelMetaclass\nclass Metaclass(type):\n    def __new__(meta, name, bases, attrs):\n        return type.__new__(meta, 'foo', (int,), attrs)\n\nclass Baseclass(object):\n    __metaclass__ = Metaclass\n\nclass A(Baseclass):\n    pass\n\nclass B(A):\n    pass\n\nprint A.__name__ # foo\nprint B.__name__ # foo\nprint issubclass(B, A)   # False\nprint issubclass(B, int) # True\n__prepare____prepare__import collections\n\nclass Metaclass(type):\n\n    @classmethod\n    def __prepare__(meta, name, bases, **kwds):\n        return collections.OrderedDict()\n\n    def __new__(meta, name, bases, attrs, **kwds):\n        print(list(attrs))\n        # Do more stuff...\n\nclass A(metaclass=Metaclass):\n    x = 1\n    y = 2\n\n# prints ['x', 'y'] rather than ['y', 'x']\nclass ListDict(dict):\n    def __setitem__(self, key, value):\n        self.setdefault(key, []).append(value)\n\nclass Metaclass(type):\n\n    @classmethod\n    def __prepare__(meta, name, bases, **kwds):\n        return ListDict()\n\n    def __new__(meta, name, bases, attrs, **kwds):\n        print(attrs['foo'])\n        # Do more stuff...\n\nclass A(metaclass=Metaclass):\n\n    def foo(self):\n        pass\n\n    def foo(self, x):\n        pass\n\n# prints [&lt;function foo at 0x...&gt;, &lt;function foo at 0x...&gt;] rather than &lt;function foo at 0x...&gt;\nimport itertools\n\nclass Attribute(object):\n    _counter = itertools.count()\n    def __init__(self):\n        self._count = Attribute._counter.next()\n\nclass A(object):\n    x = Attribute()\n    y = Attribute()\n\nA._order = sorted([(k, v) for k, v in vars(A).items() if isinstance(v, Attribute)],\n                  key = lambda (k, v): v._count)\nclass A(object):\n\n    def _foo0(self):\n        pass\n\n    def _foo1(self, x):\n        pass\n\n    def foo(self, x=None):\n        if x is None:\n            return self._foo0()\n        else:\n            return self._foo1(x)\nNoneNoneimport sys\n\nclass Builder(object):\n    def __call__(self, cls):\n        cls._order = self.frame.f_code.co_names\n        return cls\n\ndef ordered():\n    builder = Builder()\n    def trace(frame, event, arg):\n        builder.frame = frame\n        sys.settrace(None)\n    sys.settrace(trace)\n    return builder\n\n@ordered()\nclass A(object):\n    x = 1\n    y = 'foo'\n\nprint A._order # ['x', 'y']\n_undefined = object()\n\nclass A(object):\n\n    def _foo0(self):\n        pass\n\n    def _foo1(self, x):\n        pass\n\n    def foo(self, x=_undefined):\n        if x is _undefined:\n            return self._foo0()\n        else:\n            return self._foo1(x)\nthisclass MetaMetaclass(type):\n    def __new__(meta, name, bases, attrs):\n        def __new__(meta, name, bases, attrs):\n            cls = type.__new__(meta, name, bases, attrs)\n            cls._label = 'Made in %s' % meta.__name__\n            return cls \n        attrs['__new__'] = __new__\n        return type.__new__(meta, name, bases, attrs)\n\nclass China(type):\n    __metaclass__ = MetaMetaclass\n\nclass Taiwan(type):\n    __metaclass__ = MetaMetaclass\n\nclass A(object):\n    __metaclass__ = China\n\nclass B(object):\n    __metaclass__ = Taiwan\n\nprint A._label # Made in China\nprint B._label # Made in Taiwan\n"}, {"idx": "webquery-test-7", "doc": "Escape special characters in a Python string", "code": "re.escape&gt;&gt;&gt; import re\n&gt;&gt;&gt; re.escape(r'\\ a.*$')\n'\\\\\\\\\\\\ a\\\\.\\\\*\\\\$'\n&gt;&gt;&gt; print(re.escape(r'\\ a.*$'))\n\\\\\\ a\\.\\*\\$\n&gt;&gt;&gt; re.escape('www.stackoverflow.com')\n'www\\\\.stackoverflow\\\\.com'\n&gt;&gt;&gt; print(re.escape('www.stackoverflow.com'))\nwww\\.stackoverflow\\.com\nre.escape()"}, {"idx": "webquery-test-8", "doc": "How to identify whether a file is normal file or directory", "code": "os.path.isdir()os.path.isdir()"}, {"idx": "webquery-test-9", "doc": "Complex numbers in python", "code": "&gt;&gt;&gt; 1j\n1j\n&gt;&gt;&gt; 1J\n1j\n&gt;&gt;&gt; 1j * 1j\n(-1+0j)\ncomplex&gt;&gt;&gt; complex(2,3)\n(2+3j)\n&gt;&gt;&gt; z = 2+3j\n&gt;&gt;&gt; z.real\n2.0\n&gt;&gt;&gt; z.imag\n3.0\n&gt;&gt;&gt; z.conjugate()\n(2-3j)\n&gt;&gt;&gt; abs(3 + 4j)\n5.0\n&gt;&gt;&gt; pow(3 + 4j, 2)\n(-7+24j)\ncmath&gt;&gt;&gt; import cmath\n&gt;&gt;&gt; cmath.sin(2 + 3j)\n(9.15449914691143-4.168906959966565j)\n"}, {"idx": "webquery-test-10", "doc": "pip install: Please check the permissions and owner of that directory", "code": "pippippipsudo -H pip install foo\nman sudoman sudoman sudoman sudo$HOME/Library/Log$HOME/Library/Log$HOME/Library/Log$HOME/Library/Log$HOME/Library/Logsudo -H"}, {"idx": "webquery-test-11", "doc": "Should I use `import os.path` or `import os`?", "code": "os.pathos.pathos.pathos.pathos.pathos.pathsys.modulessys.modulessys.modulessys.modulessys.modulessys.modulessys.modulesos.pathos.pathos.pathos.pathos.pathosososososososos"}, {"idx": "webquery-test-12", "doc": "WebDriver click() vs JavaScript click()", "code": "divdivdivdiv"}, {"idx": "webquery-test-13", "doc": "TypeError: only integer scalar arrays can be converted to a scalar index with 1D numpy indices array", "code": "X_trainout_images = np.array(X_train)[indices.astype(int)]\n"}, {"idx": "webquery-test-14", "doc": "Redirecting stdout to \"nothing\" in python", "code": "import os\nimport sys\nf = open(os.devnull, 'w')\nsys.stdout = f\nf = open('nul', 'w')\nsys.stdout = f\nf = open('/dev/null', 'w')\nsys.stdout = f\n"}, {"idx": "webquery-test-15", "doc": "Get raw POST body in Python Flask regardless of Content-Type header", "code": "request.get_data()request.get_data()request.get_data()request.get_data()request.datarequest.datarequest.datarequest.datarequest.datarequest.datarequest.data"}, {"idx": "webquery-test-1", "doc": "How can I open the interactive matplotlib window in IPython notebook?", "code": "In [2]: %matplotlib inline \nIn [3]: plot(...)\n\nIn [4]: %matplotlib qt  # wx, gtk, osx, tk, empty uses default\nIn [5]: plot(...) \n"}, {"idx": "webquery-test-2", "doc": "Remove or adapt border of frame of legend using matplotlib", "code": "plt.legend(frameon=False)\nleg = plt.legend()\nleg.get_frame().set_edgecolor('b')\nleg = plt.legend()\nleg.get_frame().set_linewidth(0.0)\nmatplotlibaxes.legend(frameon=False)\n\nleg = axes.legend()\nleg.get_frame().set_edgecolor('b')\nleg.get_frame().set_linewidth(0.0)\n"}, {"idx": "webquery-test-3", "doc": "How to display full output in Jupyter, not only last result?", "code": "from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n"}, {"idx": "webquery-test-4", "doc": "Is it possible to install another version of Python to Virtualenv?", "code": "$ virtualenv\nYou must provide a DEST_DIR\nUsage: virtualenv [OPTIONS] DEST_DIR\n\nOptions:\n  --version             show program's version number and exit.\n  -h, --help            show this help message and exit.\n  -v, --verbose         Increase verbosity.\n  -q, --quiet           Decrease verbosity.\n  -p PYTHON_EXE, --python=PYTHON_EXE\n                        The Python interpreter to use, e.g.,\n                        --python=python2.5 will use the python2.5 interpreter\n                        to create the new environment.  The default is the\n                        interpreter that virtualenv was installed with\n                        (/usr/bin/python)\n  --clear               Clear out the non-root install and start from scratch\n  --no-site-packages    Don't give access to the global site-packages dir to\n                        the virtual environment\n  --unzip-setuptools    Unzip Setuptools or Distribute when installing it\n  --relocatable         Make an EXISTING virtualenv environment relocatable.\n                        This fixes up scripts and makes all .pth files\n                        relative\n  --distribute          Use Distribute instead of Setuptools. Set environ\n                        variable VIRTUALENV_USE_DISTRIBUTE to make it the\n                        default\n  --prompt==PROMPT      Provides an alternative prompt prefix for this\n                        environment\nherePython sourcemkdir ~/src\nmkdir ~/.localpython\ncd ~/src\nwget http://www.python.org/ftp/python/2.7.1/Python-2.7.1.tgz\ntar -zxvf Python-2.7.1.tgz\ncd Python-2.7.1\n\nmake clean\n./configure --prefix=/home/${USER}/.localpython\nmake\nmake install\nvirtualenv sourcecd ~/src\nwget http://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.5.2.tar.gz#md5=fbcefbd8520bb64bc24a560c6019a73c\ntar -zxvf virtualenv-1.5.2.tar.gz\ncd virtualenv-1.5.2/\n~/.localpython/bin/python setup.py install\nvirtualenv docsmkdir /home/${USER}/virtualenvs\ncd /home/${USER}/virtualenvs\n~/.localpython/bin/virtualenv py2.7 --python=/home/${USER}/.localpython/bin/python2.7\ncd ~/virtualenvs/py2.7/bin\nsource ./activate\n(py2.7)$ python\nPython 2.7.1 (r271:86832, Mar 31 2011, 15:31:37) \n[GCC 4.4.5] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; exit()\n\n(py2.7)$ deactivate\n$ python\nPython 2.6.6 (r266:84292, Sep 15 2010, 15:52:39) \n[GCC 4.4.5] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; \n"}, {"idx": "webquery-test-5", "doc": "Python loop counter in a for loop", "code": "enumerate()def draw_menu(options, selected_index):\n    for counter, option in enumerate(options):\n        if counter == selected_index:\n            print \" [*] %s\" % option\n        else:\n            print \" [ ] %s\" % option    \n\noptions = ['Option 0', 'Option 1', 'Option 2', 'Option 3']\ndraw_menu(options, 2)\ncounter, optioncounter, option"}, {"idx": "webquery-test-6", "doc": "Argparse: Required argument 'y' if 'x' is present", "code": "if args.prox and (args.lport is None or args.rport is None):\n    parser.error(\"--prox requires --lport and --rport.\")\n"}, {"idx": "webquery-test-7", "doc": "Python constructor and default value", "code": "class Node:\n     def __init__(self, wordList=None, adjacencyList=None):\n        if wordList is None:\n            self.wordList = []\n        else:\n             self.wordList = wordList \n        if adjacencyList is None:\n            self.adjacencyList = []\n        else:\n             self.adjacencyList = adjacencyList \n"}, {"idx": "webquery-test-8", "doc": "Why does using from __future__ import print_function breaks Python2-style print?", "code": "from __future__ import print_functionfrom __future__ import print_functionfrom __future__ import print_functionfrom __future__ import print_functionfrom __future__ import print_function\n\nimport sys, os, time\n\nfor x in range(0,10):\n    print(x, sep=' ', end='')  # No need for sep here, but okay :)\n    time.sleep(1)\n__future____future__"}, {"idx": "webquery-test-9", "doc": "Is there any way to show the dependency trees for pip packages?", "code": "pipdeptree$ pip install pipdeptree\n$ pipdeptree -fl\nWarning!!! Cyclic dependencies found:\n------------------------------------------------------------------------\nxlwt==0.7.5\nruamel.ext.rtf==0.1.1\nxlrd==0.9.3\nopenpyxl==2.0.4\n  - jdcal==1.0\npymongo==2.7.1\nreportlab==3.1.8\n  - Pillow==2.5.1\n  - pip\n  - setuptools\nrequirements.txtpipdeptree --freeze  --warn silence | grep -P '^[\\w0-9\\-=.]+' &gt; requirements.txt\npipdeptreepipdeptree"}, {"idx": "webquery-test-10", "doc": "Best way to handle list.index(might-not-exist) in python?", "code": "ValueErrorValueErrorindex"}, {"idx": "webquery-test-11", "doc": "How does Python manage int and long?", "code": "intintsys.maxintsys.maxintsys.maxintsys.maxint"}, {"idx": "webquery-test-12", "doc": "Flake8: Ignore specific warning for entire file", "code": "--per-file-ignoresflake8 --per-file-ignores=\"project/__init__.py:F401 setup.py:E121\"\nper-file-ignores =\n    project/__init__.py:F401\n    setup.py:E121\n    other_project/*:W9\nnoqanoqanoqa"}, {"idx": "webquery-test-13", "doc": "Add column in dataframe from list", "code": "df['new_col'] = mylist\nse = pd.Series(mylist)\ndf['new_col'] = se.values\ndf['new_col'] = np.array(mylist)\n"}, {"idx": "webquery-test-14", "doc": "Move column by name to front of table in pandas", "code": "locIn [27]:\n# get a list of columns\ncols = list(df)\n# move the column to head of list using index, pop and insert\ncols.insert(0, cols.pop(cols.index('Mid')))\ncols\nOut[27]:\n['Mid', 'Net', 'Upper', 'Lower', 'Zsore']\nIn [28]:\n# use ix to reorder\ndf = df.loc[:, cols]\ndf\nOut[28]:\n                      Mid Net  Upper   Lower  Zsore\nAnswer_option                                      \nMore_than_once_a_day    2  0%  0.22%  -0.12%     65\nOnce_a_day              3  0%  0.32%  -0.19%     45\nSeveral_times_a_week    4  2%  2.45%   1.10%     78\nOnce_a_week             6  1%  1.63%  -0.40%     65\nIn [39]:\nmid = df['Mid']\ndf.drop(labels=['Mid'], axis=1,inplace = True)\ndf.insert(0, 'Mid', mid)\ndf\nOut[39]:\n                      Mid Net  Upper   Lower  Zsore\nAnswer_option                                      \nMore_than_once_a_day    2  0%  0.22%  -0.12%     65\nOnce_a_day              3  0%  0.32%  -0.19%     45\nSeveral_times_a_week    4  2%  2.45%   1.10%     78\nOnce_a_week             6  1%  1.63%  -0.40%     65\nixdf = df.ix[:, cols]\nixix"}, {"idx": "webquery-test-15", "doc": "How to frame two for loops in list comprehension python", "code": "[entry for tag in tags for entry in entries if tag in entry]\nif-elseif-elseif-else[entry if tag in entry else [] for tag in tags for entry in entries]\n"}, {"idx": "webquery-test-16", "doc": "cartesian product in pandas", "code": "mergefrom pandas import DataFrame\ndf1 = DataFrame({'col1':[1,2],'col2':[3,4]})\ndf2 = DataFrame({'col3':[5,6]})    \n\ndf1.merge(df2, how='cross')\nfrom pandas import DataFrame, merge\ndf1 = DataFrame({'key':[1,1], 'col1':[1,2],'col2':[3,4]})\ndf2 = DataFrame({'key':[1,1], 'col3':[5,6]})\n\nmerge(df1, df2,on='key')[['col1', 'col2', 'col3']]\n   col1  col2  col3\n0     1     3     5\n1     1     3     6\n2     2     4     5\n3     2     4     6\n"}, {"idx": "webquery-test-17", "doc": "sql \"LIKE\" equivalent in django query", "code": "__contains__containsresult = table.objects.filter(string__contains='pattern')\nSELECT ... WHERE string LIKE '%pattern%';\n"}, {"idx": "webquery-test-18", "doc": "pip broke. how to fix DistributionNotFound error?", "code": "easy_installeasy_installeasy_install --upgrade pip\n"}, {"idx": "webquery-test-19", "doc": "How Python web frameworks, WSGI and CGI fit together", "code": "mod_wsgimod_wsgimod_wsgimod_wsgimod_wsgiApache -&gt; mod_fastcgi -&gt; FLUP (via FastCGI protocol) -&gt; Django (via WSGI protocol)\nmanage.py runfcgi"}, {"idx": "webquery-test-20", "doc": "Doing something before program exit", "code": "atexitimport atexit\n\ndef exit_handler():\n    print 'My application is ending!'\n\natexit.register(exit_handler)\n"}, {"idx": "webquery-test-1", "doc": "Find the max of two or more columns with pandas", "code": "&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; df = pd.DataFrame({\"A\": [1,2,3], \"B\": [-2, 8, 1]})\n&gt;&gt;&gt; df\n   A  B\n0  1 -2\n1  2  8\n2  3  1\n&gt;&gt;&gt; df[[\"A\", \"B\"]]\n   A  B\n0  1 -2\n1  2  8\n2  3  1\n&gt;&gt;&gt; df[[\"A\", \"B\"]].max(axis=1)\n0    1\n1    8\n2    3\n&gt;&gt;&gt; df[\"C\"] = df[[\"A\", \"B\"]].max(axis=1)\n&gt;&gt;&gt; df\n   A  B  C\n0  1 -2  1\n1  2  8  8\n2  3  1  3\n&gt;&gt;&gt; df[\"C\"] = df.max(axis=1)\n.apply(max, axis=1)"}, {"idx": "webquery-test-2", "doc": "How to make two plots side-by-side", "code": "plt.subplot(1, 2, 1)\n\n...\n\nplt.subplot(1, 2, 2)\nsubplotsubplotsubplotplt.tight_layout()\n"}, {"idx": "webquery-test-3", "doc": "Running bash script from within python", "code": "shell=Trueshell=Trueshell=Trueshell=Trueshell=Trueshell=True"}, {"idx": "webquery-test-4", "doc": "argparse store false if unspecified", "code": "store_truestore_false"}, {"idx": "webquery-test-5", "doc": "How to remove specific element from an array using python", "code": "&gt;&gt;&gt; x = ['ala@ala.com', 'bala@bala.com']\n&gt;&gt;&gt; x\n['ala@ala.com', 'bala@bala.com']\n&gt;&gt;&gt; x.remove('ala@ala.com')\n&gt;&gt;&gt; x\n['bala@bala.com']\nindex = initial_list.index(item1)\ndel initial_list[index]\ndel other_list[index]\n"}, {"idx": "webquery-test-6", "doc": "How to set a cell to NaN in a pandas dataframe", "code": "replaceIn [106]:\ndf.replace('N/A',np.NaN)\n\nOut[106]:\n    x    y\n0  10   12\n1  50   11\n2  18  NaN\n3  32   13\n4  47   15\n5  20  NaN\nlocIn [108]:\ndf.loc[df['y'] == 'N/A','y'] = np.nan\ndf\n\nOut[108]:\n    x    y\n0  10   12\n1  50   11\n2  18  NaN\n3  32   13\n4  47   15\n5  20  NaN\n"}, {"idx": "webquery-test-7", "doc": "How do I install a pip package globally instead of locally?", "code": "sudosudosudo -H pip install flake8\nsudo pip install flake8sudo pip install flake8"}, {"idx": "webquery-test-8", "doc": "Python TypeError: not enough arguments for format string", "code": "instr = \"'%s', '%s', '%d', '%s', '%s', '%s', '%s'\" % (softname, procversion, int(percent), exe, description, company, procurl)\nintstr = (\"'%s', '%s', '%d', '%s', '%s', '%s', '%s'\" % softname), procversion, int(percent), exe, description, company, procurl\n&gt;&gt;&gt; \"%s %s\" % 'hello', 'world'\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: not enough arguments for format string\n&gt;&gt;&gt; \"%s %s\" % ('hello', 'world')\n'hello world'\n"}, {"idx": "webquery-test-9", "doc": "Where is virtualenvwrapper.sh after pip install?", "code": "findfind / -name virtualenvwrapper.sh/usr/local/bin/virtualenvwrapper.sh~/.local/bin/virtualenvwrapper.sh"}, {"idx": "webquery-test-10", "doc": "Python: Finding differences between elements of a list", "code": "&gt;&gt;&gt; t\n[1, 3, 6]\n&gt;&gt;&gt; [j-i for i, j in zip(t[:-1], t[1:])]  # or use itertools.izip in py2k\n[2, 3]\n"}, {"idx": "webquery-test-11", "doc": "Django TemplateSyntaxError - 'staticfiles' is not a registered tag library", "code": "{% load staticfiles %}\n{% load static from staticfiles %}\n{% load admin_static %}\n{% load static %}\n{% load staticfiles %}{% load staticfiles %}"}, {"idx": "webquery-test-12", "doc": "How can I install a previous version of Python 3 in macOS using homebrew?", "code": "brew unlink python # ONLY if you have installed (with brew) another version of python 3\nbrew install --ignore-dependencies https://raw.githubusercontent.com/Homebrew/homebrew-core/f2a764ef944b1080be64bd88dca9a1d80130c558/Formula/python.rb\nbrew info python           # To see what you have previously installed\nbrew switch python 3.x.x_x # Ex. 3.6.5_1\npython@2python@2python3python3brewbrew install https://the/address/to/the/formula/FORMULA_NAME.rb\nbrew install https://raw.githubusercontent.com/Homebrew/homebrew-core/COMMIT_IDENTIFIER/Formula/python.rb\n"}, {"idx": "webquery-test-13", "doc": "Properties file in python (similar to Java Properties)", "code": "ConfigParserConfigParserPythonPropertyReader.py#!/usr/bin/python    \nimport ConfigParser\nconfig = ConfigParser.RawConfigParser()\nconfig.read('ConfigFile.properties')\n\nprint config.get('DatabaseSection', 'database.dbname');\nConfigFile.properties[DatabaseSection]\ndatabase.dbname=unitTest\ndatabase.user=root\ndatabase.password=\n"}, {"idx": "webquery-test-14", "doc": "Get object by id()?", "code": "ctypesimport ctypes\na = \"hello world\"\nprint ctypes.cast(id(a), ctypes.py_object).value\nhello world\n"}, {"idx": "webquery-test-15", "doc": "How do I install PyCrypto on Windows?", "code": "pycryptopycryptoeasy_install http://www.voidspace.org.uk/python/pycrypto-2.6.1/pycrypto-2.6.1.win32-py2.7.exe\n"}, {"idx": "webquery-test-16", "doc": "Concatenating string and integer in Python", "code": "\"{} and {}\".format(\"string\", 1)\n"}, {"idx": "webquery-test-17", "doc": "Chained method calls indentation style in Python", "code": "ShortName.objects.distinct() \\\n         .filter().values()      # looks better\nreturn some_collection.get_objects(locator=l5) \\\n                      .get_distinct(case_insensitive=True) \\\n                      .filter(predicate=query(q5)) \\\n                      .values()\n"}, {"idx": "webquery-test-18", "doc": "Get the first element of each tuple in a list in Python", "code": "res_list = [x[0] for x in rows]\n&gt;&gt;&gt; rows = [(1, 2), (3, 4), (5, 6)]\n&gt;&gt;&gt; [x[0] for x in rows]\n[1, 3, 5]\n&gt;&gt;&gt;\nx[0]res_list = [x for x,_ in rows]\n&gt;&gt;&gt; lst = [(1, 2), (3, 4), (5, 6)]\n&gt;&gt;&gt; [x for x,_ in lst]\n[1, 3, 5]\n&gt;&gt;&gt;\n"}, {"idx": "webquery-test-19", "doc": "Explicitly select items from a list or tuple", "code": "list( myBigList[i] for i in [87, 342, 217, 998, 500] )\n[ myBigList[i] for i in [87, 342, 217, 998, 500] ][ myBigList[i] for i in [87, 342, 217, 998, 500] ][ myBigList[i] for i in [87, 342, 217, 998, 500] ][ myBigList[i] for i in [87, 342, 217, 998, 500] ]numpy.arraynumpy.array&gt;&gt;&gt; import numpy\n&gt;&gt;&gt; myBigList = numpy.array(range(1000))\n&gt;&gt;&gt; myBigList[(87, 342, 217, 998, 500)]\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: invalid index\n&gt;&gt;&gt; myBigList[[87, 342, 217, 998, 500]]\narray([ 87, 342, 217, 998, 500])\n&gt;&gt;&gt; myBigList[numpy.array([87, 342, 217, 998, 500])]\narray([ 87, 342, 217, 998, 500])\ntuple"}, {"idx": "webquery-test-1", "doc": "Good ways to sort a queryset? - Django", "code": "import operator\n\nauths = Author.objects.order_by('-score')[:30]\nordered = sorted(auths, key=operator.attrgetter('last_name'))\nQuerySetQuerySetQuerySetordered_authors = Author.objects.order_by('-score', 'last_name')[:30]\nscorescorescore"}, {"idx": "webquery-test-2", "doc": "ValueError when checking if variable is None or numpy.array", "code": "not anot anot anot anot anot aNoneNoneNoneif a is None:\n    ...\nelse:\n    ...\nisisisis&gt;&gt;&gt; a = numpy.arange(5)\n&gt;&gt;&gt; a == None\narray([False, False, False, False, False])\n&gt;&gt;&gt; if a == None:\n...     pass\n...\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: The truth value of an array with more than one element is ambiguous.\n Use a.any() or a.all()\n# Careful - the type is np.ndarray, not np.array. np.array is a factory function.\nif type(a) is np.ndarray:\n    ...\nelse:\n    ...\nisinstanceisinstanceisinstance# Again, ndarray, not array, because array is a factory function.\nif isinstance(a, np.ndarray):\n    ...\nelse:\n    ...    \n"}, {"idx": "webquery-test-3", "doc": "Print without b' prefix for bytes in Python 3", "code": "decode&gt;&gt;&gt; print(b'hello'.decode())\nhello\n"}, {"idx": "webquery-test-4", "doc": "How to set 'auto' for upper limit, but keep a fixed lower limit with matplotlib.pyplot", "code": "leftleftleftplt.gca().set_xlim(left=0)\nbottombottomplt.gca().set_ylim(bottom=0)\n"}, {"idx": "webquery-test-5", "doc": "Type hinting / annotation (PEP 484) for numpy.ndarray", "code": "typingtypingnumpycythoncythonarray-likearray-likearray-likenumpynumpyIn [586]: np.array({'test':1})   # a dictionary\nOut[586]: array({'test': 1}, dtype=object)\n\nIn [587]: np.array(['one','two'])  # a list\nOut[587]: \narray(['one', 'two'], \n      dtype='&lt;U3')\n\nIn [589]: np.array({'one','two'})  # a set\nOut[589]: array({'one', 'two'}, dtype=object)\ndef foo(x: np.ndarray) -&gt; np.ndarray:\nnumpynumpynumpynumpy"}, {"idx": "webquery-test-6", "doc": "Convert spark DataFrame column to python list", "code": "&gt;&gt;&gt; mvv_list = mvv_count_df.select('mvv').collect()\n&gt;&gt;&gt; mvv_list[0]\nOut: Row(mvv=1)\n&gt;&gt;&gt; firstvalue = mvv_list[0].mvv\nOut: 1\nmvv&gt;&gt;&gt; mvv_array = [int(row.mvv) for row in mvv_list.collect()]\n&gt;&gt;&gt; mvv_array\nOut: [1,2,3,4]\n&gt;&gt;&gt; mvv_count = [int(row.count) for row in mvv_list.collect()]\nOut: TypeError: int() argument must be a string or a number, not 'builtin_function_or_method'\ncountcountcountcount&gt;&gt;&gt; mvv_list = mvv_list.selectExpr(\"mvv as mvv\", \"count as _count\")\n&gt;&gt;&gt; mvv_count = [int(row._count) for row in mvv_list.collect()]\n&gt;&gt;&gt; mvv_array = [int(row['mvv']) for row in mvv_list.collect()]\n&gt;&gt;&gt; mvv_count = [int(row['count']) for row in mvv_list.collect()]\n"}, {"idx": "webquery-test-7", "doc": "Cleanest way to get last item from Python iterator", "code": "*_, last = iterator # for a better understanding check PEP 448\nprint(last)\nlast = next(iterator)\nfor last in iterator:\n    continue\nprint last\ndequefrom collections import deque\n\n#aa is an interator\naa = iter('apple')\n\ndd = deque(aa, maxlen=1)\nlast_element = dd.pop()\n"}, {"idx": "webquery-test-8", "doc": "How to join components of a path when you are constructing a URL in Python", "code": "urllib.parse.urljoin&gt;&gt;&gt; from urllib.parse import urljoin\n&gt;&gt;&gt; urljoin('/media/path/', 'js/foo.js')\n'/media/path/js/foo.js'\n&gt;&gt;&gt; urljoin('/media/path', 'js/foo.js')\n'/media/js/foo.js'\n&gt;&gt;&gt; urljoin('/media/path', '/js/foo.js')\n'/js/foo.js'\n/js/foo.js/js/foo.jsfrom urlparse import urljoin\n"}, {"idx": "webquery-test-9", "doc": "Efficient way to remove keys with empty strings from a dict", "code": "dict((k, v) for k, v in metadata.iteritems() if v)\n{k: v for k, v in metadata.items() if v}\n"}, {"idx": "webquery-test-10", "doc": "What's the common practice for enums in Python?", "code": "class Materials:\n    Shaded, Shiny, Transparent, Matte = range(4)\n\n&gt;&gt;&gt; print Materials.Matte\n3\n"}, {"idx": "webquery-test-11", "doc": "pandas dataframe groupby datetime month", "code": "b = pd.read_csv('b.dat')\nb.index = pd.to_datetime(b['date'],format='%m/%d/%y %I:%M%p')\nb.groupby(by=[b.index.month, b.index.year])\nb.groupby(pd.Grouper(freq='M'))  # update for v0.21+\n"}, {"idx": "webquery-test-12", "doc": "Subprocess changing directory", "code": "cd ..cd ..cdsubprocess.call('cd ..', shell=True) # pointless code! See text below.\nos.chdir()os.chdir()os.chdir()lswd = os.getcwd()\nos.chdir(\"/\")\nsubprocess.Popen(\"ls\")\nos.chdir(wd)\nsubprocess.Popen(\"ls\", cwd=\"/\")\n"}, {"idx": "webquery-test-13", "doc": "pip install access denied on Windows", "code": "pip installpython -m pip install mitmproxy\n"}, {"idx": "webquery-test-14", "doc": "socket.shutdown vs socket.close", "code": "closeclosecloseshutdown"}, {"idx": "webquery-test-15", "doc": "Some built-in to pad a list in python", "code": "a += [''] * (N - len(a))\nanew_a = a + [''] * (N - len(a))\nclass MyList(list):\n    def ljust(self, n, fillvalue=''):\n        return self + [fillvalue] * (n - len(self))\n\na = MyList(['1'])\nb = a.ljust(5, '')\n"}, {"idx": "webquery-test-16", "doc": "How to obtain a QuerySet of all rows, with specific fields for each one of them?", "code": "Employees.objects.values_list('eng_name', flat=True)\neng_nameEmployees.objects.values_list('eng_name', 'rank')\n"}, {"idx": "webquery-test-17", "doc": "[] and {} vs list() and dict(), which is better?", "code": "&gt;&gt;&gt; from timeit import timeit\n&gt;&gt;&gt; timeit(\"[]\")\n0.040084982867934334\n&gt;&gt;&gt; timeit(\"list()\")\n0.17704233359267718\n&gt;&gt;&gt; timeit(\"{}\")\n0.033620194745424214\n&gt;&gt;&gt; timeit(\"dict()\")\n0.1821558326547077\n&gt;&gt;&gt; timeit(\"[1,2,3]\")\n0.24316302770330367\n&gt;&gt;&gt; timeit(\"list((1,2,3))\")\n0.44744206316727286\n&gt;&gt;&gt; timeit(\"list(foo)\", setup=\"foo=(1,2,3)\")\n0.446036018543964\n&gt;&gt;&gt; timeit(\"{'a':1, 'b':2, 'c':3}\")\n0.20868602015059423\n&gt;&gt;&gt; timeit(\"dict(a=1, b=2, c=3)\")\n0.47635635255323905\n&gt;&gt;&gt; timeit(\"dict(bar)\", setup=\"bar=[('a', 1), ('b', 2), ('c', 3)]\")\n0.9028228448029267\n"}, {"idx": "webquery-test-18", "doc": "Update index after sorting data-frame", "code": "reset_indexreset_indexIn [19]: df2 = df2.reset_index(drop=True)\n\nIn [20]: df2\nOut[20]:\n   x  y\n0  0  0\n1  0  1\n2  0  2\n3  1  0\n4  1  1\n5  1  2\n6  2  0\n7  2  1\n8  2  2\n"}, {"idx": "webquery-test-19", "doc": "Display all dataframe columns in a Jupyter Python Notebook", "code": "max_columnsimport pandas as pd\nfrom IPython.display import display\n\ndf = pd.read_csv(\"some_data.csv\")\npd.options.display.max_columns = None\ndisplay(df)\npd.set_option('display.max_columns', None)\nmax_columnspd.set_printoptions(max_columns=500)\n"}, {"idx": "webquery-test-20", "doc": "Importing an ipynb file from another ipynb file?", "code": "%run MyOtherNotebook.ipynb\n%run"}, {"idx": "webquery-test-1", "doc": "Split string using a newline delimiter with Python", "code": "str.splitlines&gt;&gt;&gt; data = \"\"\"a,b,c\n... d,e,f\n... g,h,i\n... j,k,l\"\"\"\n&gt;&gt;&gt; data.splitlines()\n['a,b,c', 'd,e,f', 'g,h,i', 'j,k,l']\n"}, {"idx": "webquery-test-2", "doc": "Pythonic way of checking if a condition holds for any element of a list", "code": "if any(t &lt; 0 for t in x):\n    # do something\nif True in (t &lt; 0 for t in x):\n"}, {"idx": "webquery-test-3", "doc": "How do you run your own code alongside Tkinter's event loop?", "code": "afterafterfrom tkinter import *\n\nroot = Tk()\n\ndef task():\n    print(\"hello\")\n    root.after(2000, task)  # reschedule event in 2 seconds\n\nroot.after(2000, task)\nroot.mainloop()\nafterdef after(self, ms, func=None, *args):\n    \"\"\"Call function once after given time.\n\n    MS specifies the time in milliseconds. FUNC gives the\n    function which shall be called. Additional parameters\n    are given as parameters to the function call.  Return\n    identifier to cancel scheduling with after_cancel.\"\"\"\n"}, {"idx": "webquery-test-4", "doc": "Python, creating objects", "code": "class Student(object):\n    name = \"\"\n    age = 0\n    major = \"\"\n\n    # The class \"constructor\" - It's actually an initializer \n    def __init__(self, name, age, major):\n        self.name = name\n        self.age = age\n        self.major = major\n\ndef make_student(name, age, major):\n    student = Student(name, age, major)\n    return student\nclass Student(object):\n    name = \"\"\n    age = 0\n    major = \"\"\n\ndef make_student(name, age, major):\n    student = Student()\n    student.name = name\n    student.age = age\n    student.major = major\n    # Note: I didn't need to create a variable in the class definition before doing this.\n    student.gpa = float(4.0)\n    return student\n"}, {"idx": "webquery-test-5", "doc": "How do you do natural logs (e.g. \"ln()\") with numpy in Python?", "code": "np.lognp.lognp.log"}, {"idx": "webquery-test-6", "doc": "How to select rows with NaN in particular column?", "code": "df[df['Col2'].isnull()]\n"}, {"idx": "webquery-test-7", "doc": "Convert generator object to list for debugging", "code": "listlst = list(gen)\nlst\nlistdef gen():\n    yield 1\n    yield 2\n    yield 3\n    yield 4\n    yield 5\nimport ipdb\nipdb.set_trace()\n\ng1 = gen()\n\ntext = \"aha\" + \"bebe\"\n\nmylst = range(10, 20)\n$ python code.py \n&gt; /home/javl/sandbox/so/debug/code.py(10)&lt;module&gt;()\n      9 \n---&gt; 10 g1 = gen()\n     11 \n\nipdb&gt; n\n&gt; /home/javl/sandbox/so/debug/code.py(12)&lt;module&gt;()\n     11 \n---&gt; 12 text = \"aha\" + \"bebe\"\n     13 \n\nipdb&gt; lst = list(g1)\nipdb&gt; lst\n[1, 2, 3, 4, 5]\nipdb&gt; q\nExiting Debugger.\npppp$ python code.py \n&gt; /home/javl/sandbox/so/debug/code.py(10)&lt;module&gt;()\n      9 \n---&gt; 10 g1 = gen()\n     11 \n\nipdb&gt; n\n&gt; /home/javl/sandbox/so/debug/code.py(12)&lt;module&gt;()\n     11 \n---&gt; 12 text = \"aha\" + \"bebe\"\n     13 \n\nipdb&gt; p list(g1)\n[1, 2, 3, 4, 5]\nipdb&gt; c\nexecexecipdb&gt; !list(g1)\n[]\nhelp phelp phelp pipdb&gt; help exec\n(!) statement\nExecute the (one-line) statement in the context of\nthe current stack frame.\nThe exclamation point can be omitted unless the first word\nof the statement resembles a debugger command.\nTo assign to a global variable you must always prefix the\ncommand with a 'global' command, e.g.:\n(Pdb) global list_options; list_options = ['-l']\n"}, {"idx": "webquery-test-8", "doc": "Representing graphs (data structure) in Python", "code": "[('A', 'B'), ('B', 'C'), ('B', 'D'), ('C', 'D'), ('E', 'F'), ('F', 'C')]\nGraphGraphGraphimport pprint\nfrom collections import defaultdict\n\n\nclass Graph(object):\n    \"\"\" Graph data structure, undirected by default. \"\"\"\n\n    def __init__(self, connections, directed=False):\n        self._graph = defaultdict(set)\n        self._directed = directed\n        self.add_connections(connections)\n\n    def add_connections(self, connections):\n        \"\"\" Add connections (list of tuple pairs) to graph \"\"\"\n\n        for node1, node2 in connections:\n            self.add(node1, node2)\n\n    def add(self, node1, node2):\n        \"\"\" Add connection between node1 and node2 \"\"\"\n\n        self._graph[node1].add(node2)\n        if not self._directed:\n            self._graph[node2].add(node1)\n\n    def remove(self, node):\n        \"\"\" Remove all references to node \"\"\"\n\n        for n, cxns in self._graph.items():  # python3: items(); python2: iteritems()\n            try:\n                cxns.remove(node)\n            except KeyError:\n                pass\n        try:\n            del self._graph[node]\n        except KeyError:\n            pass\n\n    def is_connected(self, node1, node2):\n        \"\"\" Is node1 directly connected to node2 \"\"\"\n\n        return node1 in self._graph and node2 in self._graph[node1]\n\n    def find_path(self, node1, node2, path=[]):\n        \"\"\" Find any path between node1 and node2 (may not be shortest) \"\"\"\n\n        path = path + [node1]\n        if node1 == node2:\n            return path\n        if node1 not in self._graph:\n            return None\n        for node in self._graph[node1]:\n            if node not in path:\n                new_path = self.find_path(node, node2, path)\n                if new_path:\n                    return new_path\n        return None\n\n    def __str__(self):\n        return '{}({})'.format(self.__class__.__name__, dict(self._graph))\nfind_shortest_path&gt;&gt;&gt; connections = [('A', 'B'), ('B', 'C'), ('B', 'D'),\n                   ('C', 'D'), ('E', 'F'), ('F', 'C')]\n&gt;&gt;&gt; g = Graph(connections, directed=True)\n&gt;&gt;&gt; pretty_print = pprint.PrettyPrinter()\n&gt;&gt;&gt; pretty_print.pprint(g._graph)\n{'A': {'B'},\n 'B': {'D', 'C'},\n 'C': {'D'},\n 'E': {'F'},\n 'F': {'C'}}\n\n&gt;&gt;&gt; g = Graph(connections)  # undirected\n&gt;&gt;&gt; pretty_print = pprint.PrettyPrinter()\n&gt;&gt;&gt; pretty_print.pprint(g._graph)\n{'A': {'B'},\n 'B': {'D', 'A', 'C'},\n 'C': {'D', 'F', 'B'},\n 'D': {'C', 'B'},\n 'E': {'F'},\n 'F': {'E', 'C'}}\n\n&gt;&gt;&gt; g.add('E', 'D')\n&gt;&gt;&gt; pretty_print.pprint(g._graph)\n{'A': {'B'},\n 'B': {'D', 'A', 'C'},\n 'C': {'D', 'F', 'B'},\n 'D': {'C', 'E', 'B'},\n 'E': {'D', 'F'},\n 'F': {'E', 'C'}}\n\n&gt;&gt;&gt; g.remove('A')\n&gt;&gt;&gt; pretty_print.pprint(g._graph)\n{'B': {'D', 'C'},\n 'C': {'D', 'F', 'B'},\n 'D': {'C', 'E', 'B'},\n 'E': {'D', 'F'},\n 'F': {'E', 'C'}}\n\n&gt;&gt;&gt; g.add('G', 'B')\n&gt;&gt;&gt; pretty_print.pprint(g._graph)\n{'B': {'D', 'G', 'C'},\n 'C': {'D', 'F', 'B'},\n 'D': {'C', 'E', 'B'},\n 'E': {'D', 'F'},\n 'F': {'E', 'C'},\n 'G': {'B'}}\n\n&gt;&gt;&gt; g.find_path('G', 'E')\n['G', 'B', 'D', 'C', 'F', 'E']\n"}, {"idx": "webquery-test-9", "doc": "Python Logging (function name, file name, line number) using a single file", "code": "funcNameimport logging\nlogger = logging.getLogger(__name__)\nFORMAT = \"[%(filename)s:%(lineno)s - %(funcName)20s() ] %(message)s\"\nlogging.basicConfig(format=FORMAT)\nlogger.setLevel(logging.DEBUG)\nlogger.debug('your message') \n[invRegex.py:150 -          handleRange() ] ['[A-Z]']\n[invRegex.py:155 -     handleRepetition() ] [[&lt;__main__.CharacterRangeEmitter object at 0x10ba03050&gt;, '{', '1', '}']]\n[invRegex.py:197 -          handleMacro() ] ['\\\\d']\n[invRegex.py:155 -     handleRepetition() ] [[&lt;__main__.CharacterRangeEmitter object at 0x10ba03950&gt;, '{', '1', '}']]\n[invRegex.py:210 -       handleSequence() ] [[&lt;__main__.GroupEmitter object at 0x10b9fedd0&gt;, &lt;__main__.GroupEmitter object at 0x10ba03ad0&gt;]]\n"}, {"idx": "webquery-test-10", "doc": "how to convert an RGB image to numpy array?", "code": "import cv2\nim = cv2.imread(\"abc.tiff\",mode='RGB')\nprint type(im)\n&lt;type 'numpy.ndarray'&gt;\n"}, {"idx": "webquery-test-11", "doc": "Using Pylint with Django", "code": "ignoresignorespip install pylint-django\n--load-plugins pylint_django\n"}, {"idx": "webquery-test-12", "doc": "How to get a reference to current module's attributes in Python", "code": "import sys\ndir(sys.modules[__name__])\n"}, {"idx": "webquery-test-13", "doc": "How to join absolute and relative urls?", "code": "&gt;&gt;&gt; import urlparse\n&gt;&gt;&gt; urlparse.urljoin(url1, url2)\n'http://127.0.0.1/test1/test4/test6.xml'\n&gt;&gt;&gt; import urllib.parse\n&gt;&gt;&gt; urllib.parse.urljoin(url1, url2)\n'http://127.0.0.1/test1/test4/test6.xml'\n"}, {"idx": "webquery-test-14", "doc": "Can you give a Django app a verbose name for use throughout the admin?", "code": "default_app_configdefault_app_configdefault_app_configINSTALLED_APPS = [\n    # ...snip...\n    'yourapp.apps.YourAppConfig',\n]\nAppConfig# in yourapp/apps.py\nfrom django.apps import AppConfig\n\nclass YourAppConfig(AppConfig):\n    name = 'yourapp'\n    verbose_name = 'Fancy Title'\ndefault_app_configdefault_app_config# in yourapp/__init__.py\ndefault_app_config = 'yourapp.apps.YourAppConfig'\nclass MyModel(models.Model):\n        pass\n    class Meta:\n        app_label = 'My APP name'\n"}, {"idx": "webquery-test-15", "doc": "write() versus writelines() and concatenated strings", "code": "writelineswritelinesline1 + \"\\n\" + line2line1 + \"\\n\" + line2\"\\n\".join(list_of_lines)"}, {"idx": "webquery-test-16", "doc": "Python pandas insert list into a cell", "code": "set_valueset_valueset_valueset_valueset_valueset_valuedf = pd.DataFrame(data={'A': [1, 2, 3], 'B': ['x', 'y', 'z']})\n\ndf.at[1, 'B'] = ['m', 'n']\n\ndf =\n    A   B\n0   1   x\n1   2   [m, n]\n2   3   z\ndtype=object&gt;&gt;&gt; df = pd.DataFrame(data={'A': [1, 2, 3], 'B': [1,2,3]})\n&gt;&gt;&gt; df.dtypes\nA    int64\nB    int64\ndtype: object\n\n&gt;&gt;&gt; df.at[1, 'B'] = [1, 2, 3]\nValueError: setting an array element with a sequence\n\n&gt;&gt;&gt; df['B'] = df['B'].astype('object')\n&gt;&gt;&gt; df.at[1, 'B'] = [1, 2, 3]\n&gt;&gt;&gt; df\n   A          B\n0  1          1\n1  2  [1, 2, 3]\n2  3          3\n"}, {"idx": "webquery-test-1", "doc": "Fast check for NaN in NumPy", "code": "numpy.sumnumpy.sumIn [13]: %timeit np.isnan(np.min(x))\n1000 loops, best of 3: 244 us per loop\n\nIn [14]: %timeit np.isnan(np.sum(x))\n10000 loops, best of 3: 97.3 us per loop\nminminminminminIn [40]: x = np.random.rand(100000)\n\nIn [41]: %timeit np.isnan(np.min(x))\n10000 loops, best of 3: 153 us per loop\n\nIn [42]: %timeit np.isnan(np.sum(x))\n10000 loops, best of 3: 95.9 us per loop\n\nIn [43]: x[50000] = np.nan\n\nIn [44]: %timeit np.isnan(np.min(x))\n1000 loops, best of 3: 239 us per loop\n\nIn [45]: %timeit np.isnan(np.sum(x))\n10000 loops, best of 3: 95.8 us per loop\n\nIn [46]: x[0] = np.nan\n\nIn [47]: %timeit np.isnan(np.min(x))\n1000 loops, best of 3: 326 us per loop\n\nIn [48]: %timeit np.isnan(np.sum(x))\n10000 loops, best of 3: 95.9 us per loop\n"}, {"idx": "webquery-test-2", "doc": "Generate random array of floats between a range", "code": "np.random.uniformsampl = np.random.uniform(low=0.5, high=13.3, size=(50,))\n"}, {"idx": "webquery-test-3", "doc": "Iterating over a numpy array", "code": "&gt;&gt;&gt; a =numpy.array([[1,2],[3,4],[5,6]])\n&gt;&gt;&gt; for (x,y), value in numpy.ndenumerate(a):\n...  print x,y\n... \n0 0\n0 1\n1 0\n1 1\n2 0\n2 1\nX = np.zeros((100, 100, 100))\n\n%timeit list([((i,j,k), X[i,j,k]) for i in range(X.shape[0]) for j in range(X.shape[1]) for k in range(X.shape[2])])\n1 loop, best of 3: 376 ms per loop\n\n%timeit list(np.ndenumerate(X))\n1 loop, best of 3: 570 ms per loop\nndenumeratendenumeratea = X.flat\n%timeit list([(a.coords, x) for x in a.flat])\n1 loop, best of 3: 305 ms per loop\n"}, {"idx": "webquery-test-4", "doc": "What values are valid in Pandas 'Freq' tags?", "code": "Alias    Description\nB        business day frequency\nC        custom business day frequency\nD        calendar day frequency\nW        weekly frequency\nM        month end frequency\nSM       semi-month end frequency (15th and end of month)\nBM       business month end frequency\nCBM      custom business month end frequency\nMS       month start frequency\nSMS      semi-month start frequency (1st and 15th)\nBMS      business month start frequency\nCBMS     custom business month start frequency\nQ        quarter end frequency\nBQ       business quarter end frequency\nQS       quarter start frequency\nBQS      business quarter start frequency\nA, Y     year end frequency\nBA, BY   business year end frequency\nAS, YS   year start frequency\nBAS, BYS business year start frequency\nBH       business hour frequency\nH        hourly frequency\nT, min   minutely frequency\nS        secondly frequency\nL, ms    milliseconds\nU, us    microseconds\nN        nanoseconds\n"}, {"idx": "webquery-test-5", "doc": "Is it pythonic to import inside functions?", "code": "ImportErrorpyChecker"}, {"idx": "webquery-test-6", "doc": "Meaning of python -m flag", "code": "python3python3.venvpython3.9 -m venv .venv         # \"py -3.9\" on Windows\nsource .venv/bin/activate    # \".venv\\Scripts\\activate\" on Windows \npythonpip install &lt;some-package&gt;\npippython -m pip install &lt;some-package&gt;\n-m-mpythonCommand not found$PATH$PATH"}, {"idx": "webquery-test-7", "doc": "How to convert column with dtype as object to string in Pandas Dataframe", "code": "df['column'] = df['column'].astype('|S80') #where the max length is set at 80 bytes,\ndf['column'] = df['column'].astype('|S') # which will by default set the length to the max len it encounters\n"}, {"idx": "webquery-test-8", "doc": "Hide tick label values but keep axis labels", "code": "ax.set_xticklabels()ax.set_xticklabels()import matplotlib.pyplot as plt\n\n# Create Figure and Axes instances\nfig,ax = plt.subplots(1)\n\n# Make your plot, set your axes labels\nax.plot(sim_1['t'],sim_1['V'],'k')\nax.set_ylabel('V')\nax.set_xlabel('t')\n\n# Turn off tick labels\nax.set_yticklabels([])\nax.set_xticklabels([])\n\nplt.show()\nax.set_xticks()ax.set_xticks()ax.set_xticks([])\nax.set_yticks([])\n"}, {"idx": "webquery-test-9", "doc": "How to add value labels on a bar chart", "code": "freq_series.plotfreq_series.plotfreq_series.plotax.patchesax.patchesax.patchesimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Bring some raw data.\nfrequencies = [6, 16, 75, 160, 244, 260, 145, 73, 16, 4, 1]\n# In my original code I create a series and run on that,\n# so for consistency I create a series from the list.\nfreq_series = pd.Series(frequencies)\n\nx_labels = [\n    108300.0,\n    110540.0,\n    112780.0,\n    115020.0,\n    117260.0,\n    119500.0,\n    121740.0,\n    123980.0,\n    126220.0,\n    128460.0,\n    130700.0,\n]\n\n# Plot the figure.\nplt.figure(figsize=(12, 8))\nax = freq_series.plot(kind=\"bar\")\nax.set_title(\"Amount Frequency\")\nax.set_xlabel(\"Amount ($)\")\nax.set_ylabel(\"Frequency\")\nax.set_xticklabels(x_labels)\n\nrects = ax.patches\n\n# Make some labels.\nlabels = [f\"label{i}\" for i in range(len(rects))]\n\nfor rect, label in zip(rects, labels):\n    height = rect.get_height()\n    ax.text(\n        rect.get_x() + rect.get_width() / 2, height + 5, label, ha=\"center\", va=\"bottom\"\n    )\n\nplt.show()\n"}, {"idx": "webquery-test-10", "doc": "Convert image from PIL to openCV format", "code": "pil_image = PIL.Image.open('Image.jpg').convert('RGB') \nopen_cv_image = numpy.array(pil_image) \n# Convert RGB to BGR \nopen_cv_image = open_cv_image[:, :, ::-1].copy() \n"}, {"idx": "webquery-test-11", "doc": "Iterating through a JSON object", "code": "from __future__ import print_function\n\nfor song in json_object:\n    # now song is a dictionary\n    for attribute, value in song.items():\n        print(attribute, value) # example usage\nsong.iteritemssong.iteritems"}, {"idx": "webquery-test-12", "doc": "Creating a new column based on if-elif-else condition", "code": "def f(row):\n    if row['A'] == row['B']:\n        val = 0\n    elif row['A'] &gt; row['B']:\n        val = 1\n    else:\n        val = -1\n    return val\naxis=1In [1]: df['C'] = df.apply(f, axis=1)\n\nIn [2]: df\nOut[2]:\n   A  B  C\na  2  2  0\nb  3  1  1\nc  1  3 -1\ndf['C'] = np.where(\n    df['A'] == df['B'], 0, np.where(\n    df['A'] &gt;  df['B'], 1, -1)) \n"}, {"idx": "webquery-test-13", "doc": "List of tuples to dictionary", "code": "dict()&gt;&gt;&gt; my_list = [('a', 1), ('b', 2)]\n&gt;&gt;&gt; dict(my_list)\n{'a': 1, 'b': 2}\n"}, {"idx": "webquery-test-14", "doc": "What is Ruby equivalent of Python's `s= \"hello, %s. Where is %s?\" % (\"John\",\"Mary\")`", "code": "name1 = \"John\"\nname2 = \"Mary\"\n\"hello, #{name1}.  Where is #{name2}?\"\n\"hello, %s.  Where is %s?\" % [\"John\", \"Mary\"]\n"}, {"idx": "webquery-test-15", "doc": "How to unzip gz file using Python", "code": "import gzip\nimport shutil\nwith gzip.open('file.txt.gz', 'rb') as f_in:\n    with open('file.txt', 'wb') as f_out:\n        shutil.copyfileobj(f_in, f_out)\n"}, {"idx": "webquery-test-16", "doc": "Get enumeration name by value", "code": "&gt;&gt;&gt; Example(1).name\n'one'\n"}, {"idx": "webquery-test-17", "doc": "Add column with number of days between dates in DataFrame pandas", "code": "df[['A','B']] = df[['A','B']].apply(pd.to_datetime) #if conversion required\ndf['C'] = (df['B'] - df['A']).dt.days\n             A          B   C\none 2014-01-01 2014-02-28  58\ntwo 2014-02-03 2014-03-01  26\n"}, {"idx": "webquery-test-18", "doc": "Append column to pandas dataframe", "code": "&gt; dat1 = pd.DataFrame({'dat1': [9,5]})\n&gt; dat2 = pd.DataFrame({'dat2': [7,6]})\n&gt; dat1.join(dat2)\n   dat1  dat2\n0     9     7\n1     5     6\n"}, {"idx": "webquery-test-19", "doc": "Make sure only a single instance of a program is running", "code": "from tendo import singleton\nme = singleton.SingleInstance() # will sys.exit(-1) if other instance is running\neasy_install tendoeasy_install tendo"}, {"idx": "webquery-test-1", "doc": "How to save a new sheet in an existing excel file, using Pandas?", "code": "import pandas as pd\nimport numpy as np\n\npath = r\"C:\\Users\\fedel\\Desktop\\excelData\\PhD_data.xlsx\"\n\nx1 = np.random.randn(100, 2)\ndf1 = pd.DataFrame(x1)\n\nx2 = np.random.randn(100, 2)\ndf2 = pd.DataFrame(x2)\n\nwriter = pd.ExcelWriter(path, engine = 'xlsxwriter')\ndf1.to_excel(writer, sheet_name = 'x1')\ndf2.to_excel(writer, sheet_name = 'x2')\nwriter.save()\nwriter.close()\nimport pandas as pd\nimport numpy as np\nfrom openpyxl import load_workbook\n\npath = r\"C:\\Users\\fedel\\Desktop\\excelData\\PhD_data.xlsx\"\n\nbook = load_workbook(path)\nwriter = pd.ExcelWriter(path, engine = 'openpyxl')\nwriter.book = book\n\nx3 = np.random.randn(100, 2)\ndf3 = pd.DataFrame(x3)\n\nx4 = np.random.randn(100, 2)\ndf4 = pd.DataFrame(x4)\n\ndf3.to_excel(writer, sheet_name = 'x3')\ndf4.to_excel(writer, sheet_name = 'x4')\nwriter.save()\nwriter.close()\n"}, {"idx": "webquery-test-2", "doc": "Convert bytes to int?", "code": "int.from_bytesint.from_bytesint.from_bytesint.from_bytesint.from_bytesint.from_bytesint.from_bytesint.from_bytesint.from_bytesint.from_bytesint.from_bytesint.from_bytes## Examples:\nint.from_bytes(b'\\x00\\x01', \"big\")                         # 1\nint.from_bytes(b'\\x00\\x01', \"little\")                      # 256\n\nint.from_bytes(b'\\x00\\x10', byteorder='little')            # 4096\nint.from_bytes(b'\\xfc\\x00', byteorder='big', signed=True)  #-1024\n"}, {"idx": "webquery-test-3", "doc": "nosetests is capturing the output of my print statements. How to circumvent this?", "code": "$ nosetests --nocapture mytest.py\n$ NOSE_NOCAPTURE=1 nosetests mytests.py\nnose.cfgnose.cfg"}, {"idx": "webquery-test-4", "doc": "Is there a recommended format for multi-line imports?", "code": "from Tkinter import (\n    Button,\n    Canvas,\n    DISABLED,\n    END,\n    Entry,\n    Frame,\n    LEFT,\n    NORMAL,\n    RIDGE,\n    Text,\n    Tk,\n)\n"}, {"idx": "webquery-test-5", "doc": "Assign pandas dataframe column dtypes", "code": "pd.to_datetime, pd.to_timedelta and pd.to_numeric\nconvert_objectsdf = pd.DataFrame({'x': {0: 'a', 1: 'b'}, 'y': {0: '1', 1: '2'}, 'z': {0: '2018-05-01', 1: '2018-05-02'}})\n\ndf.dtypes\n\nx    object\ny    object\nz    object\ndtype: object\n\ndf\n\n   x  y           z\n0  a  1  2018-05-01\n1  b  2  2018-05-02\ndf[\"y\"] = pd.to_numeric(df[\"y\"])\ndf[\"z\"] = pd.to_datetime(df[\"z\"])    \ndf\n\n   x  y          z\n0  a  1 2018-05-01\n1  b  2 2018-05-02\n\ndf.dtypes\n\nx            object\ny             int64\nz    datetime64[ns]\ndtype: object\nconvert_objectsIn [21]: df\nOut[21]: \n   x  y\n0  a  1\n1  b  2\n\nIn [22]: df.dtypes\nOut[22]: \nx    object\ny    object\ndtype: object\n\nIn [23]: df.convert_objects(convert_numeric=True)\nOut[23]: \n   x  y\n0  a  1\n1  b  2\n\nIn [24]: df.convert_objects(convert_numeric=True).dtypes\nOut[24]: \nx    object\ny     int64\ndtype: object\n"}, {"idx": "webquery-test-6", "doc": "NumPy: function for simultaneous max() and min()", "code": "numpy.amin()numpy.amin()"}, {"idx": "webquery-test-7", "doc": "Creating a dynamic choice field", "code": "class waypointForm(forms.Form):\n    def __init__(self, user, *args, **kwargs):\n        super(waypointForm, self).__init__(*args, **kwargs)\n        self.fields['waypoints'] = forms.ChoiceField(\n            choices=[(o.id, str(o)) for o in Waypoint.objects.filter(user=user)]\n        )\nform = waypointForm(user)\nclass waypointForm(forms.ModelForm):\n    def __init__(self, user, *args, **kwargs):\n        super(waypointForm, self).__init__(*args, **kwargs)\n        self.fields['waypoints'] = forms.ModelChoiceField(\n            queryset=Waypoint.objects.filter(user=user)\n        )\n\n    class Meta:\n        model = Waypoint\n"}, {"idx": "webquery-test-8", "doc": "ValueError : I/O operation on closed file", "code": "forforimport csv    \n\nwith open('v.csv', 'w') as csvfile:\n    cwriter = csv.writer(csvfile, delimiter=' ', quotechar='|', quoting=csv.QUOTE_MINIMAL)\n\n    for w, c in p.items():\n        cwriter.writerow(w + c)\nwith&gt;&gt;&gt; with open('/tmp/1', 'w') as f:\n...     print(f.closed)\n... \nFalse\n&gt;&gt;&gt; print(f.closed)\nTrue\n"}, {"idx": "webquery-test-9", "doc": "Class with Object as a parameter", "code": "Tableclass Classic: pass\nclass NewStyle(object): pass\n\nprint(dir(Classic))\n# ['__doc__', '__module__']\n\nprint(dir(NewStyle))\n# ['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']\nclass Foo(Base1, Base2):\nFooFooFooobjectobjectobject"}, {"idx": "webquery-test-10", "doc": "Shared-memory objects in multiprocessing", "code": "fork()numpynumpynumpymultiprocessingmultiprocessingManagermultiprocessing"}, {"idx": "webquery-test-11", "doc": "Difference(s) between merge() and concat() in pandas", "code": "merge()merge()merge()merge()merge()join()join()join()join()df1 = pd.DataFrame({'Key': ['b', 'b', 'a', 'c', 'a', 'a', 'b'], 'data1': range(7)})\n\ndf1:\n   Key  data1\n0   b   0\n1   b   1\n2   a   2\n3   c   3\n4   a   4\n5   a   5\n6   b   6\n\ndf2 = pd.DataFrame({'Key': ['a', 'b', 'd'], 'data2': range(3)})\n\ndf2:\n    Key data2\n0   a   0\n1   b   1\n2   d   2\n\n#Merge\n# The 2 dataframes are merged on the basis of values in column \"Key\" as it is \n# a common column in 2 dataframes\n\npd.merge(df1, df2)\n\n   Key data1 data2\n0   b    0    1\n1   b    1    1\n2   b    6    1\n3   a    2    0\n4   a    4    0\n5   a    5    0\n\n#Concat\n# df2 dataframe is appended at the bottom of df1 \n\npd.concat([df1, df2])\n\n   Key data1 data2\n0   b   0     NaN\n1   b   1     NaN\n2   a   2     NaN\n3   c   3     NaN\n4   a   4     NaN\n5   a   5     NaN\n6   b   6     NaN\n0   a   Nan   0\n1   b   Nan   1\n2   d   Nan   2\n"}, {"idx": "webquery-test-12", "doc": "How are the new tf.contrib.summary summaries in TensorFlow evaluated?", "code": "tf.control_dependenciestf.control_dependenciestf.control_dependencies"}, {"idx": "webquery-test-13", "doc": "ImportError: cannot import name main when running pip --version command in windows7 32 bit", "code": "from pip import main\nif __name__ == '__main__':\n    sys.exit(main())\nfrom pip import __main__\nif __name__ == '__main__':\n    sys.exit(__main__._main())\n"}, {"idx": "webquery-test-14", "doc": "Sorting dictionary keys in python", "code": "sorted(d, key=d.get)\n"}, {"idx": "webquery-test-15", "doc": "How to disable Django's CSRF validation?", "code": "@csrf_exemptfrom django.views.decorators.csrf import csrf_exempt\n\n@csrf_exempt\ndef my_view(request):\n    return HttpResponse('Hello world')\n"}, {"idx": "webquery-test-16", "doc": "How to move a model between two Django apps (Django 1.7)", "code": "migrations.SeparateDatabaseAndStatepython manage.py makemigrations old_app --empty\nclass Migration(migrations.Migration):\n\n    dependencies = []\n\n    database_operations = [\n        migrations.AlterModelTable('TheModel', 'newapp_themodel')\n    ]\n\n    state_operations = [\n        migrations.DeleteModel('TheModel')\n    ]\n\n    operations = [\n        migrations.SeparateDatabaseAndState(\n            database_operations=database_operations,\n            state_operations=state_operations)\n    ]\npython manage.py makemigrations new_app\nCreateModelCreateModelclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('old_app', 'above_migration')\n    ]\n\n    state_operations = [\n        migrations.CreateModel(\n            name='TheModel',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n            ],\n            options={\n                'db_table': 'newapp_themodel',\n            },\n            bases=(models.Model,),\n        )\n    ]\n\n    operations = [\n        migrations.SeparateDatabaseAndState(state_operations=state_operations)\n    ]\n"}, {"idx": "webquery-test-17", "doc": "How to create a density plot in matplotlib?", "code": "import numpy as np\nimport seaborn as sns\ndata = [1.5]*7 + [2.5]*2 + [3.5]*8 + [4.5]*3 + [5.5]*1 + [6.5]*8\nsns.set_style('whitegrid')\nsns.kdeplot(np.array(data), bw=0.5)\n"}, {"idx": "webquery-test-18", "doc": "Django 1.7 - makemigrations not detecting changes", "code": "python manage.py makemigrations"}, {"idx": "webquery-test-19", "doc": "Ubuntu running `pip install` gives error 'The following required packages can not be built: * freetype'", "code": "pippipapt-get install libfreetype6-dev\napt-cache search &lt;string&gt;\napt-cache search freetype | grep dev\nyum -y install freetype-devel\nyum search &lt;string&gt;\nyum search freetype | grep devel\nbrew install freetype\nbrew search &lt;string&gt;\nbrew search freetype\n"}, {"idx": "webquery-test-20", "doc": "How can I use Homebrew to install both Python 2 and 3 on Mac?", "code": "$ brew install pyenv\n$ eval \"$(pyenv init -)\"\n~/.bash_profile$ pyenv install 2.7.5\n$ pyenv versions\n$ pyenv global 3.3.1\n$ pyenv local 3.5.2\npython --version$ python --version\nPython 3.5.2\n"}, {"idx": "webquery-test-21", "doc": "How do I get an empty list of any size in Python?", "code": "a = [0] * 10\na = [None] * 10\n"}, {"idx": "webquery-test-1", "doc": "gunicorn autoreload on source change", "code": "gunicorngunicorn"}, {"idx": "webquery-test-2", "doc": "In Python script, how do I set PYTHONPATH?", "code": "PYTHONPATHPYTHONPATHsys.path.append('/path/to/whatever')\nsys.pathsys.pathsys.pathsys.pathsite.addsitedirsite.addsitedirsite.addsitedir"}, {"idx": "webquery-test-3", "doc": "Django Rest Framework - Could not resolve URL for hyperlinked relationship using view name \"user-detail\"", "code": "HyperlinkedModelSerializerHyperlinkedModelSerializerHyperlinkedModelSerializerUserViewSetUserViewSetUserViewSet"}, {"idx": "webquery-test-4", "doc": "How to plot multiple functions on the same figure, in Matplotlib?", "code": "from numpy import *\nimport math\nimport matplotlib.pyplot as plt\n\nt = linspace(0, 2*math.pi, 400)\na = sin(t)\nb = cos(t)\nc = a + b\n\nplt.plot(t, a, 'r') # plotting t, a separately \nplt.plot(t, b, 'b') # plotting t, b separately \nplt.plot(t, c, 'g') # plotting t, c separately \nplt.show()\n"}, {"idx": "webquery-test-5", "doc": "Python/postgres/psycopg2: getting ID of row just inserted", "code": "cursor.execute(\"INSERT INTO .... RETURNING id\")\nid_of_new_row = cursor.fetchone()[0]\nsql_string = \"INSERT INTO domes_hundred (name,name_slug,status) VALUES (%s,%s,%s) RETURNING id;\"\ncursor.execute(sql_string, (hundred_name, hundred_slug, status))\nhundred = cursor.fetchone()[0]\n"}, {"idx": "webquery-test-6", "doc": "Detect if a NumPy array contains at least one non-numeric value?", "code": "numpy.isnan(myarray).any()\nimport timeit\ns = 'import numpy;a = numpy.arange(10000.).reshape((100,100));a[10,10]=numpy.nan'\nms = [\n    'numpy.isnan(a).any()',\n    'any(numpy.isnan(x) for x in a.flatten())']\nfor m in ms:\n    print \"  %.2f s\" % timeit.Timer(m, s).timeit(1000), m\n  0.11 s numpy.isnan(a).any()\n  3.75 s any(numpy.isnan(x) for x in a.flatten())\n&gt;&gt;&gt; a = numpy.float64(42.)\n&gt;&gt;&gt; numpy.isnan(a).any()\nFalse\n&gt;&gt;&gt; a = numpy.float64(numpy.nan)\n&gt;&gt;&gt; numpy.isnan(a).any()\nTrue\n"}, {"idx": "webquery-test-7", "doc": "Replace and overwrite instead of appending", "code": "seekseekimport re\n\nmyfile = \"path/test.xml\"\n\nwith open(myfile, \"r+\") as f:\n    data = f.read()\n    f.seek(0)\n    f.write(re.sub(r\"&lt;string&gt;ABC&lt;/string&gt;(\\s+)&lt;string&gt;(.*)&lt;/string&gt;\", r\"&lt;xyz&gt;ABC&lt;/xyz&gt;\\1&lt;xyz&gt;\\2&lt;/xyz&gt;\", data))\n    f.truncate()\nopen(myfile, 'w')with open(myfile, \"r\") as f:\n    data = f.read()\n\nwith open(myfile, \"w\") as f:\n    f.write(re.sub(r\"&lt;string&gt;ABC&lt;/string&gt;(\\s+)&lt;string&gt;(.*)&lt;/string&gt;\", r\"&lt;xyz&gt;ABC&lt;/xyz&gt;\\1&lt;xyz&gt;\\2&lt;/xyz&gt;\", data))\ntruncatetruncatetruncate()"}, {"idx": "webquery-test-8", "doc": "Python: How would you save a simple settings/config file?", "code": "# python 2.x\n# from ConfigParser import SafeConfigParser\n# config = SafeConfigParser()\n\n# python 3.x\nfrom configparser import ConfigParser\nconfig = ConfigParser()\n\nconfig.read('config.ini')\nconfig.add_section('main')\nconfig.set('main', 'key1', 'value1')\nconfig.set('main', 'key2', 'value2')\nconfig.set('main', 'key3', 'value3')\n\nwith open('config.ini', 'w') as f:\n    config.write(f)\n[main]\nkey1 = value1\nkey2 = value2\nkey3 = value3\n# python 2.x\n# from ConfigParser import SafeConfigParser\n# config = SafeConfigParser()\n\n# python 3.x\nfrom configparser import ConfigParser\nconfig = ConfigParser()\n\nconfig.read('config.ini')\n\nprint(config.get('main', 'key1')) # -&gt; \"value1\"\nprint(config.get('main', 'key2')) # -&gt; \"value2\"\nprint(config.get('main', 'key3')) # -&gt; \"value3\"\n\n# getfloat() raises an exception if the value is not a float\na_float = config.getfloat('main', 'a_float')\n\n# getint() and getboolean() also do this for their respective types\nan_int = config.getint('main', 'an_int')\nimport json\n\nconfig = {\"key1\": \"value1\", \"key2\": \"value2\"}\n\nwith open('config1.json', 'w') as f:\n    json.dump(config, f)\nimport json\n\nwith open('config.json', 'r') as f:\n    config = json.load(f)\n\n#edit the data\nconfig['key3'] = 'value3'\n\n#write it back to the file\nwith open('config.json', 'w') as f:\n    json.dump(config, f)\n"}, {"idx": "webquery-test-9", "doc": "Convert numpy array to tuple", "code": "&gt;&gt;&gt; arr = numpy.array(((2,2),(2,-2)))\n&gt;&gt;&gt; tuple(map(tuple, arr))\n((2, 2), (2, -2))\n"}, {"idx": "webquery-test-10", "doc": "figure of imshow() is too small", "code": "aspectaspectaspectaspectaspectaspectaspectaspectaspectimshow(random.rand(8, 90), interpolation='nearest', aspect='auto')\nfigsizefig, ax = subplots(figsize=(18, 2))\nax.imshow(random.rand(8, 90), interpolation='nearest')\ntight_layout()\n"}, {"idx": "webquery-test-11", "doc": "Putting text in top left corner of matplotlib plot", "code": "textplt.text(x, y, s, fontsize=12)\ntextplt.text(0.5, 0.5, 'matplotlib',\n     horizontalalignment='center',\n     verticalalignment='center',\n     transform = ax.transAxes)\nylim((ymin,ymax))from matplotlib import pyplot as plt\n\nf, ax = plt.subplots()\nplt.scatter([3,5,2,6,8],[5,3,2,1,5])\nplt.text(.01, .99, 'matplotlib', ha='left', va='top', transform=ax.transAxes)\nf.tight_layout()\nhahaha"}, {"idx": "webquery-test-12", "doc": "How to get the input from the Tkinter Text Widget?", "code": ".get().get()def retrieve_input():\n    input = self.myText_Box.get(\"1.0\",END)\n\"1.0\"\"1.0\"\"1.0\"\"1.0\"\"1.0\"\"1.0\"\"1.0\"\"1.0\"def retrieve_input():\n    input = self.myText_Box.get(\"1.0\",'end-1c')\n"}, {"idx": "webquery-test-13", "doc": "Better to 'try' something and catch the exception or test if it's possible first to avoid an exception?", "code": "try/excepttry/excepttry:\n    x = my_list[index]\nexcept IndexError:\n    x = 'NO_ABC'\nindexindex#check whether int conversion will raise an error\nif not isinstance(s, str) or not s.isdigit():\n    return None\nelif len(s) &gt; 10:    #too many digits for int conversion\n    return None\nelse:\n    return int(s)\ntry:\n    return int(s)\nexcept (TypeError, ValueError, OverflowError): #int conversion failed\n    return None\n"}, {"idx": "webquery-test-14", "doc": "Is the list of Python reserved words and builtins available in a library?", "code": "keyword.iskeywordkeyword.iskeyword&gt;&gt;&gt; import keyword\n&gt;&gt;&gt; keyword.iskeyword('break')\nTrue\n&gt;&gt;&gt; keyword.kwlist\n['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', \n 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', \n 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', \n 'while', 'with', 'yield']\nbuiltins&gt;&gt;&gt; import builtins\n&gt;&gt;&gt; dir(builtins)\n['ArithmeticError', 'AssertionError', 'AttributeError',\n 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning',\n 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError',\n 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError',\n 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError',\n 'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError',\n 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError',\n 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError',\n 'MemoryError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented',\n 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning',\n 'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError',\n 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration',\n 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit',\n 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError',\n 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError',\n 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'ZeroDivisionError', '_',\n '__build_class__', '__debug__', '__doc__', '__import__', '__loader__', '__name__',\n '__package__', '__spec__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool',\n 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex',\n 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval',\n 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr',\n 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int',\n 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map',\n 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow',\n 'print', 'property', 'quit', 'range', 'repr', 'reversed', 'round', 'set',\n 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple',\n 'type', 'vars', 'zip']\n__builtin__&gt;&gt;&gt; import __builtin__\n&gt;&gt;&gt; dir(__builtin__)\n['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BufferError', 'BytesWarning', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'None', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'ReferenceError', 'RuntimeError', 'RuntimeWarning', 'StandardError', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '_', '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs', 'all', 'any', 'apply', 'basestring', 'bin', 'bool', 'buffer', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'cmp', 'coerce', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'execfile', 'exit', 'file', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'intern', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'long', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'raw_input', 'reduce', 'reload', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'unichr', 'unicode', 'vars', 'xrange', 'zip']\n"}, {"idx": "webquery-test-15", "doc": "Are global variables thread-safe in Flask? How do I share data between requests?", "code": "multiprocessing.Managerapp.run(threaded=True)app.run(threaded=True)g"}, {"idx": "webquery-test-16", "doc": "Do python projects need a MANIFEST.in, and what should be in it?", "code": "MANIFEST.inMANIFEST.inMANIFEST.inMANIFEST.inMANIFEST.inMANIFEST.inMANIFEST.inMANIFEST.insetup.pysetup.pysetup.pysetup.pysetup.pysetup.pysetup.pysetup.pyinclude README.rst\ninclude COPYING.txt\npython setup.py sdistpython setup.py sdistsetuptoolssetuptoolssetuptoolssetuptoolspbrpbrpbrpbrpbr"}, {"idx": "webquery-test-17", "doc": "What causes [*a] to overallocate?", "code": "[*a]listlistlistfrom sys import getsizeof\n\nfor n in range(13):\n    a = [None] * n\n    l = []\n    l.extend(a)\n    print(n, getsizeof(list(a)),\n             getsizeof([x for x in a]),\n             getsizeof([*a]),\n             getsizeof(l))\ngetsizeof([*a])getsizeof([*a])extendextendextendextendlistlistlistlistlistlistlistlistlistlistlistlistlist"}, {"idx": "webquery-test-18", "doc": "pip install failing with: OSError: [Errno 13] Permission denied on directory", "code": "sudosudosudosudosudo"}, {"idx": "webquery-test-19", "doc": "Finding the mode of a list", "code": "maxmax(set(lst), key=lst.count)\n"}, {"idx": "webquery-test-20", "doc": "How to get everything after last slash in a URL?", "code": "url.rsplit('/', 1)\nurl.rsplit('/', 1)[-1]\n"}, {"idx": "webquery-test-21", "doc": "Underscore vs Double underscore with variables and methods", "code": "_single_leading_underscore_single_leading_underscore_single_leading_underscore_single_leading_underscore_single_leading_underscore_single_leading_underscore_single_leading_underscore_single_leading_underscore_single_leading_underscore_single_leading_underscore_single_leading_underscore_single_leading_underscoreinterfaceinterfaceinterfaceinterfaceinterfaceinterfaceinterfaceinterfaceinterfaceinterfaceinterface"}, {"idx": "webquery-test-1", "doc": "python's re: return True if string contains regex pattern", "code": "import re\nword = 'fubar'\nregexp = re.compile(r'ba[rzd]')\nif regexp.search(word):\n  print('matched')\n"}, {"idx": "webquery-test-2", "doc": "Multiprocessing causes Python to crash and gives an error may have been in progress in another thread when fork() was called", "code": ".bash_profile.bash_profile$ nano .bash_profile\nOBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES\n$ env\nTERM_PROGRAM=Apple_Terminal\nSHELL=/bin/bash\nTERM=xterm-256color\nTMPDIR=/var/folders/pn/vasdlj3ojO#OOas4dasdffJq/T/\nApple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.E7qLFJDSo/Render\nTERM_PROGRAM_VERSION=404\nTERM_SESSION_ID=NONE\nOBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES\n"}, {"idx": "webquery-test-3", "doc": "You are trying to add a non-nullable field 'new_field' to userprofile without a default", "code": "rm  your_app/migrations/* \nrm db.sqlite3\npython manage.py makemigrations\npython manage.py migrate\n"}, {"idx": "webquery-test-4", "doc": "seek() function?", "code": "seek()fp.seek(offset, from_what)\nfpfpfpfrom_whatseekseek"}, {"idx": "webquery-test-5", "doc": "How to use Python to login to a webpage and retrieve cookies for later usage?", "code": "from requests import session\n\npayload = {\n    'action': 'login',\n    'username': USERNAME,\n    'password': PASSWORD\n}\n\nwith session() as c:\n    c.post('http://example.com/login.php', data=payload)\n    response = c.get('http://example.com/protected_page.php')\n    print(response.headers)\n    print(response.text)\n"}, {"idx": "webquery-test-6", "doc": "How to convert a date string to different format", "code": "import datetimedatetime.datetime.strptime(\"2013-1-25\", '%Y-%m-%d').strftime('%m/%d/%y')\n\"01/25/13\"dt = datetime.datetime.strptime(\"2013-1-25\", '%Y-%m-%d')\nprint '{0}/{1}/{2:02}'.format(dt.month, dt.day, dt.year % 100)\n\"1/25/13\"datetime.datetime.strptime(\"2013-1-25\", '%Y-%m-%d').strftime('%m/%d/%y')\n"}, {"idx": "webquery-test-7", "doc": "Add text to Existing PDF using Python", "code": "from pyPdf import PdfFileWriter, PdfFileReader\nimport StringIO\nfrom reportlab.pdfgen import canvas\nfrom reportlab.lib.pagesizes import letter\n\npacket = StringIO.StringIO()\ncan = canvas.Canvas(packet, pagesize=letter)\ncan.drawString(10, 100, \"Hello world\")\ncan.save()\n\n#move to the beginning of the StringIO buffer\npacket.seek(0)\n\n# create a new PDF with Reportlab\nnew_pdf = PdfFileReader(packet)\n# read your existing PDF\nexisting_pdf = PdfFileReader(file(\"original.pdf\", \"rb\"))\noutput = PdfFileWriter()\n# add the \"watermark\" (which is the new pdf) on the existing page\npage = existing_pdf.getPage(0)\npage.mergePage(new_pdf.getPage(0))\noutput.addPage(page)\n# finally, write \"output\" to a real file\noutputStream = file(\"destination.pdf\", \"wb\")\noutput.write(outputStream)\noutputStream.close()\nfrom PyPDF2 import PdfFileWriter, PdfFileReader\nimport io\nfrom reportlab.pdfgen import canvas\nfrom reportlab.lib.pagesizes import letter\n\npacket = io.BytesIO()\ncan = canvas.Canvas(packet, pagesize=letter)\ncan.drawString(10, 100, \"Hello world\")\ncan.save()\n\n#move to the beginning of the StringIO buffer\npacket.seek(0)\n\n# create a new PDF with Reportlab\nnew_pdf = PdfFileReader(packet)\n# read your existing PDF\nexisting_pdf = PdfFileReader(open(\"original.pdf\", \"rb\"))\noutput = PdfFileWriter()\n# add the \"watermark\" (which is the new pdf) on the existing page\npage = existing_pdf.getPage(0)\npage.mergePage(new_pdf.getPage(0))\noutput.addPage(page)\n# finally, write \"output\" to a real file\noutputStream = open(\"destination.pdf\", \"wb\")\noutput.write(outputStream)\noutputStream.close()\n"}, {"idx": "webquery-test-8", "doc": "Multiple linear regression in Python", "code": "sklearn.linear_model.LinearRegressionfrom sklearn import linear_model\nclf = linear_model.LinearRegression()\nclf.fit([[getattr(t, 'x%d' % i) for i in range(1, 8)] for t in texts],\n        [t.y for t in texts])\nclf.coef_sklearn.linear_model"}, {"idx": "webquery-test-9", "doc": "Python 2.7 getting user input and manipulating as string without quotations", "code": "raw_input()raw_input()testVar = raw_input(\"Ask user for something.\")\ninput()input()"}, {"idx": "webquery-test-10", "doc": "how to draw directed graphs using networkx in python?", "code": "import networkx as nx\nimport matplotlib.pyplot as plt\n\nG = nx.DiGraph()\nG.add_edges_from(\n    [('A', 'B'), ('A', 'C'), ('D', 'B'), ('E', 'C'), ('E', 'F'),\n     ('B', 'H'), ('B', 'G'), ('B', 'F'), ('C', 'G')])\n\nval_map = {'A': 1.0,\n           'D': 0.5714285714285714,\n           'H': 0.0}\n\nvalues = [val_map.get(node, 0.25) for node in G.nodes()]\n\n# Specify the edges you want here\nred_edges = [('A', 'C'), ('E', 'C')]\nedge_colours = ['black' if not edge in red_edges else 'red'\n                for edge in G.edges()]\nblack_edges = [edge for edge in G.edges() if edge not in red_edges]\n\n# Need to create a layout when doing\n# separate calls to draw nodes and edges\npos = nx.spring_layout(G)\nnx.draw_networkx_nodes(G, pos, cmap=plt.get_cmap('jet'), \n                       node_color = values, node_size = 500)\nnx.draw_networkx_labels(G, pos)\nnx.draw_networkx_edges(G, pos, edgelist=red_edges, edge_color='r', arrows=True)\nnx.draw_networkx_edges(G, pos, edgelist=black_edges, arrows=False)\nplt.show()\n"}, {"idx": "webquery-test-11", "doc": "inserting characters at the start and end of a string", "code": "yourstring = \"L\" + yourstring + \"LL\"\nLm = 1\nn = 2\nyourstring = (\"L\" * m) + yourstring + (\"L\" * n)\n"}, {"idx": "webquery-test-12", "doc": "Python (and Python C API): __new__ versus __init__", "code": "__new____init____init__tupletuple&gt;&gt;&gt; x = (1, 2)\n&gt;&gt;&gt; x\n(1, 2)\n&gt;&gt;&gt; x.__init__([3, 4])\n&gt;&gt;&gt; x # tuple.__init__ does nothing\n(1, 2)\n&gt;&gt;&gt; y = [1, 2]\n&gt;&gt;&gt; y\n[1, 2]\n&gt;&gt;&gt; y.__init__([3, 4])\n&gt;&gt;&gt; y # list.__init__ reinitialises the object\n[3, 4]\n__new____new____init____init____init____init__"}, {"idx": "webquery-test-13", "doc": "Calling Java from Python", "code": "from py4j.java_gateway import JavaGateway\ngateway = JavaGateway()                        # connect to the JVM\njava_object = gateway.jvm.mypackage.MyClass()  # invoke constructor\nother_object = java_object.doThat()\nother_object.doThis(1,'abc')\ngateway.jvm.java.lang.System.out.println('Hello World!') # call a static method\n"}, {"idx": "webquery-test-14", "doc": "Django - how to create a file and save it to a model's FileField?", "code": "FileFieldFileFieldself.license_file.save(new_name, new_contents)\nnew_namenew_namenew_namenew_namenew_namefrom django.core.files.base import ContentFile, File\n\n# Using File\nwith open('/path/to/file') as f:\n    self.license_file.save(new_name, File(f))\n\n# Using ContentFile\nself.license_file.save(new_name, ContentFile('A string with the file content'))\n"}, {"idx": "webquery-test-15", "doc": "What exactly is Python multiprocessing Module's .join() Method Doing?", "code": "join()join()join()join()join()join()join()join()join()join()join()join()join()join()join()daemondaemondaemonp = Process(target=say_hello)\np.daemon = True\np.start()\n# Both parent and child will exit here, since the main process has completed.\n"}, {"idx": "webquery-test-16", "doc": "Why does `if None.__eq__(\"a\")` seem to evaluate to True (but not quite)?", "code": "__dunder____dunder____dunder____dunder__None.__eq__('a')\n# NotImplemented\nNotImplementedNotImplementedNotImplementedNotImplementedNotImplemented1 == 'a'\n# False\n(1).__eq__('a')(1).__eq__('a')(1).__eq__('a')(1).__eq__('a')(1).__eq__('a')class A:\n    def __eq__(self, other):\n        print('A.__eq__')\n        return NotImplemented\n\nclass B:\n    def __eq__(self, other):\n        print('B.__eq__')\n        return NotImplemented\n\nclass C:\n    def __eq__(self, other):\n        print('C.__eq__')\n        return True\n\na = A()\nb = B()\nc = C()\n\nprint(a == b)\n# A.__eq__\n# B.__eq__\n# False\n\nprint(a == c)\n# A.__eq__\n# C.__eq__\n# True\n\nprint(c == a)\n# C.__eq__\n# True\nNotImplementedbool(None.__eq__(\"a\"))\n# True\nbool(NotImplemented)\n# True\nNotImplementedNotImplementedNotImplementedNotImplementedNotImplemented====import operator\noperator.eq(1, 'a')\n# False\nNoneNonevar = 'a'\nvar is None\n# False\n\nvar2 = None\nvar2 is None\n# True\noperator.is_operator.is_(var2, None)\n# True\nNoneNoneNoneNoneNoneNoneNoneNoneNone"}, {"idx": "webquery-test-17", "doc": "Running python script inside ipython", "code": "%run ./my_script.py\n"}, {"idx": "webquery-test-18", "doc": "Saving interactive Matplotlib figures", "code": "# Plot something\nimport matplotlib.pyplot as plt\nfig,ax = plt.subplots()\nax.plot([1,2,3],[10,-10,30])\nimport pickle\npickle.dump(fig, open('FigureObject.fig.pickle', 'wb')) # This is for Python 3 - py2 may need `file` instead of `open`\nimport pickle\nfigx = pickle.load(open('FigureObject.fig.pickle', 'rb'))\n\nfigx.show() # Show the figure, edit it, etc.!\ndata = figx.axes[0].lines[0].get_data()\n"}, {"idx": "webquery-test-19", "doc": "matplotlib: colorbars and its text labels", "code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.colors import ListedColormap\n\n#discrete color scheme\ncMap = ListedColormap(['white', 'green', 'blue','red'])\n\n#data\nnp.random.seed(42)\ndata = np.random.rand(4, 4)\nfig, ax = plt.subplots()\nheatmap = ax.pcolor(data, cmap=cMap)\n\n#legend\ncbar = plt.colorbar(heatmap)\n\ncbar.ax.get_yaxis().set_ticks([])\nfor j, lab in enumerate(['$0$','$1$','$2$','$&gt;3$']):\n    cbar.ax.text(.5, (2 * j + 1) / 8.0, lab, ha='center', va='center')\ncbar.ax.get_yaxis().labelpad = 15\ncbar.ax.set_ylabel('# of contacts', rotation=270)\n\n\n# put the major ticks at the middle of each cell\nax.set_xticks(np.arange(data.shape[1]) + 0.5, minor=False)\nax.set_yticks(np.arange(data.shape[0]) + 0.5, minor=False)\nax.invert_yaxis()\n\n#labels\ncolumn_labels = list('ABCD')\nrow_labels = list('WXYZ')\nax.set_xticklabels(column_labels, minor=False)\nax.set_yticklabels(row_labels, minor=False)\n\nplt.show()\n"}, {"idx": "webquery-test-20", "doc": "\"Private\" (implementation) class in Python", "code": "class _Internal:\n    ...\n"}, {"idx": "webquery-test-21", "doc": "Flask-SQLAlchemy import/context issue", "code": "flask_sqlalchemy# apps.members.models\nfrom flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n\nclass Member(db.Model):\n    # fields here\n    pass\ninit_app# apps.application.py\nfrom flask import Flask\nfrom apps.members.models import db\n\napp = Flask(__name__)\n# later on\ndb.init_app(app)\ndb# apps.shared.models\nfrom flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n# apps.members.models\nfrom apps.shared.models import db\n\nclass Member(db.Model):\n    # TODO: Implement this.\n    pass\n# apps.reporting.members\nfrom flask import render_template\nfrom apps.members.models import Member\n\ndef report_on_members():\n    # TODO: Actually use arguments\n    members = Member.filter(1==1).all()\n    return render_template(\"report.html\", members=members)\n# apps.reporting.routes\nfrom flask import Blueprint\nfrom apps.reporting.members import report_on_members\n\nreporting = Blueprint(\"reporting\", __name__)\n\nreporting.route(\"/member-report\", methods=[\"GET\",\"POST\"])(report_on_members)\n# apps.application\nfrom flask import Flask\nfrom apps.shared import db\nfrom apps.reporting.routes import reporting\n\napp = Flask(__name__)\ndb.init_app(app)\napp.register_blueprint(reporting)\ncreate_app"}, {"idx": "webquery-test-22", "doc": "Pandas Merge - How to avoid duplicating columns", "code": "cols_to_use = df2.columns.difference(df.columns)\ntolist()dfNew = merge(df, df2[cols_to_use], left_index=True, right_index=True, how='outer')\n"}, {"idx": "webquery-test-23", "doc": "Python: how to print range a-z?", "code": "&gt;&gt;&gt; import string\n&gt;&gt;&gt; string.ascii_lowercase[:14]\n'abcdefghijklmn'\n&gt;&gt;&gt; string.ascii_lowercase[:14:2]\n'acegikm'\n[i + j for i, j in zip(list_of_urls, string.ascii_lowercase[:14])]\n"}]